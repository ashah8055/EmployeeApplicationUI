{"ast":null,"code":"import _typeof from 'babel-runtime/helpers/typeof';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { Option, OptGroup } from 'rc-select';\nimport classNames from 'classnames';\nimport Select from '../select';\nimport Input from '../input';\nimport InputElement from './InputElement';\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    _classCallCheck(this, AutoComplete);\n\n    var _this = _possibleConstructorReturn(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).apply(this, arguments));\n\n    _this.getInputElement = function () {\n      var children = _this.props.children;\n      var element = children && React.isValidElement(children) && children.type !== Option ? React.Children.only(_this.props.children) : React.createElement(Input, null);\n\n      var elementProps = _extends({}, element.props); // https://github.com/ant-design/ant-design/pull/7742\n\n\n      delete elementProps.children;\n      return React.createElement(InputElement, elementProps, element);\n    };\n\n    _this.saveSelect = function (node) {\n      _this.select = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: 'focus',\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.select.blur();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          size = _props.size,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className,\n          notFoundContent = _props.notFoundContent,\n          prefixCls = _props.prefixCls,\n          optionLabelProp = _props.optionLabelProp,\n          dataSource = _props.dataSource,\n          children = _props.children;\n      var cls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-lg', size === 'large'), _defineProperty(_classNames, prefixCls + '-sm', size === 'small'), _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls + '-show-search', true), _defineProperty(_classNames, prefixCls + '-auto-complete', true), _classNames));\n      var options = void 0;\n      var childArray = React.Children.toArray(children);\n\n      if (childArray.length && isSelectOptionOrSelectOptGroup(childArray[0])) {\n        options = children;\n      } else {\n        options = dataSource ? dataSource.map(function (item) {\n          if (React.isValidElement(item)) {\n            return item;\n          }\n\n          switch (typeof item === 'undefined' ? 'undefined' : _typeof(item)) {\n            case 'string':\n              return React.createElement(Option, {\n                key: item\n              }, item);\n\n            case 'object':\n              return React.createElement(Option, {\n                key: item.value\n              }, item.text);\n\n            default:\n              throw new Error('AutoComplete[dataSource] only supports type `string[] | Object[]`.');\n          }\n        }) : [];\n      }\n\n      return React.createElement(Select, _extends({}, this.props, {\n        className: cls,\n        mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE,\n        optionLabelProp: optionLabelProp,\n        getInputElement: this.getInputElement,\n        notFoundContent: notFoundContent,\n        ref: this.saveSelect\n      }), options);\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;\nAutoComplete.Option = Option;\nAutoComplete.OptGroup = OptGroup;\nAutoComplete.defaultProps = {\n  prefixCls: 'ant-select',\n  transitionName: 'slide-up',\n  optionLabelProp: 'children',\n  choiceTransitionName: 'zoom',\n  showSearch: false,\n  filterOption: false\n};","map":null,"metadata":{},"sourceType":"module"}