{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport RcTree, { TreeNode } from 'rc-tree';\nimport DirectoryTree from './DirectoryTree';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport Icon from '../icon';\n\nvar Tree = function (_React$Component) {\n  _inherits(Tree, _React$Component);\n\n  function Tree() {\n    _classCallCheck(this, Tree);\n\n    var _this = _possibleConstructorReturn(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).apply(this, arguments));\n\n    _this.renderSwitcherIcon = function (_ref) {\n      var isLeaf = _ref.isLeaf,\n          expanded = _ref.expanded,\n          loading = _ref.loading;\n      var _this$props = _this.props,\n          prefixCls = _this$props.prefixCls,\n          showLine = _this$props.showLine;\n\n      if (loading) {\n        return React.createElement(Icon, {\n          type: 'loading',\n          className: prefixCls + '-switcher-loading-icon'\n        });\n      }\n\n      if (showLine) {\n        if (isLeaf) {\n          return React.createElement(Icon, {\n            type: 'file',\n            className: prefixCls + '-switcher-line-icon'\n          });\n        }\n\n        return React.createElement(Icon, {\n          type: expanded ? 'minus-square' : 'plus-square',\n          className: prefixCls + '-switcher-line-icon',\n          theme: 'outlined'\n        });\n      } else {\n        if (isLeaf) {\n          return null;\n        }\n\n        return React.createElement(Icon, {\n          type: 'caret-down',\n          className: prefixCls + '-switcher-icon',\n          theme: 'filled'\n        });\n      }\n    };\n\n    _this.setTreeRef = function (node) {\n      _this.tree = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(Tree, [{\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          className = props.className,\n          showIcon = props.showIcon;\n      var checkable = props.checkable;\n      return React.createElement(RcTree, _extends({\n        ref: this.setTreeRef\n      }, props, {\n        className: classNames(!showIcon && prefixCls + '-icon-hide', className),\n        checkable: checkable ? React.createElement('span', {\n          className: prefixCls + '-checkbox-inner'\n        }) : checkable,\n        switcherIcon: this.renderSwitcherIcon\n      }), this.props.children);\n    }\n  }]);\n\n  return Tree;\n}(React.Component);\n\nexport default Tree;\nTree.TreeNode = TreeNode;\nTree.DirectoryTree = DirectoryTree;\nTree.defaultProps = {\n  prefixCls: 'ant-tree',\n  checkable: false,\n  showIcon: false,\n  openAnimation: _extends({}, animation, {\n    appear: null\n  })\n};","map":null,"metadata":{},"sourceType":"module"}