{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { cloneElement } from 'react';\nimport warning from '../_util/warning';\nimport BreadcrumbItem from './BreadcrumbItem';\nimport classNames from 'classnames';\n\nfunction getBreadcrumbName(route, params) {\n  if (!route.breadcrumbName) {\n    return null;\n  }\n\n  var paramsKeys = Object.keys(params).join('|');\n  var name = route.breadcrumbName.replace(new RegExp(':(' + paramsKeys + ')', 'g'), function (replacement, key) {\n    return params[key] || replacement;\n  });\n  return name;\n}\n\nfunction defaultItemRender(route, params, routes, paths) {\n  var isLastItem = routes.indexOf(route) === routes.length - 1;\n  var name = getBreadcrumbName(route, params);\n  return isLastItem ? React.createElement('span', null, name) : React.createElement('a', {\n    href: '#/' + paths.join('/')\n  }, name);\n}\n\nvar Breadcrumb = function (_React$Component) {\n  _inherits(Breadcrumb, _React$Component);\n\n  function Breadcrumb() {\n    _classCallCheck(this, Breadcrumb);\n\n    return _possibleConstructorReturn(this, (Breadcrumb.__proto__ || Object.getPrototypeOf(Breadcrumb)).apply(this, arguments));\n  }\n\n  _createClass(Breadcrumb, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var props = this.props;\n      warning(!('linkRender' in props || 'nameRender' in props), '`linkRender` and `nameRender` are removed, please use `itemRender` instead, ' + 'see: https://u.ant.design/item-render.');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var crumbs = void 0;\n      var _props = this.props,\n          separator = _props.separator,\n          prefixCls = _props.prefixCls,\n          style = _props.style,\n          className = _props.className,\n          routes = _props.routes,\n          _props$params = _props.params,\n          params = _props$params === undefined ? {} : _props$params,\n          children = _props.children,\n          _props$itemRender = _props.itemRender,\n          itemRender = _props$itemRender === undefined ? defaultItemRender : _props$itemRender;\n\n      if (routes && routes.length > 0) {\n        var paths = [];\n        crumbs = routes.map(function (route) {\n          route.path = route.path || '';\n          var path = route.path.replace(/^\\//, '');\n          Object.keys(params).forEach(function (key) {\n            path = path.replace(':' + key, params[key]);\n          });\n\n          if (path) {\n            paths.push(path);\n          }\n\n          return React.createElement(BreadcrumbItem, {\n            separator: separator,\n            key: route.breadcrumbName || path\n          }, itemRender(route, params, routes, paths));\n        });\n      } else if (children) {\n        crumbs = React.Children.map(children, function (element, index) {\n          if (!element) {\n            return element;\n          }\n\n          warning(element.type && element.type.__ANT_BREADCRUMB_ITEM, 'Breadcrumb only accepts Breadcrumb.Item as it\\'s children');\n          return cloneElement(element, {\n            separator: separator,\n            key: index\n          });\n        });\n      }\n\n      return React.createElement('div', {\n        className: classNames(className, prefixCls),\n        style: style\n      }, crumbs);\n    }\n  }]);\n\n  return Breadcrumb;\n}(React.Component);\n\nexport default Breadcrumb;\nBreadcrumb.defaultProps = {\n  prefixCls: 'ant-breadcrumb',\n  separator: '/'\n};\nBreadcrumb.propTypes = {\n  prefixCls: PropTypes.string,\n  separator: PropTypes.node,\n  routes: PropTypes.array,\n  params: PropTypes.object,\n  linkRender: PropTypes.func,\n  nameRender: PropTypes.func\n};","map":null,"metadata":{},"sourceType":"module"}