{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport TimePickerPanel from 'rc-time-picker/es/Panel';\nimport classNames from 'classnames';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport { generateShowHourMinuteSecond } from '../time-picker';\nimport enUS from './locale/en_US';\n\nfunction getColumns(_ref) {\n  var showHour = _ref.showHour,\n      showMinute = _ref.showMinute,\n      showSecond = _ref.showSecond,\n      use12Hours = _ref.use12Hours;\n  var column = 0;\n\n  if (showHour) {\n    column += 1;\n  }\n\n  if (showMinute) {\n    column += 1;\n  }\n\n  if (showSecond) {\n    column += 1;\n  }\n\n  if (use12Hours) {\n    column += 1;\n  }\n\n  return column;\n}\n\nexport default function wrapPicker(Picker, defaultFormat) {\n  var _a;\n\n  return _a = function (_React$Component) {\n    _inherits(PickerWrapper, _React$Component);\n\n    function PickerWrapper() {\n      _classCallCheck(this, PickerWrapper);\n\n      var _this = _possibleConstructorReturn(this, (PickerWrapper.__proto__ || Object.getPrototypeOf(PickerWrapper)).apply(this, arguments));\n\n      _this.handleOpenChange = function (open) {\n        var onOpenChange = _this.props.onOpenChange;\n        onOpenChange(open);\n      };\n\n      _this.handleFocus = function (e) {\n        var onFocus = _this.props.onFocus;\n\n        if (onFocus) {\n          onFocus(e);\n        }\n      };\n\n      _this.handleBlur = function (e) {\n        var onBlur = _this.props.onBlur;\n\n        if (onBlur) {\n          onBlur(e);\n        }\n      };\n\n      _this.handleMouseEnter = function (e) {\n        var onMouseEnter = _this.props.onMouseEnter;\n\n        if (onMouseEnter) {\n          onMouseEnter(e);\n        }\n      };\n\n      _this.handleMouseLeave = function (e) {\n        var onMouseLeave = _this.props.onMouseLeave;\n\n        if (onMouseLeave) {\n          onMouseLeave(e);\n        }\n      };\n\n      _this.savePicker = function (node) {\n        _this.picker = node;\n      };\n\n      _this.getDefaultLocale = function () {\n        var result = _extends({}, enUS, _this.props.locale);\n\n        result.lang = _extends({}, result.lang, (_this.props.locale || {}).lang);\n        return result;\n      };\n\n      _this.renderPicker = function (locale, localeCode) {\n        var _classNames2;\n\n        var props = _this.props;\n        var prefixCls = props.prefixCls,\n            inputPrefixCls = props.inputPrefixCls;\n        var pickerClass = classNames(prefixCls + '-picker', _defineProperty({}, prefixCls + '-picker-' + props.size, !!props.size));\n        var pickerInputClass = classNames(prefixCls + '-picker-input', inputPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, inputPrefixCls + '-lg', props.size === 'large'), _defineProperty(_classNames2, inputPrefixCls + '-sm', props.size === 'small'), _defineProperty(_classNames2, inputPrefixCls + '-disabled', props.disabled), _classNames2));\n        var timeFormat = props.showTime && props.showTime.format || 'HH:mm:ss';\n\n        var rcTimePickerProps = _extends({}, generateShowHourMinuteSecond(timeFormat), {\n          format: timeFormat,\n          use12Hours: props.showTime && props.showTime.use12Hours\n        });\n\n        var columns = getColumns(rcTimePickerProps);\n        var timePickerCls = prefixCls + '-time-picker-column-' + columns;\n        var timePicker = props.showTime ? React.createElement(TimePickerPanel, _extends({}, rcTimePickerProps, props.showTime, {\n          prefixCls: prefixCls + '-time-picker',\n          className: timePickerCls,\n          placeholder: locale.timePickerLocale.placeholder,\n          transitionName: 'slide-up'\n        })) : null;\n        return React.createElement(Picker, _extends({}, props, {\n          ref: _this.savePicker,\n          pickerClass: pickerClass,\n          pickerInputClass: pickerInputClass,\n          locale: locale,\n          localeCode: localeCode,\n          timePicker: timePicker,\n          onOpenChange: _this.handleOpenChange,\n          onFocus: _this.handleFocus,\n          onBlur: _this.handleBlur,\n          onMouseEnter: _this.handleMouseEnter,\n          onMouseLeave: _this.handleMouseLeave\n        }));\n      };\n\n      return _this;\n    }\n\n    _createClass(PickerWrapper, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        var _props = this.props,\n            autoFocus = _props.autoFocus,\n            disabled = _props.disabled;\n\n        if (autoFocus && !disabled) {\n          this.focus();\n        }\n      }\n    }, {\n      key: 'focus',\n      value: function focus() {\n        this.picker.focus();\n      }\n    }, {\n      key: 'blur',\n      value: function blur() {\n        this.picker.blur();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return React.createElement(LocaleReceiver, {\n          componentName: 'DatePicker',\n          defaultLocale: this.getDefaultLocale\n        }, this.renderPicker);\n      }\n    }]);\n\n    return PickerWrapper;\n  }(React.Component), _a.defaultProps = {\n    format: defaultFormat || 'YYYY-MM-DD',\n    transitionName: 'slide-up',\n    popupStyle: {},\n    onChange: function onChange() {},\n    onOk: function onOk() {},\n    onOpenChange: function onOpenChange() {},\n    locale: {},\n    prefixCls: 'ant-calendar',\n    inputPrefixCls: 'ant-input'\n  }, _a;\n}","map":null,"metadata":{},"sourceType":"module"}