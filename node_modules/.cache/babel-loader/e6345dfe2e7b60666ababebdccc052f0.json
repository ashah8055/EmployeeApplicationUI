{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Animate from 'rc-animate';\nimport ScrollNumber from './ScrollNumber';\nimport classNames from 'classnames';\n\nvar Badge = function (_React$Component) {\n  _inherits(Badge, _React$Component);\n\n  function Badge() {\n    _classCallCheck(this, Badge);\n\n    return _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));\n  }\n\n  _createClass(Badge, [{\n    key: 'render',\n    value: function render() {\n      var _classNames, _classNames2, _classNames3;\n\n      var _a = this.props,\n          count = _a.count,\n          showZero = _a.showZero,\n          prefixCls = _a.prefixCls,\n          scrollNumberPrefixCls = _a.scrollNumberPrefixCls,\n          overflowCount = _a.overflowCount,\n          className = _a.className,\n          style = _a.style,\n          children = _a.children,\n          dot = _a.dot,\n          status = _a.status,\n          text = _a.text,\n          offset = _a.offset,\n          title = _a.title,\n          restProps = __rest(_a, [\"count\", \"showZero\", \"prefixCls\", \"scrollNumberPrefixCls\", \"overflowCount\", \"className\", \"style\", \"children\", \"dot\", \"status\", \"text\", \"offset\", \"title\"]);\n\n      var displayCount = count > overflowCount ? overflowCount + '+' : count;\n      var isZero = displayCount === '0' || displayCount === 0;\n      var isDot = dot && !isZero || status; // dot mode don't need count\n\n      if (isDot) {\n        displayCount = '';\n      }\n\n      var isEmpty = displayCount === null || displayCount === undefined || displayCount === '';\n      var hidden = (isEmpty || isZero && !showZero) && !isDot;\n      var statusCls = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-status-dot', !!status), _defineProperty(_classNames, prefixCls + '-status-' + status, !!status), _classNames));\n      var scrollNumberCls = classNames((_classNames2 = {}, _defineProperty(_classNames2, prefixCls + '-dot', isDot), _defineProperty(_classNames2, prefixCls + '-count', !isDot), _defineProperty(_classNames2, prefixCls + '-multiple-words', !isDot && count && count.toString && count.toString().length > 1), _defineProperty(_classNames2, prefixCls + '-status-' + status, !!status), _classNames2));\n      var badgeCls = classNames(className, prefixCls, (_classNames3 = {}, _defineProperty(_classNames3, prefixCls + '-status', !!status), _defineProperty(_classNames3, prefixCls + '-not-a-wrapper', !children), _classNames3));\n      var styleWithOffset = offset ? _extends({\n        right: -parseInt(offset[0], 10),\n        marginTop: offset[1]\n      }, style) : style; // <Badge status=\"success\" />\n\n      if (!children && status) {\n        return React.createElement('span', _extends({}, restProps, {\n          className: badgeCls,\n          style: styleWithOffset\n        }), React.createElement('span', {\n          className: statusCls\n        }), React.createElement('span', {\n          className: prefixCls + '-status-text'\n        }, text));\n      }\n\n      var scrollNumber = hidden ? null : React.createElement(ScrollNumber, {\n        prefixCls: scrollNumberPrefixCls,\n        'data-show': !hidden,\n        className: scrollNumberCls,\n        count: displayCount,\n        title: title || count,\n        style: styleWithOffset,\n        key: 'scrollNumber'\n      });\n      var statusText = hidden || !text ? null : React.createElement('span', {\n        className: prefixCls + '-status-text'\n      }, text);\n      return React.createElement('span', _extends({}, restProps, {\n        className: badgeCls\n      }), children, React.createElement(Animate, {\n        component: '',\n        showProp: 'data-show',\n        transitionName: children ? prefixCls + '-zoom' : '',\n        transitionAppear: true\n      }, scrollNumber), statusText);\n    }\n  }]);\n\n  return Badge;\n}(React.Component);\n\nexport default Badge;\nBadge.defaultProps = {\n  prefixCls: 'ant-badge',\n  scrollNumberPrefixCls: 'ant-scroll-number',\n  count: null,\n  showZero: false,\n  dot: false,\n  overflowCount: 99\n};\nBadge.propTypes = {\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  showZero: PropTypes.bool,\n  dot: PropTypes.bool,\n  overflowCount: PropTypes.number\n};","map":null,"metadata":{},"sourceType":"module"}