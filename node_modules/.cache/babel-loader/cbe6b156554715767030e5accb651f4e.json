{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Amar/emp/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLoginUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\nfunction fetchLoginUser(action) {\n  var formBody, reqMethod, loginUrl, response, result;\n  return _regeneratorRuntime.wrap(function fetchLoginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          formBody = {};\n          formBody.firstname = \"asdfg\"; //action.code;\n\n          formBody.lastname = \"zxcvbb\"; //action.provider;\n\n          formBody.age = \"34\"; //const reqMethod = \"POST\";\n\n          reqMethod = \"GET\";\n          loginUrl = 'http://localhost:8080/employee?firstname=\"test\"&lastname=\"test\"&age=34';\n          _context.next = 9;\n          return call(GetDataFromServer, loginUrl, '', '');\n\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return response.json();\n\n        case 12:\n          result = _context.sent;\n          console.log('Result Json' + result);\n\n          if (!result.error) {\n            _context.next = 19;\n            break;\n          }\n\n          _context.next = 17;\n          return put({\n            type: \"LOGIN_USER_SERVER_REPONSE_ERROR\",\n            error: result.error\n          });\n\n        case 17:\n          _context.next = 21;\n          break;\n\n        case 19:\n          _context.next = 21;\n          return put({\n            type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 21:\n          _context.next = 26;\n          break;\n\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](0);\n          // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n          console.log(_context.t0);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 23]]);\n}\n\nexport default function rootSaga(params) {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(Types.LOGIN_USER, fetchLoginUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/store/sagas.js"],"names":["fetchLoginUser","rootSaga","takeEvery","call","put","select","take","fork","all","takeLatest","Types","GetDataFromServer","action","formBody","firstname","lastname","age","reqMethod","loginUrl","response","json","result","console","log","error","type","LOGIN_USER_SERVER_RESPONSE_SUCCESS","params","LOGIN_USER"],"mappings":";;;;yBAMUA,c;;;yBAuBeC,Q;;AA7BzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,GAAnD,EAAwDC,UAAxD,QAA0E,oBAA1E;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,iBAAT,QAAkC,YAAlC;;AAIA,SAAUX,cAAV,CAAyBY,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,QAFR,GAEmB,EAFnB;AAGIA,UAAAA,QAAQ,CAACC,SAAT,GAAqB,OAArB,CAHJ,CAGiC;;AAC7BD,UAAAA,QAAQ,CAACE,QAAT,GAAoB,QAApB,CAJJ,CAIkC;;AAC9BF,UAAAA,QAAQ,CAACG,GAAT,GAAe,IAAf,CALJ,CAMI;;AACMC,UAAAA,SAPV,GAOsB,KAPtB;AAQUC,UAAAA,QARV,GAQqB,wEARrB;AAAA;AASqB,iBAAMf,IAAI,CAACQ,iBAAD,EAAoBO,QAApB,EAA8B,EAA9B,EAAkC,EAAlC,CAAV;;AATrB;AASUC,UAAAA,QATV;AAAA;AAUmB,iBAAMA,QAAQ,CAACC,IAAT,EAAN;;AAVnB;AAUUC,UAAAA,MAVV;AAWIC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,MAA5B;;AAXJ,eAYQA,MAAM,CAACG,KAZf;AAAA;AAAA;AAAA;;AAAA;AAaM,iBAAMpB,GAAG,CAAC;AAAEqB,YAAAA,IAAI,EAAE,iCAAR;AAA2CD,YAAAA,KAAK,EAAEH,MAAM,CAACG;AAAzD,WAAD,CAAT;;AAbN;AAAA;AAAA;;AAAA;AAAA;AAeM,iBAAMpB,GAAG,CAAC;AAAEqB,YAAAA,IAAI,EAAEf,KAAK,CAACgB,kCAAd;AAAkDL,YAAAA,MAAM,EAANA;AAAlD,WAAD,CAAT;;AAfN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBI;AACAC,UAAAA,OAAO,CAACC,GAAR;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,eAAe,SAAUtB,QAAV,CAAmB0B,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMzB,SAAS,CAACQ,KAAK,CAACkB,UAAP,EAAmB5B,cAAnB,CAAf;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\n\n\nfunction* fetchLoginUser(action) {\n  try {\n    let formBody = {};\n    formBody.firstname = \"asdfg\";//action.code;\n    formBody.lastname = \"zxcvbb\"; //action.provider;\n    formBody.age = \"34\"\n    //const reqMethod = \"POST\";\n    const reqMethod = \"GET\";\n    const loginUrl = 'http://localhost:8080/employee?firstname=\"test\"&lastname=\"test\"&age=34';\n    const response = yield call(GetDataFromServer, loginUrl, '', '');\n    const result = yield response.json();\n    console.log('Result Json' + result);\n    if (result.error) {\n      yield put({ type: \"LOGIN_USER_SERVER_REPONSE_ERROR\", error: result.error });\n    } else {\n      yield put({ type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS, result });\n    }\n  } catch (error) {\n    // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga(params) {\n  yield takeEvery(Types.LOGIN_USER, fetchLoginUser);\n}\n"]},"metadata":{},"sourceType":"module"}