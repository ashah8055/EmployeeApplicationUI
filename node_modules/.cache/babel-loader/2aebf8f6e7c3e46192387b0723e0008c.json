{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as moment from 'moment';\nimport { polyfill } from 'react-lifecycles-compat';\nimport MonthCalendar from 'rc-calendar/es/MonthCalendar';\nimport RcDatePicker from 'rc-calendar/es/Picker';\nimport classNames from 'classnames';\nimport omit from 'omit.js';\nimport Icon from '../icon';\nimport warning from '../_util/warning';\nimport interopDefault from '../_util/interopDefault';\nimport getDataOrAriaProps from '../_util/getDataOrAriaProps';\nexport default function createPicker(TheCalendar) {\n  var CalenderWrapper = function (_React$Component) {\n    _inherits(CalenderWrapper, _React$Component);\n\n    function CalenderWrapper(props) {\n      _classCallCheck(this, CalenderWrapper);\n\n      var _this = _possibleConstructorReturn(this, (CalenderWrapper.__proto__ || Object.getPrototypeOf(CalenderWrapper)).call(this, props));\n\n      _this.renderFooter = function () {\n        var _this$props = _this.props,\n            prefixCls = _this$props.prefixCls,\n            renderExtraFooter = _this$props.renderExtraFooter;\n        return renderExtraFooter ? React.createElement('div', {\n          className: prefixCls + '-footer-extra'\n        }, renderExtraFooter.apply(undefined, arguments)) : null;\n      };\n\n      _this.clearSelection = function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        _this.handleChange(null);\n      };\n\n      _this.handleChange = function (value) {\n        var props = _this.props;\n\n        if (!('value' in props)) {\n          _this.setState({\n            value: value,\n            showDate: value\n          });\n        }\n\n        props.onChange(value, value && value.format(props.format) || '');\n\n        _this.focus();\n      };\n\n      _this.handleCalendarChange = function (value) {\n        _this.setState({\n          showDate: value\n        });\n      };\n\n      _this.saveInput = function (node) {\n        _this.input = node;\n      };\n\n      var value = props.value || props.defaultValue;\n\n      if (value && !interopDefault(moment).isMoment(value)) {\n        throw new Error('The value/defaultValue of DatePicker or MonthPicker must be ' + 'a moment object after `antd@2.0`, see: https://u.ant.design/date-picker-value');\n      }\n\n      _this.state = {\n        value: value,\n        showDate: value\n      };\n      return _this;\n    }\n\n    _createClass(CalenderWrapper, [{\n      key: 'focus',\n      value: function focus() {\n        this.input.focus();\n      }\n    }, {\n      key: 'blur',\n      value: function blur() {\n        this.input.blur();\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _classNames,\n            _classNames2,\n            _this2 = this;\n\n        var _state = this.state,\n            value = _state.value,\n            showDate = _state.showDate;\n        var props = omit(this.props, ['onChange']);\n        var prefixCls = props.prefixCls,\n            locale = props.locale,\n            localeCode = props.localeCode,\n            suffixIcon = props.suffixIcon;\n        var placeholder = 'placeholder' in props ? props.placeholder : locale.lang.placeholder;\n        var disabledTime = props.showTime ? props.disabledTime : null;\n        var calendarClassName = classNames((_classNames = {}, _defineProperty(_classNames, prefixCls + '-time', props.showTime), _defineProperty(_classNames, prefixCls + '-month', MonthCalendar === TheCalendar), _classNames));\n\n        if (value && localeCode) {\n          value.locale(localeCode);\n        }\n\n        var pickerProps = {};\n        var calendarProps = {};\n        var pickerStyle = {};\n\n        if (props.showTime) {\n          calendarProps = {\n            // fix https://github.com/ant-design/ant-design/issues/1902\n            onSelect: this.handleChange\n          };\n          pickerStyle.width = 195;\n        } else {\n          pickerProps = {\n            onChange: this.handleChange\n          };\n        }\n\n        if ('mode' in props) {\n          calendarProps.mode = props.mode;\n        }\n\n        warning(!('onOK' in props), 'It should be `DatePicker[onOk]` or `MonthPicker[onOk]`, instead of `onOK`!');\n        var calendar = React.createElement(TheCalendar, _extends({}, calendarProps, {\n          disabledDate: props.disabledDate,\n          disabledTime: disabledTime,\n          locale: locale.lang,\n          timePicker: props.timePicker,\n          defaultValue: props.defaultPickerValue || interopDefault(moment)(),\n          dateInputPlaceholder: placeholder,\n          prefixCls: prefixCls,\n          className: calendarClassName,\n          onOk: props.onOk,\n          dateRender: props.dateRender,\n          format: props.format,\n          showToday: props.showToday,\n          monthCellContentRender: props.monthCellContentRender,\n          renderFooter: this.renderFooter,\n          onPanelChange: props.onPanelChange,\n          onChange: this.handleCalendarChange,\n          value: showDate\n        }));\n        var clearIcon = !props.disabled && props.allowClear && value ? React.createElement(Icon, {\n          type: 'close-circle',\n          className: prefixCls + '-picker-clear',\n          onClick: this.clearSelection,\n          theme: 'filled'\n        }) : null;\n        var inputIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n          className: classNames((_classNames2 = {}, _defineProperty(_classNames2, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames2, prefixCls + '-picker-icon', true), _classNames2))\n        }) : React.createElement('span', {\n          className: prefixCls + '-picker-icon'\n        }, suffixIcon)) || React.createElement(Icon, {\n          type: 'calendar',\n          className: prefixCls + '-picker-icon'\n        });\n        var dataOrAriaProps = getDataOrAriaProps(props);\n\n        var input = function input(_ref) {\n          var inputValue = _ref.value;\n          return React.createElement('div', null, React.createElement('input', _extends({\n            ref: _this2.saveInput,\n            disabled: props.disabled,\n            readOnly: true,\n            value: inputValue && inputValue.format(props.format) || '',\n            placeholder: placeholder,\n            className: props.pickerInputClass\n          }, dataOrAriaProps)), clearIcon, inputIcon);\n        };\n\n        return React.createElement('span', {\n          id: props.id,\n          className: classNames(props.className, props.pickerClass),\n          style: _extends({}, pickerStyle, props.style),\n          onFocus: props.onFocus,\n          onBlur: props.onBlur,\n          onMouseEnter: props.onMouseEnter,\n          onMouseLeave: props.onMouseLeave\n        }, React.createElement(RcDatePicker, _extends({}, props, pickerProps, {\n          calendar: calendar,\n          value: value,\n          prefixCls: prefixCls + '-picker-container',\n          style: props.popupStyle\n        }), input));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        var state = null;\n\n        if ('value' in nextProps) {\n          state = {\n            value: nextProps.value\n          };\n\n          if (nextProps.value !== prevState.value) {\n            state = _extends({}, state, {\n              showDate: nextProps.value\n            });\n          }\n        }\n\n        return state;\n      }\n    }]);\n\n    return CalenderWrapper;\n  }(React.Component);\n\n  CalenderWrapper.defaultProps = {\n    prefixCls: 'ant-calendar',\n    allowClear: true,\n    showToday: true\n  };\n  polyfill(CalenderWrapper);\n  return CalenderWrapper;\n}","map":null,"metadata":{},"sourceType":"module"}