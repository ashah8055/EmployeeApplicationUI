{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nvar AnchorLink = function (_React$Component) {\n  _inherits(AnchorLink, _React$Component);\n\n  function AnchorLink() {\n    _classCallCheck(this, AnchorLink);\n\n    var _this = _possibleConstructorReturn(this, (AnchorLink.__proto__ || Object.getPrototypeOf(AnchorLink)).apply(this, arguments));\n\n    _this.handleClick = function (e) {\n      var _this$context$antAnch = _this.context.antAnchor,\n          scrollTo = _this$context$antAnch.scrollTo,\n          onClick = _this$context$antAnch.onClick;\n      var _this$props = _this.props,\n          href = _this$props.href,\n          title = _this$props.title;\n\n      if (onClick) {\n        onClick(e, {\n          title: title,\n          href: href\n        });\n      }\n\n      scrollTo(href);\n    };\n\n    return _this;\n  }\n\n  _createClass(AnchorLink, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.context.antAnchor.registerLink(this.props.href);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var href = nextProps.href;\n\n      if (this.props.href !== href) {\n        this.context.antAnchor.unregisterLink(this.props.href);\n        this.context.antAnchor.registerLink(href);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.context.antAnchor.unregisterLink(this.props.href);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          href = _props.href,\n          title = _props.title,\n          children = _props.children;\n      var active = this.context.antAnchor.activeLink === href;\n      var wrapperClassName = classNames(prefixCls + '-link', _defineProperty({}, prefixCls + '-link-active', active));\n      var titleClassName = classNames(prefixCls + '-link-title', _defineProperty({}, prefixCls + '-link-title-active', active));\n      return React.createElement('div', {\n        className: wrapperClassName\n      }, React.createElement('a', {\n        className: titleClassName,\n        href: href,\n        title: typeof title === 'string' ? title : '',\n        onClick: this.handleClick\n      }, title), children);\n    }\n  }]);\n\n  return AnchorLink;\n}(React.Component);\n\nexport default AnchorLink;\nAnchorLink.defaultProps = {\n  prefixCls: 'ant-anchor',\n  href: '#'\n};\nAnchorLink.contextTypes = {\n  antAnchor: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}