{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport { findDOMNode } from 'react-dom';\nimport keyCode from 'rc-util/es/KeyCode';\nexport function isEventFromHandle(e, handles) {\n  return Object.keys(handles).some(function (key) {\n    return e.target === findDOMNode(handles[key]);\n  });\n}\nexport function isValueOutOfRange(value, _ref) {\n  var min = _ref.min,\n      max = _ref.max;\n  return value < min || value > max;\n}\nexport function isNotTouchEvent(e) {\n  return e.touches.length > 1 || e.type.toLowerCase() === 'touchend' && e.touches.length > 0;\n}\nexport function getClosestPoint(val, _ref2) {\n  var marks = _ref2.marks,\n      step = _ref2.step,\n      min = _ref2.min;\n  var points = Object.keys(marks).map(parseFloat);\n\n  if (step !== null) {\n    var closestStep = Math.round((val - min) / step) * step + min;\n    points.push(closestStep);\n  }\n\n  var diffs = points.map(function (point) {\n    return Math.abs(val - point);\n  });\n  return points[diffs.indexOf(Math.min.apply(Math, _toConsumableArray(diffs)))];\n}\nexport function getPrecision(step) {\n  var stepString = step.toString();\n  var precision = 0;\n\n  if (stepString.indexOf('.') >= 0) {\n    precision = stepString.length - stepString.indexOf('.') - 1;\n  }\n\n  return precision;\n}\nexport function getMousePosition(vertical, e) {\n  return vertical ? e.clientY : e.pageX;\n}\nexport function getTouchPosition(vertical, e) {\n  return vertical ? e.touches[0].clientY : e.touches[0].pageX;\n}\nexport function getHandleCenterPosition(vertical, handle) {\n  var coords = handle.getBoundingClientRect();\n  return vertical ? coords.top + coords.height * 0.5 : coords.left + coords.width * 0.5;\n}\nexport function ensureValueInRange(val, _ref3) {\n  var max = _ref3.max,\n      min = _ref3.min;\n\n  if (val <= min) {\n    return min;\n  }\n\n  if (val >= max) {\n    return max;\n  }\n\n  return val;\n}\nexport function ensureValuePrecision(val, props) {\n  var step = props.step;\n  var closestPoint = getClosestPoint(val, props);\n  return step === null ? closestPoint : parseFloat(closestPoint.toFixed(getPrecision(step)));\n}\nexport function pauseEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\nexport function getKeyboardValueMutator(e) {\n  switch (e.keyCode) {\n    case keyCode.UP:\n    case keyCode.RIGHT:\n      return function (value, props) {\n        return value + props.step;\n      };\n\n    case keyCode.DOWN:\n    case keyCode.LEFT:\n      return function (value, props) {\n        return value - props.step;\n      };\n\n    case keyCode.END:\n      return function (value, props) {\n        return props.max;\n      };\n\n    case keyCode.HOME:\n      return function (value, props) {\n        return props.min;\n      };\n\n    case keyCode.PAGE_UP:\n      return function (value, props) {\n        return value + props.step * 2;\n      };\n\n    case keyCode.PAGE_DOWN:\n      return function (value, props) {\n        return value - props.step * 2;\n      };\n\n    default:\n      return undefined;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}