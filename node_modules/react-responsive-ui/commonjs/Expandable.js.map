{"version":3,"sources":["../source/Expandable.js"],"names":["PureComponent","Component","Expandable","state","onTap","event","props","getTogglerNode","onTapOutside","container","contains","target","onTouchStart","touches","length","onTouchCancel","initialTouchX","changedTouches","clientX","initialTouchY","clientY","tapping","onTouchMove","deltaX","Math","abs","deltaY","moveThreshold","onTouchEnd","undefined","isExpanded","expanded","expand","parameters","toggle","collapse","onExpand","onExpanded","onCollapse","onCollapsed","preload","onPreloadStateChange","onPreloadError","isPreloading","refreshingExpanded","refresh","Promise","resolve","isToggling","stopListeningToTouches","clearTimeout","scrollIntoViewTimer","focusOut","setState","removeFromDOMAfterCollapsed","then","removeFromDOMTimer","shouldRender","setTimeout","scrollIntoView","listenToTouches","expandAnimationDuration","onKeyDown","defaultPrevented","ctrlKey","altKey","shiftKey","metaKey","keyCode","preventDefault","storeContainerNode","node","onFocusOut","onBlur","blurTimer","result","document","addEventListener","removeEventListener","error","console","shouldScrollIntoView","scrollIntoViewDelay","scrollMode","behavior","block","inline","max","alignment","upward","closeLabel","CloseButtonIcon","closeButtonIcon","style","className","children","Children","map","child","cloneElement","propTypes","func","oneOf","bool","object","string","isRequired","number","oneOfType","defaultProps"],"mappings":"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","file":"Expandable.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport scrollIntoView from 'scroll-into-view-if-needed'\r\n\r\nimport Close, { CloseIcon } from './Close'\r\n\r\n// import { isInternetExplorer } from './utility/dom'\r\nimport { onBlur } from './utility/focus'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n/**\r\n * Usage:\r\n *\r\n * <button onClick={() => this.expandable.toggle()}>\r\n *   Toggle\r\n * </button>\r\n *\r\n * <Expandable ref={ref => this.expandable = ref}>\r\n *   ...\r\n * </Expandable>\r\n *\r\n * Methods:\r\n * * `.toggle()`\r\n * * `.expand()`\r\n * * `.collapse()`\r\n * * `.isExpanded()`\r\n */\r\nexport default class Expandable extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Can optionally preload `<Expandable/>` contents before expanding it.\r\n\t\t// Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\t\tonPreloadStateChange : PropTypes.func,\r\n\t\tonPreloadError : PropTypes.func,\r\n\r\n\t\tonExpand : PropTypes.func,\r\n\t\tonCollapse : PropTypes.func,\r\n\r\n\t\t// Whether the `<Expandable/>` expands upwards or downwards.\r\n\t\talignment : PropTypes.oneOf(['left', 'right']),\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then the dropdown expands itself upward.\r\n\t\t// (as opposed to the default downward)\r\n\t\tupward : PropTypes.bool,\r\n\r\n\t\t// CSS style object.\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t// CSS class.\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// When the `<Expandable/>` is expanded\r\n\t\t// its content may not fit on the screen.\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then the browser will automatically scroll\r\n\t\t// so that the expanded content fits on the screen.\r\n\t\tscrollIntoView : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then these two are gonna define the delay after which it scrolls into view.\r\n\t\texpandAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\tscrollIntoViewDelay : PropTypes.number.isRequired,\r\n\r\n\t\tgetTogglerNode : PropTypes.func,\r\n\t\tonFocusOut : PropTypes.func,\r\n\t\tonTapOutside : PropTypes.func,\r\n\r\n\t\t// `aria-label` for the \"Close\" button\r\n\t\t// (which is an \"x\" visible in fullscreen mode).\r\n\t\tcloseLabel : PropTypes.string,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([false])]).isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tscrollIntoView : true,\r\n\t\texpandAnimationDuration : 150,\r\n\t\tscrollIntoViewDelay : 0,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : CloseIcon\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\t\tclearTimeout(this.removeFromDOMTimer)\r\n\t\tclearTimeout(this.blurTimer)\r\n\r\n\t\tthis.stopListeningToTouches()\r\n\t}\r\n\r\n\tlistenToTouches()\r\n\t{\r\n\t\tdocument.addEventListener('touchstart', this.onTouchStart)\r\n\t\tdocument.addEventListener('touchmove', this.onTouchMove)\r\n\t\tdocument.addEventListener('touchend', this.onTouchEnd)\r\n\t\tdocument.addEventListener('touchcancel', this.onTouchCancel)\r\n\t}\r\n\r\n\tstopListeningToTouches()\r\n\t{\r\n\t\tdocument.removeEventListener('touchstart', this.onTouchStart)\r\n\t\tdocument.removeEventListener('touchmove', this.onTouchMove)\r\n\t\tdocument.removeEventListener('touchend', this.onTouchEnd)\r\n\t\tdocument.removeEventListener('touchcancel', this.onTouchCancel)\r\n\t}\r\n\r\n\t// On mobile devices \"blur\" event isn't triggered\r\n\t// when a user taps outside. This is to allow touch scrolling\r\n\t// while not losing focus on an input field or a button.\r\n\t// Adding a manual \"on click\" listener to emulate\r\n\t// \"on blur\" event when user taps outside (to collapse the expandable).\r\n\tonTap = (event) =>\r\n\t{\r\n\t\tconst { getTogglerNode, onTapOutside } = this.props\r\n\r\n\t\tif (this.container.contains(event.target)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (getTogglerNode) {\r\n\t\t\tif (getTogglerNode().contains(event.target)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (onTapOutside) {\r\n\t\t\tonTapOutside()\r\n\t\t}\r\n\t}\r\n\r\n\tonTouchStart = (event) =>\r\n\t{\r\n\t\t// Ignore multitouch.\r\n\t\tif (event.touches.length > 1)\r\n\t\t{\r\n\t\t\t// Reset.\r\n\t\t\treturn this.onTouchCancel()\r\n\t\t}\r\n\r\n\t\tthis.initialTouchX = event.changedTouches[0].clientX\r\n\t\tthis.initialTouchY = event.changedTouches[0].clientY\r\n\t\tthis.tapping = true\r\n\t}\r\n\r\n\tonTouchMove = (event) =>\r\n\t{\r\n\t\t// Ignore multitouch.\r\n\t\tif (!this.tapping) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst deltaX = Math.abs(event.changedTouches[0].clientX - this.initialTouchX)\r\n\t\tconst deltaY = Math.abs(event.changedTouches[0].clientY - this.initialTouchY)\r\n\t\tconst moveThreshold = 5\r\n\r\n\t\tif (deltaX > moveThreshold || deltaY > moveThreshold)\r\n\t\t{\r\n\t\t\t// Reset.\r\n\t\t\tthis.onTouchCancel()\r\n\t\t}\r\n\t}\r\n\r\n\tonTouchEnd = (event) =>\r\n\t{\r\n\t\t// Ignore multitouch.\r\n\t\tif (!this.tapping) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Reset.\r\n\t\tthis.onTouchCancel()\r\n\r\n\t\tthis.onTap(event)\r\n\t}\r\n\r\n\tonTouchCancel = () =>\r\n\t{\r\n\t\tthis.initialTouchX = undefined\r\n\t\tthis.initialTouchY = undefined\r\n\t\tthis.tapping = false\r\n\t}\r\n\r\n\tisExpanded = () => this.state.expanded\r\n\r\n\texpand   = (parameters) => this.toggle(true, parameters)\r\n\tcollapse = () => this.toggle(false)\r\n\r\n\ttoggle = (expand, parameters = {}) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonExpand,\r\n\t\t\tonExpanded,\r\n\t\t\tonCollapse,\r\n\t\t\tonCollapsed,\r\n\t\t\tpreload,\r\n\t\t\tonPreloadStateChange,\r\n\t\t\tonPreloadError,\r\n\t\t\tonTapOutside\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\texpanded,\r\n\t\t\tisPreloading\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// If no `expand` argument provided then just toggle.\r\n\t\tif (expand === undefined) {\r\n\t\t\texpand = !expanded\r\n\t\t}\r\n\r\n\t\t// Don't collapse if already collapsed.\r\n\t\t// Don't expand if already expanded\r\n\t\t// until manually forcing a refresh of content.\r\n\r\n\t\tlet refreshingExpanded\r\n\r\n\t\tif (expand && expanded && parameters.refresh) {\r\n\t\t\trefreshingExpanded = true\r\n\t\t}\r\n\r\n\t\tif (expand === expanded && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tif (this.isToggling && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tthis.isToggling = true\r\n\r\n\t\t// Collapse.\r\n\t\tif (!expand)\r\n\t\t{\r\n\t\t\tthis.stopListeningToTouches()\r\n\r\n\t\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\r\n\t\t\tif (onCollapse) {\r\n\t\t\t\tonCollapse({ focusOut: this.focusOut })\r\n\t\t\t}\r\n\r\n\t\t\t// Set `expanded` to `false` to play the collapse CSS animation.\r\n\t\t\t// Once that animation is finished remove\r\n\t\t\t// the contents of the `<Expanded/>` from DOM.\r\n\t\t\treturn this.setState({ expanded : false }, () =>\r\n\t\t\t{\r\n\t\t\t\tif (onCollapsed) {\r\n\t\t\t\t\tonCollapsed();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.removeFromDOMAfterCollapsed()\r\n\r\n\t\t\t\tthis.isToggling = false\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// Expand.\r\n\t\treturn this.preload().then(() => new Promise((resolve) =>\r\n\t\t{\r\n\t\t\tclearTimeout(this.removeFromDOMTimer)\r\n\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tshouldRender : true\r\n\t\t\t},\r\n\t\t\t// Without the 10ms delay for some reason the CSS \"expand\" animation won't play.\r\n\t\t\t// Perhaps a browser decides to optimize two subsequent renders\r\n\t\t\t// and doesn't render \"pre-expanded\" and \"expanded\" states separately.\r\n\t\t\t// Even with a 0ms delay it would randomly play/not-play the expand animation.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif (onExpand) {\r\n\t\t\t\t\tonExpand()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetTimeout(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({ expanded : true }, () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (onExpanded) {\r\n\t\t\t\t\t\t\tonExpanded()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.scrollIntoView()\r\n\t\t\t\t\t\tresolve()\r\n\r\n\t\t\t\t\t\tif (onTapOutside) {\r\n\t\t\t\t\t\t\tthis.listenToTouches()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.isToggling = false\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\t10)\r\n\t\t\t})\r\n\t\t}))\r\n\t}\r\n\r\n\t// Preload `<Expanded/>` content (if required).\r\n\tpreload()\r\n\t{\r\n\t\tconst { preload, onPreloadStateChange } = this.props\r\n\r\n\t\tif (preload)\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tisPreloading : true\r\n\t\t\t})\r\n\r\n\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\tonPreloadStateChange(true)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (preload ? preload() : Promise.resolve())\r\n\t\t\t.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\r\n\t\t\t\t// if (onPreloadError) {\r\n\t\t\t\t// \tonPreloadError(error)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\tscrollIntoView()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tscrollIntoView : shouldScrollIntoView,\r\n\t\t\tscrollIntoViewDelay,\r\n\t\t\texpandAnimationDuration\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// // For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// // to the top of the page, therefore turn it off for IE.\r\n\t\t// if (!isInternetExplorer() && shouldScrollIntoView)\r\n\t\tif (shouldScrollIntoView)\r\n\t\t{\r\n\t\t\tthis.scrollIntoViewTimer = setTimeout(() =>\r\n\t\t\t{\r\n\t\t\t\tconst { expanded } = this.state\r\n\r\n\t\t\t\t// If still expanded and there are any options\r\n\t\t\t\t// then scroll into view.\r\n\t\t\t\tif (expanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/359\r\n\t\t\t\t\t// scrollIntoView(this.container, false, { duration: 300 })\r\n\r\n\t\t\t\t\tscrollIntoView(this.container,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tscrollMode : 'if-needed',\r\n\t\t\t\t\t\tbehavior   : 'smooth',\r\n\t\t\t\t\t\tblock      : 'nearest',\r\n\t\t\t\t\t\tinline     : 'nearest'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tMath.max(scrollIntoViewDelay, expandAnimationDuration) * 1.1)\r\n\t\t}\r\n\t}\r\n\r\n\tremoveFromDOMAfterCollapsed = () =>\r\n\t{\r\n\t\tconst { expandAnimationDuration } = this.props\r\n\r\n\t\t// For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// to the top of the page, therefore turn it off for IE.\r\n\t\tthis.removeFromDOMTimer = setTimeout(() =>\r\n\t\t{\r\n\t\t\t// Re-render to remove the options DOM nodes.\r\n\t\t\tthis.setState({ shouldRender : false })\r\n\t\t},\r\n\t\texpandAnimationDuration * 1.1)\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// Collapse on \"Escape\".\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded\r\n\t\t\t\treturn this.collapse()\r\n\t\t}\r\n\t}\r\n\r\n\tstoreContainerNode = (node) => this.container = node\r\n\r\n\tonFocusOut = (event) =>\r\n\t{\r\n\t\tconst { onFocusOut } = this.props\r\n\r\n\t\tthis.focusOut = true\r\n\t\tonFocusOut(event)\r\n\t\tthis.focusOut = undefined\r\n\t}\r\n\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { getTogglerNode, onFocusOut } = this.props\r\n\r\n\t\tif (onFocusOut && this.container)\r\n\t\t{\r\n\t\t\tclearTimeout(this.blurTimer)\r\n\t\t\tconst result = onBlur(event, this.onFocusOut, () => this.container, getTogglerNode)\r\n\t\t\tif (typeof result === 'number') {\r\n\t\t\t\tthis.blurTimer = result\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon : CloseButtonIcon,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tshouldRender,\r\n\t\t\texpanded\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tif (!shouldRender) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\t// `tabIndex={ -1 }` makes the `<div/>` focusable.\r\n\t\t// Hence the `<Expandable/>` doesn't collapse on click inside it.\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tref={ this.storeContainerNode }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\ttabIndex={ -1 }\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\t'rrui__expandable',\r\n\t\t\t\t\t'rrui__expandable--overlay',\r\n\t\t\t\t\t'rrui__shadow',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__expandable--expanded'      : expanded,\r\n\t\t\t\t\t\t'rrui__expandable--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t'rrui__expandable--right-aligned' : alignment === 'right',\r\n\t\t\t\t\t\t'rrui__expandable--upward'        : upward,\r\n\t\t\t\t\t\t'rrui__expandable--downward'      : !upward\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{ React.Children.map(children, (child) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn React.cloneElement(child,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclassName: classNames\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tchild.props.className,\r\n\t\t\t\t\t\t\t'rrui__expandable__content',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__expandable__content--expanded' : expanded\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}) }\r\n\r\n\t\t\t\t{/* The \"x\" button to hide the fullscreen expandable on mobile devices */}\r\n\t\t\t\t{ expanded && CloseButtonIcon &&\r\n\t\t\t\t\t<Close\r\n\t\t\t\t\t\tonClick={this.collapse}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\tclassName={classNames('rrui__close--bottom-right', 'rrui__expandable__close')}>\r\n\t\t\t\t\t\t<CloseButtonIcon/>\r\n\t\t\t\t\t</Close>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}"]}