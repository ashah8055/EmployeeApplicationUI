{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport Button from '../button';\nimport Dropdown from './dropdown';\nimport classNames from 'classnames';\nvar ButtonGroup = Button.Group;\n\nvar DropdownButton = function (_React$Component) {\n  _inherits(DropdownButton, _React$Component);\n\n  function DropdownButton() {\n    _classCallCheck(this, DropdownButton);\n\n    return _possibleConstructorReturn(this, (DropdownButton.__proto__ || Object.getPrototypeOf(DropdownButton)).apply(this, arguments));\n  }\n\n  _createClass(DropdownButton, [{\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          type = _a.type,\n          disabled = _a.disabled,\n          onClick = _a.onClick,\n          htmlType = _a.htmlType,\n          children = _a.children,\n          prefixCls = _a.prefixCls,\n          className = _a.className,\n          overlay = _a.overlay,\n          trigger = _a.trigger,\n          align = _a.align,\n          visible = _a.visible,\n          onVisibleChange = _a.onVisibleChange,\n          placement = _a.placement,\n          getPopupContainer = _a.getPopupContainer,\n          restProps = __rest(_a, [\"type\", \"disabled\", \"onClick\", \"htmlType\", \"children\", \"prefixCls\", \"className\", \"overlay\", \"trigger\", \"align\", \"visible\", \"onVisibleChange\", \"placement\", \"getPopupContainer\"]);\n\n      var dropdownProps = {\n        align: align,\n        overlay: overlay,\n        disabled: disabled,\n        trigger: disabled ? [] : trigger,\n        onVisibleChange: onVisibleChange,\n        placement: placement,\n        getPopupContainer: getPopupContainer\n      };\n\n      if ('visible' in this.props) {\n        dropdownProps.visible = visible;\n      }\n\n      return React.createElement(ButtonGroup, _extends({}, restProps, {\n        className: classNames(prefixCls, className)\n      }), React.createElement(Button, {\n        type: type,\n        disabled: disabled,\n        onClick: onClick,\n        htmlType: htmlType\n      }, children), React.createElement(Dropdown, dropdownProps, React.createElement(Button, {\n        type: type,\n        icon: 'ellipsis'\n      })));\n    }\n  }]);\n\n  return DropdownButton;\n}(React.Component);\n\nexport default DropdownButton;\nDropdownButton.defaultProps = {\n  placement: 'bottomRight',\n  type: 'default',\n  prefixCls: 'ant-dropdown-button'\n};","map":null,"metadata":{},"sourceType":"module"}