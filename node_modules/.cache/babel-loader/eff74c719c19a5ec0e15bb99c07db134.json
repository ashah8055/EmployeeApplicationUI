{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport RcMenu, { Divider, ItemGroup } from 'rc-menu';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport animation from '../_util/openAnimation';\nimport warning from '../_util/warning';\nimport SubMenu from './SubMenu';\nimport Item from './MenuItem';\n\nvar Menu = function (_React$Component) {\n  _inherits(Menu, _React$Component);\n\n  function Menu(props) {\n    _classCallCheck(this, Menu);\n\n    var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));\n\n    _this.inlineOpenKeys = []; // Restore vertical mode when menu is collapsed responsively when mounted\n    // https://github.com/ant-design/ant-design/issues/13104\n    // TODO: not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation\n\n    _this.handleMouseEnter = function (e) {\n      _this.restoreModeVerticalFromInline();\n\n      var onMouseEnter = _this.props.onMouseEnter;\n\n      if (onMouseEnter) {\n        onMouseEnter(e);\n      }\n    };\n\n    _this.handleTransitionEnd = function (e) {\n      // when inlineCollapsed menu width animation finished\n      // https://github.com/ant-design/ant-design/issues/12864\n      var widthCollapsed = e.propertyName === 'width' && e.target === e.currentTarget; // Fix for <Menu style={{ width: '100%' }} />, the width transition won't trigger when menu is collapsed\n      // https://github.com/ant-design/ant-design-pro/issues/2783\n\n      var iconScaled = e.propertyName === 'font-size' && e.target.className.indexOf('anticon') >= 0;\n\n      if (widthCollapsed || iconScaled) {\n        _this.restoreModeVerticalFromInline();\n      }\n    };\n\n    _this.handleClick = function (e) {\n      _this.handleOpenChange([]);\n\n      var onClick = _this.props.onClick;\n\n      if (onClick) {\n        onClick(e);\n      }\n    };\n\n    _this.handleOpenChange = function (openKeys) {\n      _this.setOpenKeys(openKeys);\n\n      var onOpenChange = _this.props.onOpenChange;\n\n      if (onOpenChange) {\n        onOpenChange(openKeys);\n      }\n    };\n\n    warning(!('onOpen' in props || 'onClose' in props), '`onOpen` and `onClose` are removed, please use `onOpenChange` instead, ' + 'see: https://u.ant.design/menu-on-open-change.');\n    warning(!('inlineCollapsed' in props && props.mode !== 'inline'), '`inlineCollapsed` should only be used when Menu\\'s `mode` is inline.');\n    var openKeys = void 0;\n\n    if ('openKeys' in props) {\n      openKeys = props.openKeys;\n    } else if ('defaultOpenKeys' in props) {\n      openKeys = props.defaultOpenKeys;\n    }\n\n    _this.state = {\n      openKeys: openKeys || []\n    };\n    return _this;\n  }\n\n  _createClass(Menu, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        inlineCollapsed: this.getInlineCollapsed(),\n        antdMenuTheme: this.props.theme\n      };\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps, nextContext) {\n      if (this.props.mode === 'inline' && nextProps.mode !== 'inline') {\n        this.switchingModeFromInline = true;\n      }\n\n      if ('openKeys' in nextProps) {\n        this.setState({\n          openKeys: nextProps.openKeys\n        });\n        return;\n      }\n\n      if (nextProps.inlineCollapsed && !this.props.inlineCollapsed || nextContext.siderCollapsed && !this.context.siderCollapsed) {\n        this.switchingModeFromInline = true;\n        this.inlineOpenKeys = this.state.openKeys;\n        this.setState({\n          openKeys: []\n        });\n      }\n\n      if (!nextProps.inlineCollapsed && this.props.inlineCollapsed || !nextContext.siderCollapsed && this.context.siderCollapsed) {\n        this.setState({\n          openKeys: this.inlineOpenKeys\n        });\n        this.inlineOpenKeys = [];\n      }\n    }\n  }, {\n    key: 'restoreModeVerticalFromInline',\n    value: function restoreModeVerticalFromInline() {\n      if (this.switchingModeFromInline) {\n        this.switchingModeFromInline = false;\n        this.setState({});\n      }\n    }\n  }, {\n    key: 'setOpenKeys',\n    value: function setOpenKeys(openKeys) {\n      if (!('openKeys' in this.props)) {\n        this.setState({\n          openKeys: openKeys\n        });\n      }\n    }\n  }, {\n    key: 'getRealMenuMode',\n    value: function getRealMenuMode() {\n      var inlineCollapsed = this.getInlineCollapsed();\n\n      if (this.switchingModeFromInline && inlineCollapsed) {\n        return 'inline';\n      }\n\n      var mode = this.props.mode;\n      return inlineCollapsed ? 'vertical' : mode;\n    }\n  }, {\n    key: 'getInlineCollapsed',\n    value: function getInlineCollapsed() {\n      var inlineCollapsed = this.props.inlineCollapsed;\n\n      if (this.context.siderCollapsed !== undefined) {\n        return this.context.siderCollapsed;\n      }\n\n      return inlineCollapsed;\n    }\n  }, {\n    key: 'getMenuOpenAnimation',\n    value: function getMenuOpenAnimation(menuMode) {\n      var _props = this.props,\n          openAnimation = _props.openAnimation,\n          openTransitionName = _props.openTransitionName;\n      var menuOpenAnimation = openAnimation || openTransitionName;\n\n      if (openAnimation === undefined && openTransitionName === undefined) {\n        switch (menuMode) {\n          case 'horizontal':\n            menuOpenAnimation = 'slide-up';\n            break;\n\n          case 'vertical':\n          case 'vertical-left':\n          case 'vertical-right':\n            // When mode switch from inline\n            // submenu should hide without animation\n            if (this.switchingModeFromInline) {\n              menuOpenAnimation = '';\n              this.switchingModeFromInline = false;\n            } else {\n              menuOpenAnimation = 'zoom-big';\n            }\n\n            break;\n\n          case 'inline':\n            menuOpenAnimation = animation;\n            break;\n\n          default:\n        }\n      }\n\n      return menuOpenAnimation;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          prefixCls = _props2.prefixCls,\n          className = _props2.className,\n          theme = _props2.theme;\n      var menuMode = this.getRealMenuMode();\n      var menuOpenAnimation = this.getMenuOpenAnimation(menuMode);\n      var menuClassName = classNames(className, prefixCls + '-' + theme, _defineProperty({}, prefixCls + '-inline-collapsed', this.getInlineCollapsed()));\n      var menuProps = {\n        openKeys: this.state.openKeys,\n        onOpenChange: this.handleOpenChange,\n        className: menuClassName,\n        mode: menuMode\n      };\n\n      if (menuMode !== 'inline') {\n        // closing vertical popup submenu after click it\n        menuProps.onClick = this.handleClick;\n        menuProps.openTransitionName = menuOpenAnimation;\n      } else {\n        menuProps.openAnimation = menuOpenAnimation;\n      } // https://github.com/ant-design/ant-design/issues/8587\n\n\n      var collapsedWidth = this.context.collapsedWidth;\n\n      if (this.getInlineCollapsed() && (collapsedWidth === 0 || collapsedWidth === '0' || collapsedWidth === '0px')) {\n        return null;\n      }\n\n      return React.createElement(RcMenu, _extends({}, this.props, menuProps, {\n        onTransitionEnd: this.handleTransitionEnd,\n        onMouseEnter: this.handleMouseEnter\n      }));\n    }\n  }]);\n\n  return Menu;\n}(React.Component);\n\nexport default Menu;\nMenu.Divider = Divider;\nMenu.Item = Item;\nMenu.SubMenu = SubMenu;\nMenu.ItemGroup = ItemGroup;\nMenu.defaultProps = {\n  prefixCls: 'ant-menu',\n  className: '',\n  theme: 'light',\n  focusable: false\n};\nMenu.childContextTypes = {\n  inlineCollapsed: PropTypes.bool,\n  antdMenuTheme: PropTypes.string\n};\nMenu.contextTypes = {\n  siderCollapsed: PropTypes.bool,\n  collapsedWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};","map":null,"metadata":{},"sourceType":"module"}