{"version":3,"sources":["../source/helpers.js"],"names":["count_occurences","symbol","string","count","split","character"],"mappings":";;;;;QACgBA,gB,GAAAA,gB;AADhB;AACO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkCC,MAAlC,EACP;AACC,KAAIC,QAAQ,CAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAwBD,OAAOE,KAAP,CAAa,EAAb,CAAxB,kHACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MADWC,SACX;;AACC,MAAIA,cAAcJ,MAAlB,EACA;AACCE;AACA;AACD;;AAED,QAAOA,KAAP;AACA","file":"helpers.js","sourcesContent":["// Counts all occurences of a symbol in a string\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes)\r\n\t// but template placeholder characters don't fall into that range\r\n\t// so skipping such miscellaneous \"exotic\" characters\r\n\t// won't matter here for just counting placeholder character occurrences.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}"]}