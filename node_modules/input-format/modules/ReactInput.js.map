{"version":3,"sources":["../source/ReactInput.js"],"names":["ReactInput","storeInstance","instance","input","getInputElement","onChange","event","props","parse","format","onPaste","onCut","onBlur","_event","target","value","undefined","stopPropagation","preventDefault","onKeyDown","inputComponent","rest","React","createElement","ref","isEmpty","text","focus","Component","propTypes","PropTypes","func","isRequired","string","type","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,U;;;;;;;;;;;;;;4LA2EpBC,a,GAAgB,UAACC,QAAD,EAChB;AACC,SAAKC,KAAL,GAAaD,QAAb;AACA,G,QAMDE,e,GAAkB,YAClB;AACC,UAAO,MAAKD,KAAZ;AACA,G,QAEDE,Q,GAAW,UAACC,KAAD,EACX;AAAA,qBAMG,MAAKC,KANR;AAAA,OAGEC,KAHF,eAGEA,KAHF;AAAA,OAIEC,MAJF,eAIEA,MAJF;;;AAQC,UAAO,4BAENH,KAFM,EAGN,MAAKF,eAAL,EAHM,EAINI,KAJM,EAKNC,MALM,EAMN,MAAKF,KAAL,CAAWF,QANL,CAAP;AAQA,G,QAEDK,O,GAAU,UAACJ,KAAD,EACV;AAAA,sBAMG,MAAKC,KANR;AAAA,OAGEC,KAHF,gBAGEA,KAHF;AAAA,OAIEC,MAJF,gBAIEA,MAJF;;;AAQC,UAAO,2BAENH,KAFM,EAGN,MAAKF,eAAL,EAHM,EAINI,KAJM,EAKNC,MALM,EAMN,MAAKF,KAAL,CAAWF,QANL,CAAP;AAQA,G,QAEDM,K,GAAQ,UAACL,KAAD,EACR;AAAA,sBAMG,MAAKC,KANR;AAAA,OAGEC,KAHF,gBAGEA,KAHF;AAAA,OAIEC,MAJF,gBAIEA,MAJF;;;AAQC,UAAO,yBAENH,KAFM,EAGN,MAAKF,eAAL,EAHM,EAINI,KAJM,EAKNC,MALM,EAMN,MAAKF,KAAL,CAAWF,QANL,CAAP;AAQA,G,QAGDO,M,GAAS,UAACN,KAAD,EACT;AAAA,sBAC2B,MAAKC,KADhC;AAAA,OACSC,KADT,gBACSA,KADT;AAAA,OACgBI,MADhB,gBACgBA,MADhB;;AAGC;AACA;AACA;;AACA,OAAIA,MAAJ,EACA;AACC,QAAMC,sBAEFP,KAFE;AAGLQ,0BAEIR,MAAMQ,MAFV;AAGCC,aAAO,qBAAO,MAAKX,eAAL,GAAuBW,KAA9B,EAAqCC,SAArC,EAAgDR,KAAhD,EAAuDO;AAH/D;;AAOD;AACA;AAXM,MAAN,CAYAF,OAAOI,eAAP,GAAyBX,MAAMW,eAA/B;AACAJ,WAAOK,cAAP,GAAyBZ,MAAMY,cAA/B;;AAEAN,WAAOC,MAAP;AACA;AACD,G,QAEDM,S,GAAY,UAACb,KAAD,EACZ;AAAA,sBAMG,MAAKC,KANR;AAAA,OAGEC,KAHF,gBAGEA,KAHF;AAAA,OAIEC,MAJF,gBAIEA,MAJF;;;AAQC,OAAI,MAAKF,KAAL,CAAWY,SAAf,EACA;AACC,UAAKZ,KAAL,CAAWY,SAAX,CAAqBb,KAArB;AACA;;AAED,UAAO,6BAENA,KAFM,EAGN,MAAKF,eAAL,EAHM,EAINI,KAJM,EAKNC,MALM,EAMN,MAAKF,KAAL,CAAWF,QANL,CAAP;AAQA,G;;;;;2BAxJD;AAAA,gBASG,KAAKE,KATR;AAAA,OAGEQ,KAHF,UAGEA,KAHF;AAAA,OAIEP,KAJF,UAIEA,KAJF;AAAA,OAKEC,MALF,UAKEA,MALF;AAAA,OAMEW,cANF,UAMEA,cANF;AAAA,OAOKC,IAPL;;AAWC;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAOC,gBAAMC,aAAN,CAAoBH,cAApB,eAEHC,IAFG;AAGNG,SAAY,KAAKvB,aAHX;AAINc,WAAYN,OAAOgB,QAAQV,KAAR,IAAiB,EAAjB,GAAsBA,KAA7B,EAAoCW,IAJ1C;AAKNP,eAAY,KAAKA,SALX;AAMNd,cAAY,KAAKA,QANX;AAONK,aAAY,KAAKA,OAPX;AAQNC,WAAY,KAAKA,KARX;AASNC,YAAY,KAAKA;AATX,MAAP;AAWA;;AAOD;;;;;;AAkEA;;;;;;AAqDA;;;;0BAKA;AACC,QAAKR,eAAL,GAAuBuB,KAAvB;AACA;;;;EA9MsCL,gBAAMM,S,UAEtCC,S,GACP;AACC;AACArB,QAASsB,oBAAUC,IAAV,CAAeC,UAFzB;;AAIC;AACAvB,SAASqB,oBAAUC,IAAV,CAAeC,UALzB;;AAOC;AACA;AACA;AACAZ,iBAAiBU,oBAAUG,MAAV,CAAiBD,UAVnC;;AAYC;AACAE,OAAOJ,oBAAUG,MAAV,CAAiBD,UAbzB;;AAeC;AACAjB,QAASe,oBAAUG,MAhBpB;;AAkBC;AACA5B,WAAWyB,oBAAUC,IAAV,CAAeC,UAnB3B;;AAqBC;AACA;AACA;AACApB,SAASkB,oBAAUC,IAxBpB;;AA0BC;AACAZ,YAAYW,oBAAUC;AA3BvB,C,SA8BOI,Y,GACP;AACC;AACA;AACA;AACAf,iBAAiB,OAJlB;;AAMC;AACAc,OAAO;AAPR,C;kBAlCoBlC,U;;;AAiNrB,SAASyB,OAAT,CAAiBV,KAAjB,EACA;AACC,QAAOA,UAAUC,SAAV,IAAuBD,UAAU,IAAxC;AACA","file":"ReactInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport _parse from './parse'\r\n\r\nimport\r\n{\r\n\tonChange,\r\n\tonCut,\r\n\tonPaste,\r\n\tonKeyDown\r\n}\r\nfrom './input control'\r\n\r\n// Usage:\r\n//\r\n// <ReactInput\r\n// \tvalue={this.state.phone}\r\n// \tonChange={phone => this.setState({ phone })}\r\n// \tparse={character => character}\r\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\r\n//\r\nexport default class ReactInput extends React.Component\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Parses a single characher of `<input/>` text.\r\n\t\tparse  : PropTypes.func.isRequired,\r\n\r\n\t\t// Formats `value` into `<input/>` text.\r\n\t\tformat : PropTypes.func.isRequired,\r\n\r\n\t\t// Renders `<input/>` by default.\r\n\t\t// For some reason non-default `inputComponent`\r\n\t\t// will reset caret position.\r\n\t\tinputComponent : PropTypes.string.isRequired,\r\n\r\n\t\t// `<input/>` `type` attribute.\r\n\t\ttype : PropTypes.string.isRequired,\r\n\r\n\t\t// Is parsed from <input/> text.\r\n\t\tvalue  : PropTypes.string,\r\n\r\n\t\t// This handler is called each time `<input/>` text is changed.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\r\n\t\t// not the formatted text.\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t// Passthrough\r\n\t\tonKeyDown : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Renders `<input/>` by default.\r\n\t\t// For some reason non-default `inputComponent`\r\n\t\t// will reset caret position.\r\n\t\tinputComponent : 'input',\r\n\r\n\t\t// `<input/>` `type` attribute.\r\n\t\ttype : 'text'\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tinputComponent,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// Non-string `inputComponent`s would work in this case\r\n\t\t// but it would also introduce a caret reset bug:\r\n\t\t// the caret position would reset on each input.\r\n\t\t// The origins of this bug are unknown, they may be\r\n\t\t// somehow related to the `ref` property\r\n\t\t// being intercepted by React here.\r\n\t\treturn React.createElement(inputComponent,\r\n\t\t{\r\n\t\t\t...rest,\r\n\t\t\tref       : this.storeInstance,\r\n\t\t\tvalue     : format(isEmpty(value) ? '' : value).text,\r\n\t\t\tonKeyDown : this.onKeyDown,\r\n\t\t\tonChange  : this.onChange,\r\n\t\t\tonPaste   : this.onPaste,\r\n\t\t\tonCut     : this.onCut,\r\n\t\t\tonBlur    : this.onBlur\r\n\t\t})\r\n\t}\r\n\r\n\tstoreInstance = (instance) =>\r\n\t{\r\n\t\tthis.input = instance\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `<input/>` DOM Element.\r\n\t * @return {DOMElement}\r\n\t */\r\n\tgetInputElement = () =>\r\n\t{\r\n\t\treturn this.input\r\n\t}\r\n\r\n\tonChange = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onChange\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\tonPaste = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onPaste\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\tonCut = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn onCut\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\t// This handler is a workaround for `redux-form`.\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { parse, onBlur } = this.props\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the right (parsed, not the formatted one)\r\n\t\t// `event.target.value` in its `onBlur` handler.\r\n\t\tif (onBlur)\r\n\t\t{\r\n\t\t\tconst _event =\r\n\t\t\t{\r\n\t\t\t\t...event,\r\n\t\t\t\ttarget:\r\n\t\t\t\t{\r\n\t\t\t\t\t...event.target,\r\n\t\t\t\t\tvalue: _parse(this.getInputElement().value, undefined, parse).value\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// For `redux-form` event detection.\r\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\t\tonBlur(_event)\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparse,\r\n\t\t\tformat\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tif (this.props.onKeyDown)\r\n\t\t{\r\n\t\t\tthis.props.onKeyDown(event)\r\n\t\t}\r\n\r\n\t\treturn onKeyDown\r\n\t\t(\r\n\t\t\tevent,\r\n\t\t\tthis.getInputElement(),\r\n\t\t\tparse,\r\n\t\t\tformat,\r\n\t\t\tthis.props.onChange\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Focuses the `<input/>`.\r\n\t * Can be called manually.\r\n\t */\r\n\tfocus()\r\n\t{\r\n\t\tthis.getInputElement().focus()\r\n\t}\r\n}\r\n\r\nfunction isEmpty(value)\r\n{\r\n\treturn value === undefined || value === null\r\n}"]}