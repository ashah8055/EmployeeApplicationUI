{"version":3,"sources":["../source/isPossibleNumber.js"],"names":["sort_out_arguments","check_number_length_for_type","isPossibleNumber","arg_1","arg_2","arg_3","arg_4","input","options","metadata","v2","countryCallingCode","Error","chooseCountryByCountryCallingCode","phone","country","hasCountry","possibleLengths","is_possible_number","nationalNumber","undefined","national_number","is_international"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,4BAA7B,QAAiE,iBAAjE;;AAEA;;;;;;;;;;;;;;AAcA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,KAA/C,EACf;AAAA,2BACsCN,mBAAmBG,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,KAAxC,CADtC;AAAA,KACSC,KADT,uBACSA,KADT;AAAA,KACgBC,OADhB,uBACgBA,OADhB;AAAA,KACyBC,QADzB,uBACyBA,QADzB;;AAGC,KAAID,QAAQE,EAAZ,EACA;AACC,MAAI,CAACH,MAAMI,kBAAX,EAA+B;AAC9B,SAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACA;AACDH,WAASI,iCAAT,CAA2CN,MAAMI,kBAAjD;AACA,EAND,MAQA;AACC,MAAI,CAACJ,MAAMO,KAAX,EAAkB;AACjB,UAAO,KAAP;AACA;AACD,MAAIP,MAAMQ,OAAV,EAAmB;AAClB,OAAI,CAACN,SAASO,UAAT,CAAoBT,MAAMQ,OAA1B,CAAL,EAAyC;AACxC,UAAM,IAAIH,KAAJ,uBAA8BL,MAAMQ,OAApC,CAAN;AACA;AACDN,YAASM,OAAT,CAAiBR,MAAMQ,OAAvB;AACA,GALD,MAKO;AACN,OAAI,CAACR,MAAMI,kBAAX,EAA+B;AAC9B,UAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACA;AACDH,YAASI,iCAAT,CAA2CN,MAAMI,kBAAjD;AACA;AACD;;AAED,KAAI,CAACF,SAASQ,eAAT,EAAL,EAAiC;AAChC,QAAM,IAAIL,KAAJ,CAAU,kBAAV,CAAN;AACA;;AAED,QAAOM,mBAAmBX,MAAMO,KAAN,IAAeP,MAAMY,cAAxC,EAAwDC,SAAxD,EAAmEX,QAAnE,CAAP;AACA;;AAED,OAAO,SAASS,kBAAT,CAA4BG,eAA5B,EAA6CC,gBAA7C,EAA+Db,QAA/D,EACP;AACC,SAAQR,6BAA6BoB,eAA7B,EAA8CD,SAA9C,EAAyDX,QAAzD,CAAR;AAEC,OAAK,aAAL;AACC,UAAO,IAAP;AACD;AACA;AACA;AACC,UAAO,KAAP;AAPF;AASA","file":"isPossibleNumber.js","sourcesContent":["import { sort_out_arguments, check_number_length_for_type } from './getNumberType'\r\n\r\n/**\r\n * Checks if a given phone number is possible.\r\n * Which means it only checks phone number length\r\n * and doesn't test any regular expressions.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isPossibleNumber('+78005553535', metadata)\r\n * isPossibleNumber('8005553535', 'RU', metadata)\r\n * isPossibleNumber('88005553535', 'RU', metadata)\r\n * isPossibleNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isPossibleNumber(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { input, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!metadata.possibleLengths()) {\r\n\t\tthrow new Error('Metadata too old')\r\n\t}\r\n\r\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata)\r\n}\r\n\r\nexport function is_possible_number(national_number, is_international, metadata)\r\n{\r\n\tswitch (check_number_length_for_type(national_number, undefined, metadata))\r\n\t{\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !is_international\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}"]}