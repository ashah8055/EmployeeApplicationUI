{"ast":null,"code":"import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale-provider/default';\nimport Spin from '../spin';\nimport Pagination from '../pagination';\nimport { Row } from '../grid';\nimport Item from './Item';\n\nvar List = function (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    _classCallCheck(this, List);\n\n    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).apply(this, arguments));\n\n    _this.state = {\n      paginationCurrent: 1\n    };\n    _this.defaultPaginationProps = {\n      current: 1,\n      pageSize: 10,\n      onChange: function onChange(page, pageSize) {\n        var pagination = _this.props.pagination;\n\n        _this.setState({\n          paginationCurrent: page\n        });\n\n        if (pagination && pagination.onChange) {\n          pagination.onChange(page, pageSize);\n        }\n      },\n      total: 0\n    };\n    _this.keys = {};\n\n    _this.renderItem = function (item, index) {\n      var _this$props = _this.props,\n          dataSource = _this$props.dataSource,\n          renderItem = _this$props.renderItem,\n          rowKey = _this$props.rowKey;\n      var key = void 0;\n\n      if (typeof rowKey === 'function') {\n        key = rowKey(dataSource[index]);\n      } else if (typeof rowKey === 'string') {\n        key = dataSource[rowKey];\n      } else {\n        key = dataSource.key;\n      }\n\n      if (!key) {\n        key = 'list-item-' + index;\n      }\n\n      _this.keys[index] = key;\n      return renderItem(item, index);\n    };\n\n    _this.renderEmpty = function (contextLocale) {\n      var locale = _extends({}, contextLocale, _this.props.locale);\n\n      return React.createElement('div', {\n        className: _this.props.prefixCls + '-empty-text'\n      }, locale.emptyText);\n    };\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        grid: this.props.grid\n      };\n    }\n  }, {\n    key: 'isSomethingAfterLastItem',\n    value: function isSomethingAfterLastItem() {\n      var _props = this.props,\n          loadMore = _props.loadMore,\n          pagination = _props.pagination,\n          footer = _props.footer;\n      return !!(loadMore || pagination || footer);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var paginationCurrent = this.state.paginationCurrent;\n\n      var _a = this.props,\n          bordered = _a.bordered,\n          split = _a.split,\n          className = _a.className,\n          children = _a.children,\n          itemLayout = _a.itemLayout,\n          loadMore = _a.loadMore,\n          pagination = _a.pagination,\n          prefixCls = _a.prefixCls,\n          grid = _a.grid,\n          dataSource = _a.dataSource,\n          size = _a.size,\n          rowKey = _a.rowKey,\n          renderItem = _a.renderItem,\n          header = _a.header,\n          footer = _a.footer,\n          loading = _a.loading,\n          locale = _a.locale,\n          rest = __rest(_a, [\"bordered\", \"split\", \"className\", \"children\", \"itemLayout\", \"loadMore\", \"pagination\", \"prefixCls\", \"grid\", \"dataSource\", \"size\", \"rowKey\", \"renderItem\", \"header\", \"footer\", \"loading\", \"locale\"]);\n\n      var loadingProp = loading;\n\n      if (typeof loadingProp === 'boolean') {\n        loadingProp = {\n          spinning: loadingProp\n        };\n      }\n\n      var isLoading = loadingProp && loadingProp.spinning; // large => lg\n      // small => sm\n\n      var sizeCls = '';\n\n      switch (size) {\n        case 'large':\n          sizeCls = 'lg';\n          break;\n\n        case 'small':\n          sizeCls = 'sm';\n\n        default:\n          break;\n      }\n\n      var classString = classNames(prefixCls, className, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-vertical', itemLayout === 'vertical'), _defineProperty(_classNames, prefixCls + '-' + sizeCls, sizeCls), _defineProperty(_classNames, prefixCls + '-split', split), _defineProperty(_classNames, prefixCls + '-bordered', bordered), _defineProperty(_classNames, prefixCls + '-loading', isLoading), _defineProperty(_classNames, prefixCls + '-grid', grid), _defineProperty(_classNames, prefixCls + '-something-after-last-item', this.isSomethingAfterLastItem()), _classNames));\n\n      var paginationProps = _extends({}, this.defaultPaginationProps, {\n        total: dataSource.length,\n        current: paginationCurrent\n      }, pagination || {});\n\n      var largestPage = Math.ceil(paginationProps.total / paginationProps.pageSize);\n\n      if (paginationProps.current > largestPage) {\n        paginationProps.current = largestPage;\n      }\n\n      var paginationContent = pagination ? React.createElement('div', {\n        className: prefixCls + '-pagination'\n      }, React.createElement(Pagination, _extends({}, paginationProps, {\n        onChange: this.defaultPaginationProps.onChange\n      }))) : null;\n      var splitDataSource = [].concat(_toConsumableArray(dataSource));\n\n      if (pagination) {\n        if (dataSource.length > (paginationProps.current - 1) * paginationProps.pageSize) {\n          splitDataSource = [].concat(_toConsumableArray(dataSource)).splice((paginationProps.current - 1) * paginationProps.pageSize, paginationProps.pageSize);\n        }\n      }\n\n      var childrenContent = void 0;\n      childrenContent = isLoading && React.createElement('div', {\n        style: {\n          minHeight: 53\n        }\n      });\n\n      if (splitDataSource.length > 0) {\n        var items = splitDataSource.map(function (item, index) {\n          return _this2.renderItem(item, index);\n        });\n        var childrenList = [];\n        React.Children.forEach(items, function (child, index) {\n          childrenList.push(React.cloneElement(child, {\n            key: _this2.keys[index]\n          }));\n        });\n        childrenContent = grid ? React.createElement(Row, {\n          gutter: grid.gutter\n        }, childrenList) : childrenList;\n      } else if (!children && !isLoading) {\n        childrenContent = React.createElement(LocaleReceiver, {\n          componentName: 'Table',\n          defaultLocale: defaultLocale.Table\n        }, this.renderEmpty);\n      }\n\n      var paginationPosition = paginationProps.position || 'bottom';\n      return React.createElement('div', _extends({\n        className: classString\n      }, rest), (paginationPosition === 'top' || paginationPosition === 'both') && paginationContent, header && React.createElement('div', {\n        className: prefixCls + '-header'\n      }, header), React.createElement(Spin, loadingProp, childrenContent, children), footer && React.createElement('div', {\n        className: prefixCls + '-footer'\n      }, footer), loadMore || (paginationPosition === 'bottom' || paginationPosition === 'both') && paginationContent);\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport default List;\nList.Item = Item;\nList.childContextTypes = {\n  grid: PropTypes.any\n};\nList.defaultProps = {\n  dataSource: [],\n  prefixCls: 'ant-list',\n  bordered: false,\n  split: true,\n  loading: false,\n  pagination: false\n};","map":null,"metadata":{},"sourceType":"module"}