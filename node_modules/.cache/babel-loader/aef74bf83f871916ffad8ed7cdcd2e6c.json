{"ast":null,"code":"import _defineProperty from \"babel-runtime/helpers/defineProperty\";\nimport _extends from \"babel-runtime/helpers/extends\";\nimport _classCallCheck from \"babel-runtime/helpers/classCallCheck\";\nimport _createClass from \"babel-runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"babel-runtime/helpers/possibleConstructorReturn\";\nimport _inherits from \"babel-runtime/helpers/inherits\";\nimport _typeof from \"babel-runtime/helpers/typeof\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport addEventListener from \"rc-util/es/Dom/addEventListener\";\nimport classNames from 'classnames';\nimport shallowequal from 'shallowequal';\nimport omit from 'omit.js';\nimport getScroll from '../_util/getScroll';\nimport { throttleByAnimationFrameDecorator } from '../_util/throttleByAnimationFrame';\n\nfunction getTargetRect(target) {\n  return target !== window ? target.getBoundingClientRect() : {\n    top: 0,\n    left: 0,\n    bottom: 0\n  };\n}\n\nfunction getOffset(element, target) {\n  var elemRect = element.getBoundingClientRect();\n  var targetRect = getTargetRect(target);\n  var scrollTop = getScroll(target, true);\n  var scrollLeft = getScroll(target, false);\n  var docElem = window.document.body;\n  var clientTop = docElem.clientTop || 0;\n  var clientLeft = docElem.clientLeft || 0;\n  return {\n    top: elemRect.top - targetRect.top + scrollTop - clientTop,\n    left: elemRect.left - targetRect.left + scrollLeft - clientLeft,\n    width: elemRect.width,\n    height: elemRect.height\n  };\n}\n\nfunction noop() {}\n\nfunction getDefaultTarget() {\n  return typeof window !== 'undefined' ? window : null;\n}\n\nvar Affix = function (_React$Component) {\n  _inherits(Affix, _React$Component);\n\n  function Affix() {\n    _classCallCheck(this, Affix);\n\n    var _this = _possibleConstructorReturn(this, (Affix.__proto__ || Object.getPrototypeOf(Affix)).apply(this, arguments));\n\n    _this.state = {\n      affixStyle: undefined,\n      placeholderStyle: undefined\n    };\n    _this.eventHandlers = {};\n    _this.events = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\n\n    _this.saveFixedNode = function (node) {\n      _this.fixedNode = node;\n    };\n\n    _this.savePlaceholderNode = function (node) {\n      _this.placeholderNode = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(Affix, [{\n    key: \"setAffixStyle\",\n    value: function setAffixStyle(e, affixStyle) {\n      var _this2 = this;\n\n      var _props = this.props,\n          _props$onChange = _props.onChange,\n          onChange = _props$onChange === undefined ? noop : _props$onChange,\n          _props$target = _props.target,\n          target = _props$target === undefined ? getDefaultTarget : _props$target;\n      var originalAffixStyle = this.state.affixStyle;\n      var isWindow = target() === window;\n\n      if (e.type === 'scroll' && originalAffixStyle && affixStyle && isWindow) {\n        return;\n      }\n\n      if (shallowequal(affixStyle, originalAffixStyle)) {\n        return;\n      }\n\n      this.setState({\n        affixStyle: affixStyle\n      }, function () {\n        var affixed = !!_this2.state.affixStyle;\n\n        if (affixStyle && !originalAffixStyle || !affixStyle && originalAffixStyle) {\n          onChange(affixed);\n        }\n      });\n    }\n  }, {\n    key: \"setPlaceholderStyle\",\n    value: function setPlaceholderStyle(placeholderStyle) {\n      var originalPlaceholderStyle = this.state.placeholderStyle;\n\n      if (shallowequal(placeholderStyle, originalPlaceholderStyle)) {\n        return;\n      }\n\n      this.setState({\n        placeholderStyle: placeholderStyle\n      });\n    }\n  }, {\n    key: \"syncPlaceholderStyle\",\n    value: function syncPlaceholderStyle(e) {\n      var affixStyle = this.state.affixStyle;\n\n      if (!affixStyle) {\n        return;\n      }\n\n      this.placeholderNode.style.cssText = '';\n      this.setAffixStyle(e, _extends({}, affixStyle, {\n        width: this.placeholderNode.offsetWidth\n      }));\n      this.setPlaceholderStyle({\n        width: this.placeholderNode.offsetWidth\n      });\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(e) {\n      var _props2 = this.props,\n          offsetBottom = _props2.offsetBottom,\n          offset = _props2.offset,\n          _props2$target = _props2.target,\n          target = _props2$target === undefined ? getDefaultTarget : _props2$target;\n      var offsetTop = this.props.offsetTop;\n      var targetNode = target(); // Backwards support\n      // Fix: if offsetTop === 0, it will get undefined,\n      //   if offsetBottom is type of number, offsetMode will be { top: false, ... }\n\n      offsetTop = typeof offsetTop === 'undefined' ? offset : offsetTop;\n      var scrollTop = getScroll(targetNode, true);\n      var affixNode = ReactDOM.findDOMNode(this);\n      var elemOffset = getOffset(affixNode, targetNode);\n      var elemSize = {\n        width: this.fixedNode.offsetWidth,\n        height: this.fixedNode.offsetHeight\n      };\n      var offsetMode = {\n        top: false,\n        bottom: false\n      }; // Default to `offsetTop=0`.\n\n      if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {\n        offsetMode.top = true;\n        offsetTop = 0;\n      } else {\n        offsetMode.top = typeof offsetTop === 'number';\n        offsetMode.bottom = typeof offsetBottom === 'number';\n      }\n\n      var targetRect = getTargetRect(targetNode);\n      var targetInnerHeight = targetNode.innerHeight || targetNode.clientHeight;\n\n      if (scrollTop > elemOffset.top - offsetTop && offsetMode.top) {\n        // Fixed Top\n        var width = elemOffset.width;\n        var top = targetRect.top + offsetTop;\n        this.setAffixStyle(e, {\n          position: 'fixed',\n          top: top,\n          left: targetRect.left + elemOffset.left,\n          width: width\n        });\n        this.setPlaceholderStyle({\n          width: width,\n          height: elemSize.height\n        });\n      } else if (scrollTop < elemOffset.top + elemSize.height + offsetBottom - targetInnerHeight && offsetMode.bottom) {\n        // Fixed Bottom\n        var targetBottomOffet = targetNode === window ? 0 : window.innerHeight - targetRect.bottom;\n        var _width = elemOffset.width;\n        this.setAffixStyle(e, {\n          position: 'fixed',\n          bottom: targetBottomOffet + offsetBottom,\n          left: targetRect.left + elemOffset.left,\n          width: _width\n        });\n        this.setPlaceholderStyle({\n          width: _width,\n          height: elemOffset.height\n        });\n      } else {\n        var affixStyle = this.state.affixStyle;\n\n        if (e.type === 'resize' && affixStyle && affixStyle.position === 'fixed' && affixNode.offsetWidth) {\n          this.setAffixStyle(e, _extends({}, affixStyle, {\n            width: affixNode.offsetWidth\n          }));\n        } else {\n          this.setAffixStyle(e, null);\n        }\n\n        this.setPlaceholderStyle(null);\n      }\n\n      if (e.type === 'resize') {\n        this.syncPlaceholderStyle(e);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      var target = this.props.target || getDefaultTarget; // Wait for parent component ref has its value\n\n      this.timeout = setTimeout(function () {\n        _this3.setTargetEventListeners(target);\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.props.target !== nextProps.target) {\n        this.clearEventListeners();\n        this.setTargetEventListeners(nextProps.target); // Mock Event object.\n\n        this.updatePosition({});\n      }\n\n      if (this.props.offsetTop !== nextProps.offsetTop || this.props.offsetBottom !== nextProps.offsetBottom) {\n        this.updatePosition({});\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.clearEventListeners();\n      clearTimeout(this.timeout);\n      this.updatePosition.cancel();\n    }\n  }, {\n    key: \"setTargetEventListeners\",\n    value: function setTargetEventListeners(getTarget) {\n      var _this4 = this;\n\n      var target = getTarget();\n\n      if (!target) {\n        return;\n      }\n\n      this.clearEventListeners();\n      this.events.forEach(function (eventName) {\n        _this4.eventHandlers[eventName] = addEventListener(target, eventName, _this4.updatePosition);\n      });\n    }\n  }, {\n    key: \"clearEventListeners\",\n    value: function clearEventListeners() {\n      var _this5 = this;\n\n      this.events.forEach(function (eventName) {\n        var handler = _this5.eventHandlers[eventName];\n\n        if (handler && handler.remove) {\n          handler.remove();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = classNames(_defineProperty({}, this.props.prefixCls || 'ant-affix', this.state.affixStyle));\n      var props = omit(this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange']);\n\n      var placeholderStyle = _extends({}, this.state.placeholderStyle, this.props.style);\n\n      return React.createElement(\"div\", _extends({}, props, {\n        style: placeholderStyle,\n        ref: this.savePlaceholderNode\n      }), React.createElement(\"div\", {\n        className: className,\n        ref: this.saveFixedNode,\n        style: this.state.affixStyle\n      }, this.props.children));\n    }\n  }]);\n\n  return Affix;\n}(React.Component);\n\nexport default Affix;\nAffix.propTypes = {\n  offsetTop: PropTypes.number,\n  offsetBottom: PropTypes.number,\n  target: PropTypes.func\n};\n\n__decorate([throttleByAnimationFrameDecorator()], Affix.prototype, \"updatePosition\", null);","map":null,"metadata":{},"sourceType":"module"}