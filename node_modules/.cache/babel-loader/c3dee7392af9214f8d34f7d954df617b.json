{"ast":null,"code":"import _objectSpread from \"/Users/Amar/emp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as Types from \"../actions/types\";\nvar initialUserObj = {\n  result: [],\n  listOfProject: []\n};\n\nvar getEmployeeListError = function getEmployeeListError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nvar getEmployeeList = function getEmployeeList(state, action) {\n  //console.log(\"REdux\" + JSON.stringify(action));\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    }); //  console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar getProjectListError = function getProjectListError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nvar getProjectList = function getProjectList(state, action) {\n  //console.log(\"REdux\" + JSON.stringify(action));\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    }); //  console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar handleSearchEmp = function handleSearchEmp(state, action) {\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      result: JSON.parse(JSON.stringify(action.result))\n    });\n  }\n\n  return _objectSpread({}, newState);\n};\n\nvar searchError = function searchError(state) {\n  var newState = _objectSpread({}, state);\n\n  return _objectSpread({}, newState);\n};\n\nvar handleProjectList = function handleProjectList(state, action) {\n  console.log(\"ListProject\" + JSON.stringify(action));\n\n  var newState = _objectSpread({}, state);\n\n  if (action.formBody !== undefined) {\n    newState = Object.assign({}, state, {\n      listOfProject: action.formBody.projectDetails.projectDetails.projctName\n    });\n    console.log(\"New\" + JSON.stringify(newState));\n  }\n\n  return _objectSpread({}, newState);\n};\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialUserObj;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case Types.GET_EMPLOYEE_LIST:\n      return _objectSpread({}, state);\n\n    case Types.GET_EMPLOYEE_LIST_SUCCESS_RESPONSE:\n      return getEmployeeList(state, action);\n\n    case Types.GET_EMPLOYEE_LIST_ERROR_RESPONSE:\n      return getEmployeeListError(state);\n\n    case Types.PROJECT_LIST:\n      return _objectSpread({}, state);\n\n    case Types.PROJECT_LIST_SUCCESS_RESPONSE:\n      return getProjectList(state, action);\n\n    case Types.PROJECT_LIST_ERROR_RESPONSE:\n      return getProjectListError(state);\n\n    case Types.SEARCH_EMP:\n      return _objectSpread({}, state);\n\n    case Types.SEARCH_EMP_SUCCESS:\n      return handleSearchEmp(state, action);\n\n    case Types.SEARCH_EMP_ERROR:\n      return searchError(state);\n\n    case Types.CREATE_PROJECT:\n      return _objectSpread({}, state, {\n        projectDetails: action.projectDetails\n      });\n\n    case Types.LIST_PROJECT_DETAILS_SERVER_RESPONSE_SUCESS:\n      return handleProjectList(state, action);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/reducers/Get_List.js"],"names":["Types","initialUserObj","result","listOfProject","getEmployeeListError","state","newState","getEmployeeList","action","undefined","Object","assign","JSON","parse","stringify","getProjectListError","getProjectList","handleSearchEmp","searchError","handleProjectList","console","log","formBody","projectDetails","projctName","type","GET_EMPLOYEE_LIST","GET_EMPLOYEE_LIST_SUCCESS_RESPONSE","GET_EMPLOYEE_LIST_ERROR_RESPONSE","PROJECT_LIST","PROJECT_LIST_SUCCESS_RESPONSE","PROJECT_LIST_ERROR_RESPONSE","SEARCH_EMP","SEARCH_EMP_SUCCESS","SEARCH_EMP_ERROR","CREATE_PROJECT","LIST_PROJECT_DETAILS_SERVER_RESPONSE_SUCESS"],"mappings":"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","sourcesContent":["import * as Types from \"../actions/types\";\n\nconst initialUserObj = {\n    result: [],\n    listOfProject: []\n};\n\nconst getEmployeeListError = state => {\n    let newState = { ...state };\n    return { ...newState };\n};\n\nconst getEmployeeList = (state, action) => {\n    //console.log(\"REdux\" + JSON.stringify(action));\n    let newState = { ...state };\n    if (action.result !== undefined) {\n        newState = Object.assign({}, state, {\n            result: JSON.parse(JSON.stringify(action.result))\n        });\n        //  console.log(\"New\" + JSON.stringify(newState));\n    }\n    return { ...newState };\n};\n\nconst getProjectListError = state => {\n    let newState = { ...state };\n    return { ...newState };\n};\n\nconst getProjectList = (state, action) => {\n    //console.log(\"REdux\" + JSON.stringify(action));\n    let newState = { ...state };\n    if (action.result !== undefined) {\n        newState = Object.assign({}, state, {\n            result: JSON.parse(JSON.stringify(action.result))\n        });\n        //  console.log(\"New\" + JSON.stringify(newState));\n    }\n    return { ...newState };\n};\n\nconst handleSearchEmp = (state, action) => {\n    let newState = { ...state };\n    if (action.result !== undefined) {\n        newState = Object.assign({}, state, {\n            result: JSON.parse(JSON.stringify(action.result))\n        });\n    }\n    return { ...newState };\n};\n\nconst searchError = state => {\n    let newState = { ...state };\n    return { ...newState };\n};\n\nconst handleProjectList = (state, action) => {\n    console.log(\"ListProject\" + JSON.stringify(action));\n    let newState = { ...state };\n    if (action.formBody !== undefined) {\n        newState = Object.assign({}, state, {\n            listOfProject: action.formBody.projectDetails.projectDetails.projctName\n        });\n        console.log(\"New\" + JSON.stringify(newState));\n    }\n    return { ...newState };\n};\n\nexport default (state = initialUserObj, action = {}) => {\n    switch (action.type) {\n        case Types.GET_EMPLOYEE_LIST:\n            return { ...state };\n        case Types.GET_EMPLOYEE_LIST_SUCCESS_RESPONSE:\n            return getEmployeeList(state, action);\n        case Types.GET_EMPLOYEE_LIST_ERROR_RESPONSE:\n            return getEmployeeListError(state);\n        case Types.PROJECT_LIST:\n            return { ...state };\n        case Types.PROJECT_LIST_SUCCESS_RESPONSE:\n            return getProjectList(state, action);\n        case Types.PROJECT_LIST_ERROR_RESPONSE:\n            return getProjectListError(state);\n        case Types.SEARCH_EMP:\n            return { ...state };\n        case Types.SEARCH_EMP_SUCCESS:\n            return handleSearchEmp(state, action);\n        case Types.SEARCH_EMP_ERROR:\n            return searchError(state);\n        case Types.CREATE_PROJECT:\n            return { ...state, projectDetails: action.projectDetails };\n        case Types.LIST_PROJECT_DETAILS_SERVER_RESPONSE_SUCESS:\n            return handleProjectList(state, action);\n        default:\n            return state;\n    }\n};"]},"metadata":{},"sourceType":"module"}