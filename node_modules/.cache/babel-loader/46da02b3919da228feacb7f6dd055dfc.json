{"ast":null,"code":"import * as Types from './types';\nexport var logoutUser = function logoutUser(userId) {\n  return {\n    type: Types.LOGOUT_USER,\n    userId: userId\n  };\n};\nexport var loginUser = function loginUser(username, password) {\n  return {\n    type: Types.LOGIN_USER,\n    username: username,\n    password: password\n  };\n};\nexport var loginUserSuccess = function loginUserSuccess(response) {\n  return {\n    type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n    response: response\n  };\n};\nexport var validateUserSuccess = function validateUserSuccess(response) {\n  return {\n    type: Types.VALIDATE_USER_SERVER_RESPONSE_SUCCESS,\n    response: response\n  };\n};\nexport var validateUserFailure = function validateUserFailure(response) {\n  return {\n    type: Types.VALIDATE_USER_SERVER_RESPONSE_ERROR,\n    response: response\n  };\n};\nexport var getBusinessUsersList = function getBusinessUsersList() {\n  return {\n    type: Types.GET_BUSINESS_USERS_LIST\n  };\n};\nexport var getBusinessUsersListSuccessResponse = function getBusinessUsersListSuccessResponse(response) {\n  return {\n    type: Types.GET_BUSINESS_USERS_LIST_SERVER_RESPONSE_SUCCESS,\n    response: response\n  };\n};\nexport var loginUserFailure = function loginUserFailure(response) {\n  return {\n    type: Types.LOGIN_USER_SERVER_RESPONSE_ERROR,\n    response: response\n  };\n};\nexport var logoutUserSuccess = function logoutUserSuccess(response) {\n  return {\n    type: Types.LOGOUT_USER_SERVER_RESPONSE_SUCCESS,\n    response: response\n  };\n};\nexport var logoutUserFailure = function logoutUserFailure(response) {\n  return {\n    type: Types.LOGOUT_USER_SERVER_REPONSE_ERROR,\n    response: response\n  };\n};\nexport var validateToken = function validateToken() {\n  return {\n    type: Types.VALIDATE_TOKEN\n  };\n};\nexport var isUserLoggedIn = function isUserLoggedIn() {\n  return {\n    type: Types.IS_USER_LOGGED_IN\n  };\n};","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/actions/auth.js"],"names":["Types","logoutUser","userId","type","LOGOUT_USER","loginUser","username","password","LOGIN_USER","loginUserSuccess","response","LOGIN_USER_SERVER_RESPONSE_SUCCESS","validateUserSuccess","VALIDATE_USER_SERVER_RESPONSE_SUCCESS","validateUserFailure","VALIDATE_USER_SERVER_RESPONSE_ERROR","getBusinessUsersList","GET_BUSINESS_USERS_LIST","getBusinessUsersListSuccessResponse","GET_BUSINESS_USERS_LIST_SERVER_RESPONSE_SUCCESS","loginUserFailure","LOGIN_USER_SERVER_RESPONSE_ERROR","logoutUserSuccess","LOGOUT_USER_SERVER_RESPONSE_SUCCESS","logoutUserFailure","LOGOUT_USER_SERVER_REPONSE_ERROR","validateToken","VALIDATE_TOKEN","isUserLoggedIn","IS_USER_LOGGED_IN"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD;AAAA,SAAa;AACrCC,IAAAA,IAAI,EAAEH,KAAK,CAACI,WADyB;AAErCF,IAAAA,MAAM,EAANA;AAFqC,GAAb;AAAA,CAAnB;AAKP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAyB;AAChDJ,IAAAA,IAAI,EAACH,KAAK,CAACQ,UADqC;AAEhDF,IAAAA,QAAQ,EAARA,QAFgD;AAGhDC,IAAAA,QAAQ,EAARA;AAHgD,GAAzB;AAAA,CAAlB;AAMP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SAAe;AAC7CP,IAAAA,IAAI,EAACH,KAAK,CAACW,kCADkC;AAE7CD,IAAAA,QAAQ,EAARA;AAF6C,GAAf;AAAA,CAAzB;AAIP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,QAAD;AAAA,SAAe;AAChDP,IAAAA,IAAI,EAACH,KAAK,CAACa,qCADqC;AAEhDH,IAAAA,QAAQ,EAARA;AAFgD,GAAf;AAAA,CAA5B;AAIP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACJ,QAAD;AAAA,SAAe;AAChDP,IAAAA,IAAI,EAACH,KAAK,CAACe,mCADqC;AAEhDL,IAAAA,QAAQ,EAARA;AAFgD,GAAf;AAAA,CAA5B;AAKP,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAO;AACzCb,IAAAA,IAAI,EAACH,KAAK,CAACiB;AAD8B,GAAP;AAAA,CAA7B;AAIP,OAAO,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACR,QAAD;AAAA,SAAe;AAChEP,IAAAA,IAAI,EAACH,KAAK,CAACmB,+CADqD;AAEhET,IAAAA,QAAQ,EAARA;AAFgE,GAAf;AAAA,CAA5C;AAMP,OAAO,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,QAAD;AAAA,SAAe;AAC7CP,IAAAA,IAAI,EAACH,KAAK,CAACqB,gCADkC;AAE7CX,IAAAA,QAAQ,EAARA;AAF6C,GAAf;AAAA,CAAzB;AAMP,OAAO,IAAMY,iBAAiB,GAAG,SAApBA,iBAAoB,CAACZ,QAAD;AAAA,SAAe;AAC9CP,IAAAA,IAAI,EAACH,KAAK,CAACuB,mCADmC;AAE9Cb,IAAAA,QAAQ,EAARA;AAF8C,GAAf;AAAA,CAA1B;AAKP,OAAO,IAAMc,iBAAiB,GAAG,SAApBA,iBAAoB,CAACd,QAAD;AAAA,SAAe;AAC9CP,IAAAA,IAAI,EAACH,KAAK,CAACyB,gCADmC;AAE9Cf,IAAAA,QAAQ,EAARA;AAF8C,GAAf;AAAA,CAA1B;AAKP,OAAO,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAO;AAClCvB,IAAAA,IAAI,EAACH,KAAK,CAAC2B;AADuB,GAAP;AAAA,CAAtB;AAIP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAO;AACnCzB,IAAAA,IAAI,EAAEH,KAAK,CAAC6B;AADuB,GAAP;AAAA,CAAvB","sourcesContent":["import * as Types from './types';\n\nexport const logoutUser = (userId) => ({\n  type: Types.LOGOUT_USER,\n  userId\n})\n\nexport const loginUser = (username, password) => ({\n  type:Types.LOGIN_USER,\n  username,\n  password\n})\n\nexport const loginUserSuccess = (response) => ({\n  type:Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n  response\n})\nexport const validateUserSuccess = (response) => ({\n  type:Types.VALIDATE_USER_SERVER_RESPONSE_SUCCESS,\n  response\n})\nexport const validateUserFailure = (response) => ({\n  type:Types.VALIDATE_USER_SERVER_RESPONSE_ERROR,\n  response\n})\n\nexport const getBusinessUsersList = () => ({\n  type:Types.GET_BUSINESS_USERS_LIST  \n})\n\nexport const getBusinessUsersListSuccessResponse = (response) => ({\n  type:Types.GET_BUSINESS_USERS_LIST_SERVER_RESPONSE_SUCCESS,\n  response  \n})\n\n\nexport const loginUserFailure = (response) => ({\n  type:Types.LOGIN_USER_SERVER_RESPONSE_ERROR,\n  response\n})\n\n\nexport const logoutUserSuccess = (response) => ({\n  type:Types.LOGOUT_USER_SERVER_RESPONSE_SUCCESS,\n  response\n})\n\nexport const logoutUserFailure = (response) => ({\n  type:Types.LOGOUT_USER_SERVER_REPONSE_ERROR,\n  response\n})\n\nexport const validateToken = () => ({\n  type:Types.VALIDATE_TOKEN\n})\n\nexport const isUserLoggedIn = () => ({\n  type: Types.IS_USER_LOGGED_IN\n})\n\n"]},"metadata":{},"sourceType":"module"}