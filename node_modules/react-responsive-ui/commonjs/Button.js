'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ActivityIndicator = require('./ActivityIndicator');

var _ActivityIndicator2 = _interopRequireDefault(_ActivityIndicator);

var _FadeInOut = require('./FadeInOut');

var _FadeInOut2 = _interopRequireDefault(_FadeInOut);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var Button = (_temp2 = _class = function (_PureComponent) {
	_inherits(Button, _PureComponent);

	function Button() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Button);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.storeInstance = function (ref) {
			return _this.button = ref;
		}, _this.focus = function () {
			return _this.button.focus();
		}, _this.linkOnClick = function (event) {
			var _this$props = _this.props,
			    wait = _this$props.wait,
			    busy = _this$props.busy,
			    disabled = _this$props.disabled,
			    action = _this$props.action,
			    onClick = _this$props.onClick;

			// Only handle left mouse button clicks
			// ignoring those ones with a modifier key pressed.

			if (event.button !== 0 || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey) {
				return;
			}

			if (wait || busy || _this.state.wait || disabled) {
				return;
			}

			// Could be just a "submit" button without having any `action`.
			// Could also be just a `link` button.
			// Therefore "preventing default" only if `action` is set:
			// for example, if `link` is set and no `action`
			// then it should proceed with navigating to the `link`.
			// And if `link` is set and `action` is specified too
			// then it will prevent it from navigating to the `link`.
			if (action || onClick) {
				event.preventDefault();
			}

			_this.buttonOnClick();
		}, _this.buttonOnClick = function (event) {
			var _this$props2 = _this.props,
			    action = _this$props2.action,
			    onClick = _this$props2.onClick;


			var result = void 0;
			// Could be just a `<button type="submit"/>`
			// without any `action` supplied.
			if (action) {
				result = action();
			} else if (onClick) {
				result = onClick();
			}

			if (result && typeof result.then === 'function') {
				_this.setState({ wait: true });
				result.then(function () {
					return _this._isMounted && _this.setState({ wait: false });
				}, function () {
					return _this._isMounted && _this.setState({ wait: false });
				});
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Button, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._isMounted = true;
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this._isMounted = false;
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    component = _props.component,
			    link = _props.link,
			    title = _props.title,
			    wait = _props.wait,
			    busy = _props.busy,
			    disabled = _props.disabled,
			    action = _props.action,
			    onClick = _props.onClick,
			    submit = _props.submit,
			    stretch = _props.stretch,
			    style = _props.style,
			    className = _props.className,
			    children = _props.children,
			    rest = _objectWithoutProperties(_props, ['component', 'link', 'title', 'wait', 'busy', 'disabled', 'action', 'onClick', 'submit', 'stretch', 'style', 'className', 'children']);

			var properties = _extends({}, rest, {
				ref: this.storeInstance,
				title: title,
				style: style,
				className: (0, _classnames2.default)('rrui__input', 'rrui__button-reset', 'rrui__button', {
					'rrui__button--busy': wait || busy || this.state.wait,
					'rrui__button--disabled': disabled,
					'rrui__button--stretch': stretch,
					'rrui__button-reset--link': link
				}, className)
			});

			if (link) {
				var LinkComponent = component || 'a';

				return _react2.default.createElement(
					LinkComponent,
					_extends({
						href: component ? undefined : link,
						onClick: this.linkOnClick
					}, properties),
					children
				);
			}

			return _react2.default.createElement(
				'button',
				_extends({
					type: submit ? 'submit' : 'button',
					disabled: wait || busy || this.state.wait || disabled,
					onClick: this.buttonOnClick
				}, properties),
				_react2.default.createElement(
					_FadeInOut2.default,
					{
						show: wait || busy || this.state.wait,
						fadeOutDuration: 300,
						fadeInClassName: 'rrui__button__busy--after-show' },
					_react2.default.createElement('div', { className: 'rrui__button__busy' })
				),
				children
			);
		}
	}]);

	return Button;
}(PureComponent), _class.propTypes = {
	// onClick handler.
	// Doesn't receive `event` by default.
	// Can be `async`/`await` or return a `Promise`
	// in which case it will show "wait" animation.
	onClick: _propTypes2.default.func,

	// onClick handler.
	// (deprecated, use `onClick(event)` instead)
	action: _propTypes2.default.func,

	// If `wait` is `true` then the button
	// will be disabled and a spinner will be shown.
	wait: _propTypes2.default.bool,

	// (deprecated)
	// (use `wait` instead)
	// If `busy` is `true` then the button
	// will be disabled and a spinner will be shown.
	busy: _propTypes2.default.bool,

	// Disables the button
	disabled: _propTypes2.default.bool,

	// When `true`, the button will submit an enclosing form.
	submit: _propTypes2.default.bool,

	// If `link` is set, then the button is gonna be an <a/> tag.
	link: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),

	// Custom React component for the button.
	component: _propTypes2.default.func,

	// HTML `title` attribute
	title: _propTypes2.default.string,

	// Set to `true` to stretch the button to full width
	stretch: _propTypes2.default.bool.isRequired,

	// CSS class name
	className: _propTypes2.default.string,

	// CSS style object for the button container
	style: _propTypes2.default.object
}, _class.defaultProps = {
	// Set to `true` to stretch the button to full width
	stretch: false
}, _temp2);
exports.default = Button;
//# sourceMappingURL=Button.js.map