{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport RcTabs, { TabPane } from 'rc-tabs';\nimport TabContent from 'rc-tabs/es/TabContent';\nimport TabBar from './TabBar';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport warning from '../_util/warning';\nimport isFlexSupported from '../_util/isFlexSupported';\n\nvar Tabs = function (_React$Component) {\n  _inherits(Tabs, _React$Component);\n\n  function Tabs() {\n    _classCallCheck(this, Tabs);\n\n    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));\n\n    _this.removeTab = function (targetKey, e) {\n      e.stopPropagation();\n\n      if (!targetKey) {\n        return;\n      }\n\n      var onEdit = _this.props.onEdit;\n\n      if (onEdit) {\n        onEdit(targetKey, 'remove');\n      }\n    };\n\n    _this.handleChange = function (activeKey) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(activeKey);\n      }\n    };\n\n    _this.createNewTab = function (targetKey) {\n      var onEdit = _this.props.onEdit;\n\n      if (onEdit) {\n        onEdit(targetKey, 'add');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Tabs, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var NO_FLEX = ' no-flex';\n      var tabNode = ReactDOM.findDOMNode(this);\n\n      if (tabNode && !isFlexSupported() && tabNode.className.indexOf(NO_FLEX) === -1) {\n        tabNode.className += NO_FLEX;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className,\n          size = _props.size,\n          _props$type = _props.type,\n          type = _props$type === undefined ? 'line' : _props$type,\n          tabPosition = _props.tabPosition,\n          children = _props.children,\n          _props$animated = _props.animated,\n          animated = _props$animated === undefined ? true : _props$animated,\n          tabBarExtraContent = _props.tabBarExtraContent,\n          hideAdd = _props.hideAdd;\n      var tabPaneAnimated = (typeof animated === 'undefined' ? 'undefined' : _typeof(animated)) === 'object' ? animated.tabPane : animated; // card tabs should not have animation\n\n      if (type !== 'line') {\n        tabPaneAnimated = 'animated' in this.props ? tabPaneAnimated : false;\n      }\n\n      warning(!(type.indexOf('card') >= 0 && (size === 'small' || size === 'large')), 'Tabs[type=card|editable-card] doesn\\'t have small or large size, it\\'s by design.');\n      var cls = classNames(className, (_classNames = {}, _defineProperty(_classNames, prefixCls + '-vertical', tabPosition === 'left' || tabPosition === 'right'), _defineProperty(_classNames, prefixCls + '-' + size, !!size), _defineProperty(_classNames, prefixCls + '-card', type.indexOf('card') >= 0), _defineProperty(_classNames, prefixCls + '-' + type, true), _defineProperty(_classNames, prefixCls + '-no-animation', !tabPaneAnimated), _classNames)); // only card type tabs can be added and closed\n\n      var childrenWithClose = [];\n\n      if (type === 'editable-card') {\n        childrenWithClose = [];\n        React.Children.forEach(children, function (child, index) {\n          var closable = child.props.closable;\n          closable = typeof closable === 'undefined' ? true : closable;\n          var closeIcon = closable ? React.createElement(Icon, {\n            type: 'close',\n            className: prefixCls + '-close-x',\n            onClick: function onClick(e) {\n              return _this2.removeTab(child.key, e);\n            }\n          }) : null;\n          childrenWithClose.push(React.cloneElement(child, {\n            tab: React.createElement('div', {\n              className: closable ? undefined : prefixCls + '-tab-unclosable'\n            }, child.props.tab, closeIcon),\n            key: child.key || index\n          }));\n        }); // Add new tab handler\n\n        if (!hideAdd) {\n          tabBarExtraContent = React.createElement('span', null, React.createElement(Icon, {\n            type: 'plus',\n            className: prefixCls + '-new-tab',\n            onClick: this.createNewTab\n          }), tabBarExtraContent);\n        }\n      }\n\n      tabBarExtraContent = tabBarExtraContent ? React.createElement('div', {\n        className: prefixCls + '-extra-content'\n      }, tabBarExtraContent) : null;\n\n      var _a = this.props,\n          dropped = _a.className,\n          tabBarProps = __rest(_a, [\"className\"]);\n\n      return React.createElement(RcTabs, _extends({}, this.props, {\n        className: cls,\n        tabBarPosition: tabPosition,\n        renderTabBar: function renderTabBar() {\n          return React.createElement(TabBar, _extends({}, tabBarProps, {\n            tabBarExtraContent: tabBarExtraContent\n          }));\n        },\n        renderTabContent: function renderTabContent() {\n          return React.createElement(TabContent, {\n            animated: tabPaneAnimated,\n            animatedWithMargin: true\n          });\n        },\n        onChange: this.handleChange\n      }), childrenWithClose.length > 0 ? childrenWithClose : children);\n    }\n  }]);\n\n  return Tabs;\n}(React.Component);\n\nexport default Tabs;\nTabs.TabPane = TabPane;\nTabs.defaultProps = {\n  prefixCls: 'ant-tabs',\n  hideAdd: false\n};","map":null,"metadata":{},"sourceType":"module"}