'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var Switcher = (_temp2 = _class = function (_PureComponent) {
	_inherits(Switcher, _PureComponent);

	function Switcher() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Switcher);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Switcher.__proto__ || Object.getPrototypeOf(Switcher)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.focus = function () {
			return _this.button_0.focus();
		}, _this.storeContainerComponent = function (_) {
			return _this.container = _;
		}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if (event.defaultPrevented) {
				return;
			}

			if ((0, _dom.submitFormOnCtrlEnter)(event, _this.input)) {
				return;
			}

			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			var _this$props = _this.props,
			    onChange = _this$props.onChange,
			    options = _this$props.options;


			switch (event.keyCode) {
				// Focus the previous option (if present) on left arrow.
				case 37:
					event.preventDefault();

					var previous_option_index = _this.previous_focused_option_index();

					if (previous_option_index !== undefined) {
						// Focus the option <button/> so that
						// a subsequent "Spacebar" keyDown
						// doesn't select the previously selected
						// option (e.g. the first one)
						_this['button_' + previous_option_index].focus();

						// // Change the `value`
						// return onChange(options[previous_option_index].value)
					}

					return;

				// Focus the next option (if present) on right arrow.
				case 39:
					event.preventDefault();

					var next_option_index = _this.next_focused_option_index();

					if (next_option_index !== undefined) {
						// Focus the option <button/> so that
						// a subsequent "Spacebar" keyDown
						// doesn't select the previously selected
						// option (e.g. the first one)
						_this['button_' + next_option_index].focus();

						// // Change the `value`
						// return onChange(options[next_option_index].value)
					}

					return;
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Switcher, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    disabled = _props.disabled,
			    options = _props.options,
			    indicateInvalid = _props.indicateInvalid,
			    error = _props.error,
			    style = _props.style,
			    className = _props.className;


			return _react2.default.createElement(
				'div',
				{
					ref: this.storeContainerComponent,
					onKeyDown: this.onKeyDown,
					className: (0, _classnames2.default)('rrui__switcher', {
						'rrui__switcher--disabled': disabled
					}, className),
					style: style },
				_react2.default.createElement(
					'div',
					{ className: 'rrui__input' },
					options.map(function (option, index) {
						return _this2.render_button(option, index);
					})
				),
				indicateInvalid && error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);
		}
	}, {
		key: 'render_button',
		value: function render_button(option, index) {
			var _this3 = this;

			var _props2 = this.props,
			    options = _props2.options,
			    value = _props2.value,
			    disabled = _props2.disabled;


			var selected = value === option.value;

			var first = index === 0;
			var last = index === options.length - 1;

			return _react2.default.createElement(
				'button',
				{
					key: option.value,
					ref: function ref(_ref2) {
						return _this3['button_' + index] = _ref2;
					},
					type: 'button',
					tabIndex: index === 0 ? undefined : '-1',
					disabled: disabled,
					onClick: this.chooser(option.value),
					className: (0, _classnames2.default)('rrui__button-reset', 'rrui__switcher__option', {
						'rrui__switcher__option--selected': selected,
						// CSS selector performance optimization
						'rrui__switcher__option--disabled': disabled,
						// Ordering
						'rrui__switcher__option--first': first,
						'rrui__switcher__option--last': last,
						'rrui__switcher__option--middle': !first && !last
					}) },
				option.label
			);
		}

		// render_static()
		// {
		// 	const { options } = this.props
		// 	return options.map((option, index) => this.render_static_option(option, index))
		// }

		// render_static_option(option, index)
		// {
		// 	const { options, name, value } = this.props
		//
		// 	const first = index === 0
		// 	const last  = index === options.length - 1
		//
		// 	return (
		// 		<span
		// 			key={ option.value }
		// 			className={ classNames('rrui__button-reset', 'rrui__switcher__option',
		// 			{
		// 				'rrui__switcher__option--first'  : first,
		// 				'rrui__switcher__option--last'   : last,
		// 				'rrui__switcher__option--middle' : !first && !last
		// 			}) }>
		// 			<input
		// 				type="radio"
		// 				name={ name }
		// 				checked={ value === option.value }/>
		// 			{ option.label }
		// 		</span>
		// 	)
		// }

	}, {
		key: 'chooser',
		value: function chooser(value) {
			var _this4 = this;

			return function (event) {
				var _props3 = _this4.props,
				    disabled = _props3.disabled,
				    onChange = _props3.onChange;


				if (disabled) {
					return;
				}

				// Call `onChange` only if `value` did actually change
				if (value !== _this4.props.value) {
					onChange(value);
				}
			};
		}
	}, {
		key: 'getFocusedOptionIndex',
		value: function getFocusedOptionIndex() {
			var _props4 = this.props,
			    options = _props4.options,
			    value = _props4.value;


			var i = 0;
			while (i < options.length) {
				if (document.activeElement === this['button_' + i]) {
					return i;
				}
				i++;
			}
		}

		// Get the previous focused option index (relative to the currently selected option).

	}, {
		key: 'previous_focused_option_index',
		value: function previous_focused_option_index() {
			var i = this.getFocusedOptionIndex();
			return i === 0 ? i : i - 1;
		}

		// Get the next focused option index (relative to the currently selected option).

	}, {
		key: 'next_focused_option_index',
		value: function next_focused_option_index() {
			var options = this.props.options;

			var i = this.getFocusedOptionIndex();
			return i === options.length - 1 ? i : i + 1;
		}
	}]);

	return Switcher;
}(PureComponent), _class.propTypes = {
	// A list of selectable options
	options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
		// Option value
		value: _propTypes2.default.string.isRequired,
		// Option label
		label: _propTypes2.default.string.isRequired
	})).isRequired,

	// HTML form input `name` attribute
	name: _propTypes2.default.string,

	// If `true` then will be disabled
	disabled: _propTypes2.default.bool,

	// The selected option value
	value: _propTypes2.default.any,

	// Is called when an option is selected
	onChange: _propTypes2.default.func.isRequired,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
}, _class.defaultProps = {
	// Show `error` (if passed).
	indicateInvalid: true
}, _temp2);
exports.default = Switcher;
//# sourceMappingURL=Switcher.js.map