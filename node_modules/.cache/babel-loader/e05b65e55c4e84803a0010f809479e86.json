{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport _extends from 'babel-runtime/helpers/extends';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Col } from '../grid';\nexport var Meta = function Meta(props) {\n  var _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === undefined ? 'ant-list' : _props$prefixCls,\n      className = props.className,\n      avatar = props.avatar,\n      title = props.title,\n      description = props.description,\n      others = __rest(props, [\"prefixCls\", \"className\", \"avatar\", \"title\", \"description\"]);\n\n  var classString = classNames(prefixCls + '-item-meta', className);\n  var content = React.createElement('div', {\n    className: prefixCls + '-item-meta-content'\n  }, title && React.createElement('h4', {\n    className: prefixCls + '-item-meta-title'\n  }, title), description && React.createElement('div', {\n    className: prefixCls + '-item-meta-description'\n  }, description));\n  return React.createElement('div', _extends({}, others, {\n    className: classString\n  }), avatar && React.createElement('div', {\n    className: prefixCls + '-item-meta-avatar'\n  }, avatar), (title || description) && content);\n};\n\nfunction getGrid(grid, t) {\n  return grid[t] && Math.floor(24 / grid[t]);\n}\n\nvar GridColumns = ['', 1, 2, 3, 4, 6, 8, 12, 24];\n\nvar Item = function (_React$Component) {\n  _inherits(Item, _React$Component);\n\n  function Item() {\n    _classCallCheck(this, Item);\n\n    return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).apply(this, arguments));\n  }\n\n  _createClass(Item, [{\n    key: 'render',\n    value: function render() {\n      var grid = this.context.grid;\n\n      var _a = this.props,\n          _a$prefixCls = _a.prefixCls,\n          prefixCls = _a$prefixCls === undefined ? 'ant-list' : _a$prefixCls,\n          children = _a.children,\n          actions = _a.actions,\n          extra = _a.extra,\n          className = _a.className,\n          others = __rest(_a, [\"prefixCls\", \"children\", \"actions\", \"extra\", \"className\"]);\n\n      var classString = classNames(prefixCls + '-item', className);\n      var metaContent = [];\n      var otherContent = [];\n      React.Children.forEach(children, function (element) {\n        if (element && element.type && element.type === Meta) {\n          metaContent.push(element);\n        } else {\n          otherContent.push(element);\n        }\n      });\n      var contentClassString = classNames(prefixCls + '-item-content', _defineProperty({}, prefixCls + '-item-content-single', metaContent.length < 1));\n      var content = otherContent.length > 0 ? React.createElement('div', {\n        className: contentClassString\n      }, otherContent) : null;\n      var actionsContent = void 0;\n\n      if (actions && actions.length > 0) {\n        var actionsContentItem = function actionsContentItem(action, i) {\n          return React.createElement('li', {\n            key: prefixCls + '-item-action-' + i\n          }, action, i !== actions.length - 1 && React.createElement('em', {\n            className: prefixCls + '-item-action-split'\n          }));\n        };\n\n        actionsContent = React.createElement('ul', {\n          className: prefixCls + '-item-action'\n        }, actions.map(function (action, i) {\n          return actionsContentItem(action, i);\n        }));\n      }\n\n      var extraContent = React.createElement('div', {\n        className: prefixCls + '-item-extra-wrap'\n      }, React.createElement('div', {\n        className: prefixCls + '-item-main'\n      }, metaContent, content, actionsContent), React.createElement('div', {\n        className: prefixCls + '-item-extra'\n      }, extra));\n      var mainContent = grid ? React.createElement(Col, {\n        span: getGrid(grid, 'column'),\n        xs: getGrid(grid, 'xs'),\n        sm: getGrid(grid, 'sm'),\n        md: getGrid(grid, 'md'),\n        lg: getGrid(grid, 'lg'),\n        xl: getGrid(grid, 'xl'),\n        xxl: getGrid(grid, 'xxl')\n      }, React.createElement('div', _extends({}, others, {\n        className: classString\n      }), extra && extraContent, !extra && metaContent, !extra && content, !extra && actionsContent)) : React.createElement('div', _extends({}, others, {\n        className: classString\n      }), extra && extraContent, !extra && metaContent, !extra && content, !extra && actionsContent);\n      return mainContent;\n    }\n  }]);\n\n  return Item;\n}(React.Component);\n\nexport default Item;\nItem.Meta = Meta;\nItem.propTypes = {\n  column: PropTypes.oneOf(GridColumns),\n  xs: PropTypes.oneOf(GridColumns),\n  sm: PropTypes.oneOf(GridColumns),\n  md: PropTypes.oneOf(GridColumns),\n  lg: PropTypes.oneOf(GridColumns),\n  xl: PropTypes.oneOf(GridColumns),\n  xxl: PropTypes.oneOf(GridColumns)\n};\nItem.contextTypes = {\n  grid: PropTypes.any\n};","map":null,"metadata":{},"sourceType":"module"}