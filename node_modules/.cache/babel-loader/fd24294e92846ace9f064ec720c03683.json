{"ast":null,"code":"import React from 'react';\nexport function noop() {}\nexport function getKeyFromChildrenIndex(child, menuEventKey, index) {\n  var prefix = menuEventKey || '';\n  return child.key || prefix + 'item_' + index;\n}\nexport function getMenuIdFromSubMenuEventKey(eventKey) {\n  return eventKey + '-menu-';\n}\nexport function loopMenuItem(children, cb) {\n  var index = -1;\n  React.Children.forEach(children, function (c) {\n    index++;\n\n    if (c && c.type && c.type.isMenuItemGroup) {\n      React.Children.forEach(c.props.children, function (c2) {\n        index++;\n        cb(c2, index);\n      });\n    } else {\n      cb(c, index);\n    }\n  });\n}\nexport function loopMenuItemRecursively(children, keys, ret) {\n  /* istanbul ignore if */\n  if (!children || ret.find) {\n    return;\n  }\n\n  React.Children.forEach(children, function (c) {\n    if (c) {\n      var construct = c.type;\n\n      if (!construct || !(construct.isSubMenu || construct.isMenuItem || construct.isMenuItemGroup)) {\n        return;\n      }\n\n      if (keys.indexOf(c.key) !== -1) {\n        ret.find = true;\n      } else if (c.props.children) {\n        loopMenuItemRecursively(c.props.children, keys, ret);\n      }\n    }\n  });\n}\nexport var menuAllProps = ['defaultSelectedKeys', 'selectedKeys', 'defaultOpenKeys', 'openKeys', 'mode', 'getPopupContainer', 'onSelect', 'onDeselect', 'onDestroy', 'openTransitionName', 'openAnimation', 'subMenuOpenDelay', 'subMenuCloseDelay', 'forceSubMenuRender', 'triggerSubMenuAction', 'level', 'selectable', 'multiple', 'onOpenChange', 'visible', 'focusable', 'defaultActiveFirst', 'prefixCls', 'inlineIndent', 'parentMenu', 'title', 'rootPrefixCls', 'eventKey', 'active', 'onItemHover', 'onTitleMouseEnter', 'onTitleMouseLeave', 'onTitleClick', 'popupAlign', 'popupOffset', 'isOpen', 'renderMenuItem', 'manualRef', 'subMenuKey', 'disabled', 'index', 'isSelected', 'store', 'activeKey', 'builtinPlacements', 'overflowedIndicator', // the following keys found need to be removed from test regression\n'attribute', 'value', 'popupClassName', 'inlineCollapsed', 'menu', 'theme', 'itemIcon', 'expandIcon'];\nexport var getWidth = function getWidth(elem) {\n  return elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width || 0;\n};\nexport var setStyle = function setStyle(elem, styleProperty, value) {\n  if (elem && typeof elem.style === 'object') {\n    elem.style[styleProperty] = value;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}