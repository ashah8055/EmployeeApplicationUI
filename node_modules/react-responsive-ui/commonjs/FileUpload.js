'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var FileUpload = (_temp2 = _class = function (_PureComponent) {
	_inherits(FileUpload, _PureComponent);

	function FileUpload() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, FileUpload);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call.apply(_ref, [this].concat(args))), _this), _this.onFileSelect = function (event) {
			var _this$props = _this.props,
			    onChange = _this$props.onChange,
			    multiple = _this$props.multiple;

			// `action` property is deprecated.

			onChange = onChange || _this.props.action;

			// This check will be replaced with `onChange : PropTypes.func.isRequired`
			// when `action` property is removed in some next breaking release.
			if (!onChange) {
				throw new Error('"onChange" handler not passed.');
			}

			var value = event.target.files;
			onChange(multiple ? value : value[0]);

			// Reset the selected file
			// so that `onChange` is triggered again next time
			// even if the user selects the same file.
			event.target.value = null;
		}, _this.onClick = function (event) {
			var _this$props2 = _this.props,
			    disabled = _this$props2.disabled,
			    onClick = _this$props2.onClick;


			if (disabled) {
				return event.preventDefault();
			}

			if (onClick) {
				onClick();
			}

			// This is why `onClick` is set on the `<input/>`.
			_this.fileInput.click();
		}, _this.storeFileInputNode = function (node) {
			return _this.fileInput = node;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(FileUpload, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    error = _props.error,
			    disabled = _props.disabled,
			    dropTarget = _props.dropTarget,
			    draggedOver = _props.draggedOver,
			    style = _props.style,
			    className = _props.className,
			    children = _props.children;


			return _react2.default.createElement(
				'div',
				{
					style: style,
					className: (0, _classnames2.default)('rrui__file-upload', className) },
				_react2.default.createElement('input', {
					type: 'file',
					ref: this.storeFileInputNode,
					onClick: this.onClick,
					onChange: this.onFileSelect,
					style: HIDDEN }),
				dropTarget(_react2.default.createElement(
					'div',
					{
						className: (0, _classnames2.default)('rrui__file-upload__area', {
							'rrui__file-upload__area--disabled': disabled,
							'rrui__file-upload__area--invalid': error,
							'rrui__file-upload__area--dragged-over': draggedOver
							// 'rrui__file-upload__area--can-not-drop' : !canDrop
						}),
						onClick: this.onClick },
					children
				)),
				error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);
		}
	}]);

	return FileUpload;
}(PureComponent), _class.propTypes = {
	// On file(s) chosen.
	onChange: _propTypes2.default.func,

	// (deprecated, use `onChange` instead).
	// On file(s) chosen.
	action: _propTypes2.default.func,

	// Allows choosing multiple files if `true`.
	multiple: _propTypes2.default.bool,

	// Disables the file input.
	disabled: _propTypes2.default.bool,

	// `onClick` handler.
	onClick: _propTypes2.default.func,

	// `react-dnd` `dropTarget()`.
	dropTarget: _propTypes2.default.func.isRequired,

	// `react-dnd` `draggedOver`.
	draggedOver: _propTypes2.default.bool.isRequired,

	// `react-dnd` `canDrop()`.
	// canDrop : PropTypes.bool.isRequired,

	// Renders an error message below the `<input/>`.
	error: _propTypes2.default.string,

	// The clickable area, like "Click here to choose a file".
	children: _propTypes2.default.node,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
}, _class.defaultProps = {
	dropTarget: function dropTarget(element) {
		return element;
	},
	draggedOver: false
}, _temp2);
exports.default = FileUpload;


var HIDDEN = {
	display: 'none'
};
//# sourceMappingURL=FileUpload.js.map