{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","country","countries","countryOptions","labels","international","metadata","validateCountry","validateCountries","validateCountryOptions","parsed_number","pre_selected_country","state","country_select_options","generate_country_select_options","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","name","disabled","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","ext","_","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","limitMaxLength","locale","phoneNumberInputProps","hidePhoneInputField","isFocused","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","undefined","_onFocus","_onBlur","focus","storePhoneNumberInputInstance","onChange","onFocus","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","type","hasUserSelectedACountry","old_default_country","old_value","new_default_country","new_value","new_state","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","number","object","node","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","event","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","indexOf","filter","option","splice","concat","throwCountryNotFound","Error"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// import InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForParsedInput,\r\n\te164,\r\n\ttrimNumber\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t/**\r\n\t\t * Phone number in `E.164` format.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `\"+12223333333\"`\r\n\t\t */\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value` as the user inputs the phone number.\r\n\t\t */\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Toggles the `--focus` CSS class.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonFocus : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onBlur` is usually passed by `redux-form`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Disables both the phone number `<input/>`\r\n\t\t * and the country `<select/>`.\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t\t *\r\n\t\t * Web browser's \"autocomplete\" feature\r\n\t\t * remembers the phone number being input\r\n\t\t * and can also autofill the `<input/>`\r\n\t\t * with previously remembered phone numbers.\r\n\t\t *\r\n\t\t * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t *\r\n\t\t * For example, can be used to turn it off:\r\n\t\t *\r\n\t\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t\t *  One example is when you've implemented your own version\r\n\t\t *  of autocomplete for search. Another example is any form field\r\n\t\t *  where users will input and submit different kinds of information\r\n\t\t *  where it would not be useful to have the browser remember\r\n\t\t *  what was submitted previously\".\r\n\t\t */\r\n\t\t// (is `\"tel\"` by default)\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to show the initial `value` in\r\n\t\t * \"national\" format rather than \"international\".\r\n\t\t *\r\n\t\t * For example, if this flag is set to `true`\r\n\t\t * and the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t\t *\r\n\t\t * By default, this flag is set to `false`,\r\n\t\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t\t *\r\n\t\t * The reason for such default behaviour is that\r\n\t\t * the newer generation grows up when there are no stationary phones\r\n\t\t * and therefore everyone inputs phone numbers in international format\r\n\t\t * in their smartphones so people gradually get more accustomed to\r\n\t\t * writing phone numbers in international format rather than in local format.\r\n\t\t * Future people won't be using \"national\" format, only \"international\".\r\n\t\t */\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The country to be selected by default.\r\n\t\t * For example, can be set after a GeoIP lookup.\r\n\t\t *\r\n\t\t * Example: `\"US\"`.\r\n\t\t */\r\n\t\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If specified, only these countries will be available for selection.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t\t */\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * Custom country `<select/>` option names.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t\t */\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * The base URL path for country flag icons.\r\n\t\t * By default it loads country flag icons from\r\n\t\t * `flag-icon-css` repo github pages website.\r\n\t\t * I imagine someone might want to download\r\n\t\t * those country flag icons and host them\r\n\t\t * on their own servers instead.\r\n\t\t */\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom country flag icon components.\r\n\t\t * These flags replace the default ones.\r\n\t\t *\r\n\t\t * The shape is an object where keys are country codes\r\n\t\t * and values are flag icon components.\r\n\t\t * Flag icon components receive the same properties\r\n\t\t * as `flagComponent` (see below).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `{ \"RU\": () => <img src=\"...\"/> }`\r\n\t\t *\r\n\t\t * Can be used to replace the default flags\r\n\t\t * with custom ones for certain (or all) countries.\r\n\t\t *\r\n\t\t * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n\t\t *\r\n\t\t * By default flag icons are inserted as `<img/>`s\r\n\t\t * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n\t\t *\r\n\t\t * There might be some cases\r\n\t\t * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n\t\t * when including the full set of `<svg/>` country flags (3 megabytes)\r\n\t\t * is more appropriate than downloading them individually at runtime only if needed.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `// Uses <svg/> flags (3 megabytes):`\r\n\t\t *\r\n\t\t * `import flags from 'react-phone-number-input/flags'`\r\n\t\t *\r\n\t\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t\t *\r\n\t\t * `<PhoneInput flags={flags} .../>`\r\n\t\t */\r\n\t\tflags : PropTypes.objectOf(PropTypes.func),\r\n\r\n\t\t/**\r\n\t\t * Country flag icon component.\r\n\t\t *\r\n\t\t * Takes properties:\r\n\t\t *\r\n\t\t * * country : string — The country code.\r\n\t\t * * flagsPath : string — The `flagsPath` property (see above).\r\n\t\t * * flags : object — The `flags` property (see above).\r\n\t\t */\r\n\t\tflagComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n\t\t */\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Custom \"International\" country `<select/>` option icon.\r\n\t\t */\r\n\t\tinternationalIcon : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to hide country `<select/>`.\r\n\t\t */\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * HTML `tabindex` attribute for country `<select/>`.\r\n\t\t */\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t/**\r\n\t\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t\t *\r\n\t\t * * `\"|\"` — inserts a separator.\r\n\t\t * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t\t */\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS style object.\r\n\t\t */\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * `<Phone/>` component CSS class.\r\n\t\t */\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` CSS class.\r\n\t\t */\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Returns phone number `<input/>` CSS class string.\r\n\t\t * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * Country `<select/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `name : string?` — HTML `name` attribute.\r\n\t\t * * `value : string?` — The currently selected country code.\r\n\t\t * * `onChange(value : string?)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t * * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t * * `className : string` — CSS class name.\r\n\t\t */\r\n\t\t//\r\n\t\t// (deprecated)\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t *\r\n\t\t * Receives properties:\r\n\t\t *\r\n\t\t * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t * * `onChange(value : string)` — Updates the `value`.\r\n\t\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t\t * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t * * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t * * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t *\r\n\t\t * Must also implement `.focus()` method.\r\n\t\t */\r\n\t\tinputComponent : PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * Phone number extension `<input/>` element.\r\n\t\t *\r\n\t\t * Example:\r\n\t\t *\r\n\t\t *\t`ext={<input value={...} onChange={...}/>}`\r\n\t\t */\r\n\t\text : PropTypes.node,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n\t\t */\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t * (which is the default).\r\n\t\t * @deprecated\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * Translation JSON object. See the `locales` directory for examples.\r\n\t\t */\r\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t *\r\n\t\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t\t */\r\n\t\tmetadata : metadataPropType.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A long time ago a person requested an `onCountryChange(country)` event listener.\r\n\t\t * No valid reason was given other than compliance with some legacy code\r\n\t\t * which stored both phone number and country in a database.\r\n\t\t * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\t */\r\n\t\tonCountryChange : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t/**\r\n\t\t * Not disabled.\r\n\t\t */\r\n\t\tdisabled: false,\r\n\r\n\t\t/**\r\n\t\t * Show `error` (if passed).\r\n\t\t * @deprecated\r\n\t\t */\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Flag icon component.\r\n\t\t */\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t/**\r\n\t\t * By default use icons from `flag-icon-css` github repo.\r\n\t\t */\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t/**\r\n\t\t * Default \"International\" country `<select/>` option icon (globe).\r\n\t\t */\r\n\t\t // internationalIcon: InternationalIcon,\r\n\r\n\t\t/**\r\n\t\t * Phone number `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: InputBasic,\r\n\r\n\t\t/**\r\n\t\t * Show country `<select/>`.\r\n\t\t */\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t/**\r\n\t\t * Don't convert the initially passed phone number `value`\r\n\t\t * to a national phone number for its country.\r\n\t\t * The reason is that the newer generation grows up when\r\n\t\t * there are no stationary phones and therefore everyone inputs\r\n\t\t * phone numbers with a `+` in their smartphones\r\n\t\t * so phone numbers written in international form\r\n\t\t * are gradually being considered more natural than local ones.\r\n\t\t */\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t * instead of `input-format`'s `<ReactInput/>`.\r\n\t\t * Is `false` by default.\r\n\t\t */\r\n\t\t// smartCaret : false,\r\n\r\n\t\t/**\r\n\t\t * Whether to add the \"International\" option\r\n\t\t * to the list of countries.\r\n\t\t */\r\n\t\tinternational : true,\r\n\r\n\t\t/**\r\n\t\t * If set to `true` the phone number input will get trimmed\r\n\t\t * if it exceeds the maximum length for the country.\r\n\t\t */\r\n\t\tlimitMaxLength : false\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tif (country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry\r\n\t\t(\r\n\t\t\tparsed_number,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, parsed_number, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `parsed_input` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { country, onCountryChange } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\r\n\t\tif (onCountryChange && selectedCountry !== country) {\r\n\t\t\tonCountryChange(selectedCountry)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tonCountryChange,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tif (country && country !== prevProps.country) {\r\n\t\t\tvalidateCountry(country, metadata)\r\n\t\t}\r\n\t\tif (countries && countries !== prevProps.countries) {\r\n\t\t\tvalidateCountries(countries, metadata)\r\n\t\t}\r\n\t\tif (countryOptions && countryOptions !== prevProps.countryOptions) {\r\n\t\t\tvalidateCountryOptions(countryOptions, metadata)\r\n\t\t}\r\n\r\n\t\tif (onCountryChange && this.state.country !== prevState.country) {\r\n\t\t\tonCountryChange(this.state.country)\r\n\t\t}\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the default `country` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry : new_country,\r\n\t\t\thasUserSelectedACountry : true,\r\n\t\t\tparsed_input : new_parsed_input,\r\n\t\t\tvalue : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// `<input/>` `onChange` handler.\r\n\t// Updates `value` property accordingly.\r\n\t// (so that they are kept in sync).\r\n\t// `parsed_input` must be a parsed phone number\r\n\t// or an empty string.\r\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\tonChange = (parsed_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet { country } = this.state\r\n\r\n\t\tif (parsed_input)\r\n\t\t{\r\n\t\t\t// If the phone number being input is an international one\r\n\t\t\t// then tries to derive the country from the phone number.\r\n\t\t\t// (regardless of whether there's any country currently selected)\r\n\t\t\tif (parsed_input[0] === '+')\r\n\t\t\t{\r\n\t\t\t\tconst old_country = country\r\n\t\t\t\tcountry = getCountryForParsedInput\r\n\t\t\t\t(\r\n\t\t\t\t\tparsed_input,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcountries,\r\n\t\t\t\t\tinternational,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t// If this `onChange()` event was triggered\r\n\t\t\t// as a result of selecting \"International\" country\r\n\t\t\t// then force-prepend a `+` sign if the phone number\r\n\t\t\t// `<input/>` value isn't in international format.\r\n\t\t\telse if (!country)\r\n\t\t\t{\r\n\t\t\t\tparsed_input = '+' + parsed_input\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Trim the input to not exceed the maximum possible number length.\r\n\t\tif (limitMaxLength) {\r\n\t\t\tparsed_input = trimNumber(parsed_input, country, metadata)\r\n\t\t}\r\n\r\n\t\t// Generate the new `value` property.\r\n\t\tconst value = e164(parsed_input, country, metadata)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) =>\r\n\t{\r\n\t\tconst { onFocus } = this.props\r\n\r\n\t\tthis._onFocus()\r\n\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tthis._onBlur()\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event =\r\n\t\t{\r\n\t\t\t...event,\r\n\t\t\ttarget:\r\n\t\t\t{\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) =>\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thasUserSelectedACountry,\r\n\t\t\tvalue,\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value\r\n\t\t\t}\r\n\t\t}\r\n\t\t= state\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value\r\n\t\t}\r\n\t\t= props\r\n\r\n\t\tconst new_state = {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t// If the user has already manually selected a country\r\n\t\t\t// then don't override that already selected country\r\n\t\t\t// if the default `country` property changes.\r\n\t\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\t\thasUserSelectedACountry\r\n\t\t}\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international)\r\n\t\t{\r\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user hasn't already manually\r\n\t\t// selected a country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country &&\r\n\t\t\t!hasUserSelectedACountry && !value && !new_value)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry : new_default_country\r\n\t\t\t\t// `value` is `undefined`.\r\n\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value)\r\n\t\t{\r\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, parsed_number, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? parsed_number.country : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `country` didn't change.\r\n\t\t// `value` didn't change.\r\n\t\t// `parsed_input` didn't change, because `value` didn't change.\r\n\t\t//\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent : CountrySelectComponent,\r\n\t\t\tinputComponent : InputComponent,\r\n\t\t\t// smartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tcountry : _,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tlocale,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input,\r\n\t\t\tisFocused\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--focus'   : isFocused,\r\n\t\t\t\t\t'react-phone-number-input--invalid' : error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tonFocus={ this._onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this._onBlur }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonFocus={ this.onFocus }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled, invalid: error && indicateInvalid })\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\r\n\t\t\t\t\t\t\t\tonFocus : this._onFocus,\r\n\t\t\t\t\t\t\t\tonBlur : this._onBlur,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled }),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generate_country_select_options(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tcountries,\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tcountryOptions\r\n\t}\r\n\t= props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(getCountrySelectOptions\r\n\t(\r\n\t\tcountries || getCountryCodes(labels),\r\n\t\tlabels,\r\n\t\tinternational\r\n\t)\r\n\t.map(({ value, label }) =>\r\n\t({\r\n\t\tvalue,\r\n\t\tlabel,\r\n\t\ticon : CountrySelectOptionIcon\r\n\t})),\r\n\tcountryOptions)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, parsed_number, props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tmetadata\r\n\t}\r\n\t= props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\r\n\t{\r\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nfunction validateCountryOptions(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (country && country !== '|' && country !== '...' && country !== '…') {\r\n\t\t\tif (!metadata.countries[country]) {\r\n\t\t\t\tthrowCountryNotFound(country)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountries(countries, metadata) {\r\n\tfor (const country of countries) {\r\n\t\tif (!metadata.countries[country]) {\r\n\t\t\tthrowCountryNotFound(country)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction validateCountry(country, metadata) {\r\n\tif (!metadata.countries[country]) {\r\n\t\tthrowCountryNotFound(country)\r\n\t}\r\n}\r\n\r\nfunction throwCountryNotFound(country) {\r\n\tthrow new Error(`Country not found: ${country}`)\r\n}"]}