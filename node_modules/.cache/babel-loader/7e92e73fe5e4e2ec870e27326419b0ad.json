{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nvar DateInput = createReactClass({\n  displayName: 'DateInput',\n  propTypes: {\n    prefixCls: PropTypes.string,\n    timePicker: PropTypes.object,\n    value: PropTypes.object,\n    disabledTime: PropTypes.any,\n    format: PropTypes.string,\n    locale: PropTypes.object,\n    disabledDate: PropTypes.func,\n    onChange: PropTypes.func,\n    onClear: PropTypes.func,\n    placeholder: PropTypes.string,\n    onSelect: PropTypes.func,\n    selectedValue: PropTypes.object,\n    clearIcon: PropTypes.node\n  },\n  getInitialState: function getInitialState() {\n    var selectedValue = this.props.selectedValue;\n    return {\n      str: selectedValue && selectedValue.format(this.props.format) || '',\n      invalid: false\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    this.cachedSelectionStart = this.dateInputInstance.selectionStart;\n    this.cachedSelectionEnd = this.dateInputInstance.selectionEnd; // when popup show, click body will call this, bug!\n\n    var selectedValue = nextProps.selectedValue;\n    this.setState({\n      str: selectedValue && selectedValue.format(nextProps.format) || '',\n      invalid: false\n    });\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (!this.state.invalid && !(this.cachedSelectionStart === 0 && this.cachedSelectionEnd === 0)) {\n      this.dateInputInstance.setSelectionRange(this.cachedSelectionStart, this.cachedSelectionEnd);\n    }\n  },\n  onInputChange: function onInputChange(event) {\n    var str = event.target.value;\n    this.setState({\n      str: str\n    });\n    var value = void 0;\n    var _props = this.props,\n        disabledDate = _props.disabledDate,\n        format = _props.format,\n        onChange = _props.onChange;\n\n    if (str) {\n      var parsed = moment(str, format, true);\n\n      if (!parsed.isValid()) {\n        this.setState({\n          invalid: true\n        });\n        return;\n      }\n\n      value = this.props.value.clone();\n      value.year(parsed.year()).month(parsed.month()).date(parsed.date()).hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());\n\n      if (value && (!disabledDate || !disabledDate(value))) {\n        var originalValue = this.props.selectedValue;\n\n        if (originalValue && value) {\n          if (!originalValue.isSame(value)) {\n            onChange(value);\n          }\n        } else if (originalValue !== value) {\n          onChange(value);\n        }\n      } else {\n        this.setState({\n          invalid: true\n        });\n        return;\n      }\n    } else {\n      onChange(null);\n    }\n\n    this.setState({\n      invalid: false\n    });\n  },\n  onClear: function onClear() {\n    this.setState({\n      str: ''\n    });\n    this.props.onClear(null);\n  },\n  getRootDOMNode: function getRootDOMNode() {\n    return ReactDOM.findDOMNode(this);\n  },\n  focus: function focus() {\n    if (this.dateInputInstance) {\n      this.dateInputInstance.focus();\n    }\n  },\n  saveDateInput: function saveDateInput(dateInput) {\n    this.dateInputInstance = dateInput;\n  },\n  render: function render() {\n    var props = this.props;\n    var _state = this.state,\n        invalid = _state.invalid,\n        str = _state.str;\n    var locale = props.locale,\n        prefixCls = props.prefixCls,\n        placeholder = props.placeholder,\n        clearIcon = props.clearIcon;\n    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';\n    return React.createElement('div', {\n      className: prefixCls + '-input-wrap'\n    }, React.createElement('div', {\n      className: prefixCls + '-date-input-wrap'\n    }, React.createElement('input', {\n      ref: this.saveDateInput,\n      className: prefixCls + '-input ' + invalidClass,\n      value: str,\n      disabled: props.disabled,\n      placeholder: placeholder,\n      onChange: this.onInputChange\n    })), props.showClear ? React.createElement('a', {\n      role: 'button',\n      title: locale.clear,\n      onClick: this.onClear\n    }, clearIcon || React.createElement('span', {\n      className: prefixCls + '-clear-btn'\n    })) : null);\n  }\n});\nexport default DateInput;","map":null,"metadata":{},"sourceType":"module"}