{"version":3,"sources":["../../source/utility/date.js"],"names":["parseDate","formatDate","parseDateCustom","correspondsToTemplate","formatDateCustom","normalizeDate","trimInvalidPart","text_value","format","noon","utc","date","string","year","extract","undefined","current_year_and_century","Date","getFullYear","current_year","century","month","day","convertToUtcTimezone","isNaN","getTime","template","piece","starts_at","indexOf","number","parseInt","slice","length","i","is_a_digit","getDate","getMonth","text","replace","padWithZeroes","String","target_length","value","getTimezoneOffset"],"mappings":"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","file":"date.js","sourcesContent":["// // Moment.js takes 161 KB of space (minified) which is too much\r\n// import moment from 'moment'\r\n\r\n// // `date-fns` would be a better alternative to moment\r\n// // but it doesn't support templated date parsing\r\n// // until version `2.0.0` of it is released.\r\n// // https://github.com/date-fns/date-fns/issues/347\r\n// import parse_date_date_fns from 'date-fns/parse'\r\n// import format_date_date_fns from 'date-fns/format'\r\n\r\n// Parses a text value into a `Date` provided a `format`.\r\n// The date returned is in the user's time zone and the time is `12:00`.\r\nexport function parseDate(text_value, format, noon, utc)\r\n{\r\n\tif (!text_value) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Custom\r\n\treturn parseDateCustom(text_value, format, noon, utc)\r\n\r\n\t// // Using `date-fns`\r\n\t// const date = parse_date_date_fns(text_value)\r\n\r\n\t// if (isNaN(date.getTime()))\r\n\t// {\r\n\t// \treturn\r\n\t// }\r\n\r\n\t// return date\r\n\r\n\t// // Using `Moment.js`\r\n\t// const moment_day = moment(text_value, format, true)\r\n\r\n\t// if (!moment_day.isValid())\r\n\t// {\r\n\t// \treturn\r\n\t// }\r\n\r\n\t// return moment_day.toDate()\r\n}\r\n\r\n// (Moment.js)\r\n// Formats a `Date` into a text value provided a `format`\r\nexport function formatDate(date, format)\r\n{\r\n\t// Custom\r\n\treturn formatDateCustom(date, format)\r\n\r\n\t// // Using `date-fns`\r\n\t// return format_date_date_fns(date, format)\r\n\r\n\t// // Using `Moment.js`\r\n\t// return moment(date).format(format)\r\n}\r\n\r\n// Parses a text value into a `Date` provided a `format`.\r\n// The date returned is in the user's time zone and the time is `00:00`.\r\n// (only `DD`, `MM`, `YY` and `YYYY` literals are supported).\r\nexport function parseDateCustom(string, format, noon, utc)\r\n{\r\n\tif (!string) {\r\n\t\treturn\r\n\t}\r\n\r\n\tlet year = extract(string, format, 'YYYY')\r\n\r\n\tif (year === undefined)\r\n\t{\r\n\t\tyear = extract(string, format, 'YY')\r\n\r\n\t\tif (year !== undefined)\r\n\t\t{\r\n\t\t\t// Current year in the user's time zone.\r\n\t\t\tconst current_year_and_century = new Date().getFullYear()\r\n\t\t\tconst current_year = current_year_and_century % 100\r\n\t\t\tlet century = (current_year_and_century - current_year) / 100\r\n\r\n\t\t\tif (year >= current_year)\r\n\t\t\t{\r\n\t\t\t\tif (year - current_year > 100 * 1/5)\r\n\t\t\t\t{\r\n\t\t\t\t\tcentury--\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif (current_year - year > 100 * 4/5)\r\n\t\t\t\t{\r\n\t\t\t\t\tcentury++\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tyear += century * 100\r\n\t\t}\r\n\t}\r\n\r\n\tconst month = extract(string, format, 'MM')\r\n\tconst day   = extract(string, format, 'DD')\r\n\r\n\tif (year === undefined || month === undefined || day === undefined) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// The date created is in the user's time zone and the time is `00:00`.\r\n\tlet date = new Date\r\n\t(\r\n\t\tyear,\r\n\t\tmonth - 1,\r\n\t\tday,\r\n\t\tnoon ? 12 : 0\r\n\t)\r\n\r\n\tif (utc)\r\n\t{\r\n\t\t// Converts timezone to UTC while preserving the same time\r\n\t\tdate = convertToUtcTimezone(date)\r\n\t}\r\n\r\n\t// If `new Date()` returns \"Invalid Date\"\r\n\t// (sometimes it does)\r\n\tif (isNaN(date.getTime())) {\r\n\t\treturn\r\n\t}\r\n\r\n\treturn date\r\n}\r\n\r\nfunction extract(string, template, piece)\r\n{\r\n\tconst starts_at = template.indexOf(piece)\r\n\r\n\tif (starts_at < 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check overall sanity\r\n\tif (!correspondsToTemplate(string, template)) {\r\n\t\treturn\r\n\t}\r\n\r\n\tconst number = parseInt(string.slice(starts_at, starts_at + piece.length))\r\n\r\n\tif (!isNaN(number)) {\r\n\t\treturn number\r\n\t}\r\n}\r\n\r\nexport function correspondsToTemplate(string, template)\r\n{\r\n\tif (string.length !== template.length) {\r\n\t\treturn false\r\n\t}\r\n\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tconst is_a_digit = string[i] >= '0' && string[i] <= '9'\r\n\r\n\t\tif (!is_a_digit)\r\n\t\t{\r\n\t\t\tif (string[i] !== template[i])\r\n\t\t\t{\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (template[i] !== 'D' && template[i] !== 'M' && template[i] !== 'Y')\r\n\t\t\t{\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function formatDateCustom(date, format)\r\n{\r\n\t// Someone may accidentally pass a timestamp, or a string.\r\n\t// Or `date` could be `undefined`.\r\n\tif (!(date instanceof Date)) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\t// Check if `date` is \"Invalid Date\".\r\n\tif (isNaN(date.getTime())) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tconst day   = date.getDate()\r\n\tconst month = date.getMonth() + 1\r\n\tconst year  = date.getFullYear()\r\n\r\n\tlet text = format\r\n\t\t.replace('DD', padWithZeroes(String(day),   2))\r\n\t\t.replace('MM', padWithZeroes(String(month), 2))\r\n\r\n\tif (text.indexOf('YYYY') >= 0) {\r\n\t\treturn text.replace('YYYY', padWithZeroes(String(year), 4))\r\n\t}\r\n\r\n\tif (text.indexOf('YY') >= 0) {\r\n\t\treturn text.replace('YY', padWithZeroes(String(year % 100), 2))\r\n\t}\r\n}\r\n\r\nfunction padWithZeroes(string, target_length)\r\n{\r\n\twhile (string.length < target_length) {\r\n\t\tstring = '0' + string\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\n// // Intl date formatting\r\n//\r\n// const dateFormatters = {}\r\n//\r\n// function format_dateIntl(date, locale) {\r\n//   if (typeof Intl === 'undefined') {\r\n//     return date.toISOString()\r\n//   }\r\n//\r\n//   const key = typeof locale === 'string' ? locale : locale.join(',')\r\n//\r\n//   if (!dateFormatters[key]) {\r\n//     dateFormatters[key] = new Intl.DateTimeFormat(locale, {\r\n//       day: '2-digit',\r\n//       month: '2-digit',\r\n//       year: 'numeric'\r\n//     })\r\n//   }\r\n//\r\n//   return dateFormatters[key]\r\n// }\r\n\r\n// Converts `null` to `undefined`\r\n// (specially for `knex.js`)\r\nexport function normalizeDate(value)\r\n{\r\n\tif (value === null) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if `value` is \"Invalid Date\".\r\n\tif (value instanceof Date && isNaN(value.getTime())) {\r\n\t\treturn\r\n\t}\r\n\r\n\treturn value\r\n}\r\n\r\nexport function trimInvalidPart(value, format)\r\n{\r\n\tlet i = 0\r\n\twhile (i < value.length && i < format.length)\r\n\t{\r\n\t\tif (format[i] === 'D' || format[i] === 'M' || format[i] === 'Y')\r\n\t\t{\r\n\t\t\tif (!(value[i] >= '0' && value[i] <= '9'))\r\n\t\t\t{\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (format[i] !== value[i])\r\n\t\t{\r\n\t\t\tbreak\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn value.slice(0, i)\r\n}\r\n\r\n// Converts timezone to UTC while preserving the same time\r\nfunction convertToUtcTimezone(date)\r\n{\r\n\t// Doesn't account for leap seconds but I guess that's ok\r\n\t// given that javascript's own `Date()` does not either.\r\n\t// https://www.timeanddate.com/time/leap-seconds-background.html\r\n\t//\r\n\t// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\r\n\t//\r\n\treturn new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000)\r\n}\r\n"]}