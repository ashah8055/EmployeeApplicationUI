{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as moment from 'moment';\nimport { polyfill } from 'react-lifecycles-compat';\nimport RcTimePicker from 'rc-time-picker/es/TimePicker';\nimport classNames from 'classnames';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from './locale/en_US';\nimport interopDefault from '../_util/interopDefault';\nimport Icon from '../icon';\nexport function generateShowHourMinuteSecond(format) {\n  // Ref: http://momentjs.com/docs/#/parsing/string-format/\n  return {\n    showHour: format.indexOf('H') > -1 || format.indexOf('h') > -1 || format.indexOf('k') > -1,\n    showMinute: format.indexOf('m') > -1,\n    showSecond: format.indexOf('s') > -1\n  };\n}\n\nvar TimePicker = function (_React$Component) {\n  _inherits(TimePicker, _React$Component);\n\n  function TimePicker(props) {\n    _classCallCheck(this, TimePicker);\n\n    var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));\n\n    _this.handleChange = function (value) {\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          _this$props$format = _this$props.format,\n          format = _this$props$format === undefined ? 'HH:mm:ss' : _this$props$format;\n\n      if (onChange) {\n        onChange(value, value && value.format(format) || '');\n      }\n    };\n\n    _this.handleOpenClose = function (_ref) {\n      var open = _ref.open;\n      var onOpenChange = _this.props.onOpenChange;\n\n      if (onOpenChange) {\n        onOpenChange(open);\n      }\n    };\n\n    _this.saveTimePicker = function (timePickerRef) {\n      _this.timePickerRef = timePickerRef;\n    };\n\n    _this.renderTimePicker = function (locale) {\n      var _classNames2;\n\n      var props = _extends({}, _this.props);\n\n      delete props.defaultValue;\n\n      var format = _this.getDefaultFormat();\n\n      var className = classNames(props.className, _defineProperty({}, props.prefixCls + '-' + props.size, !!props.size));\n\n      var addon = function addon(panel) {\n        return props.addon ? React.createElement('div', {\n          className: props.prefixCls + '-panel-addon'\n        }, props.addon(panel)) : null;\n      };\n\n      var suffixIcon = props.suffixIcon,\n          prefixCls = props.prefixCls;\n      var clockIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n        className: classNames((_classNames2 = {}, _defineProperty(_classNames2, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames2, prefixCls + '-clock-icon', true), _classNames2))\n      }) : React.createElement('span', {\n        className: prefixCls + '-clock-icon'\n      }, suffixIcon)) || React.createElement(Icon, {\n        type: 'clock-circle',\n        className: prefixCls + '-clock-icon',\n        theme: 'outlined'\n      });\n      var inputIcon = React.createElement('span', {\n        className: prefixCls + '-icon'\n      }, clockIcon);\n      var clearIcon = React.createElement(Icon, {\n        type: 'close-circle',\n        className: prefixCls + '-panel-clear-btn-icon',\n        theme: 'filled'\n      });\n      return React.createElement(RcTimePicker, _extends({}, generateShowHourMinuteSecond(format), props, {\n        ref: _this.saveTimePicker,\n        format: format,\n        className: className,\n        value: _this.state.value,\n        placeholder: props.placeholder === undefined ? locale.placeholder : props.placeholder,\n        onChange: _this.handleChange,\n        onOpen: _this.handleOpenClose,\n        onClose: _this.handleOpenClose,\n        addon: addon,\n        inputIcon: inputIcon,\n        clearIcon: clearIcon\n      }));\n    };\n\n    var value = props.value || props.defaultValue;\n\n    if (value && !interopDefault(moment).isMoment(value)) {\n      throw new Error('The value/defaultValue of TimePicker must be a moment object after `antd@2.0`, ' + 'see: https://u.ant.design/time-picker-value');\n    }\n\n    _this.state = {\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: 'focus',\n    value: function focus() {\n      this.timePickerRef.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.timePickerRef.blur();\n    }\n  }, {\n    key: 'getDefaultFormat',\n    value: function getDefaultFormat() {\n      var _props = this.props,\n          format = _props.format,\n          use12Hours = _props.use12Hours;\n\n      if (format) {\n        return format;\n      } else if (use12Hours) {\n        return 'h:mm:ss a';\n      }\n\n      return 'HH:mm:ss';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement(LocaleReceiver, {\n        componentName: 'TimePicker',\n        defaultLocale: defaultLocale\n      }, this.renderTimePicker);\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('value' in nextProps) {\n        return {\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return TimePicker;\n}(React.Component);\n\nTimePicker.defaultProps = {\n  prefixCls: 'ant-time-picker',\n  align: {\n    offset: [0, -2]\n  },\n  disabled: false,\n  disabledHours: undefined,\n  disabledMinutes: undefined,\n  disabledSeconds: undefined,\n  hideDisabledOptions: false,\n  placement: 'bottomLeft',\n  transitionName: 'slide-up',\n  focusOnOpen: true\n};\npolyfill(TimePicker);\nexport default TimePicker;","map":null,"metadata":{},"sourceType":"module"}