{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Amar/emp/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLoginUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchTimeSheet),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchTimeSheetCalander),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\nfunction fetchLoginUser(action) {\n  var formBody, reqMethod, loginUrl, response, result;\n  return _regeneratorRuntime.wrap(function fetchLoginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log(\"Action->\" + JSON.stringify(action));\n          formBody = {};\n          formBody.firstname = \"asdfg\"; //action.code;\n\n          formBody.lastname = \"zxcvbb\"; //action.provider;\n\n          formBody.age = \"34\"; //const reqMethod = \"POST\";\n\n          reqMethod = \"GET\";\n          loginUrl = 'http://localhost:8080/employee?firstname=\"test\"&lastname=\"test\"&age=34';\n          _context.next = 10;\n          return call(GetDataFromServer, loginUrl, '', '');\n\n        case 10:\n          response = _context.sent;\n          _context.next = 13;\n          return response.json();\n\n        case 13:\n          result = _context.sent;\n          console.log('Result Json' + result);\n\n          if (!result.error) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 18;\n          return put({\n            type: \"LOGIN_USER_SERVER_REPONSE_ERROR\",\n            error: result.error\n          });\n\n        case 18:\n          _context.next = 22;\n          break;\n\n        case 20:\n          _context.next = 22;\n          return put({\n            type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 22:\n          _context.next = 27;\n          break;\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](0);\n          // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n          console.log(_context.t0);\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 24]]);\n}\n\nfunction fetchTimeSheet(action) {\n  var formBody, reqMethod, loginUrl, response, result;\n  return _regeneratorRuntime.wrap(function fetchTimeSheet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"TimeSheet Action->\" + JSON.stringify(action));\n          _context2.prev = 1;\n          console.log(\"Action->\" + JSON.stringify(action));\n          formBody = {};\n          formBody.selectWeek = action.selectWeek; //action.provider;\n\n          formBody.jobTitle = action.jobTitle;\n          formBody.approver = action.approver;\n          formBody.client = action.client;\n          formBody.endDate = action.endDate;\n          formBody.projectId = action.projectId; //const reqMethod = \"POST\";\n\n          reqMethod = \"POST\";\n          loginUrl = 'http://localhost:8080/timesheet';\n          _context2.next = 14;\n          return call(GetDataFromServer, loginUrl, 'POST', formBody);\n\n        case 14:\n          response = _context2.sent;\n          _context2.next = 17;\n          return response.json();\n\n        case 17:\n          result = _context2.sent;\n          console.log('Result Json' + result);\n\n          if (!result.error) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 22;\n          return put({\n            type: \"LOGIN_USER_SERVER_REPONSE_ERROR\",\n            error: result.error\n          });\n\n        case 22:\n          _context2.next = 26;\n          break;\n\n        case 24:\n          _context2.next = 26;\n          return put({\n            type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 26:\n          _context2.next = 31;\n          break;\n\n        case 28:\n          _context2.prev = 28;\n          _context2.t0 = _context2[\"catch\"](1);\n          // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n          console.log(_context2.t0);\n\n        case 31:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1, 28]]);\n}\n\nfunction fetchTimeSheetCalander(action) {\n  var formBody;\n  return _regeneratorRuntime.wrap(function fetchTimeSheetCalander$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"TimeSheet Calander Action->\" + JSON.stringify(action));\n          formBody = {};\n          formBody.workingHour = action.submitTimeSheet.workinghours;\n          formBody.Workingdetails = action.submitTimeSheet.workingdetails;\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nexport default function rootSaga(params) {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(Types.LOGIN_USER, fetchLoginUser);\n\n        case 2:\n          _context4.next = 4;\n          return takeEvery(Types.CREATE_TIMESHEET, fetchTimeSheet);\n\n        case 4:\n          _context4.next = 6;\n          return takeEvery(Types.CREATE_TIMESHEET_WORKINGHOUR, fetchTimeSheetCalander);\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/store/sagas.js"],"names":["fetchLoginUser","fetchTimeSheet","fetchTimeSheetCalander","rootSaga","takeEvery","call","put","select","take","fork","all","takeLatest","Types","GetDataFromServer","action","console","log","JSON","stringify","formBody","firstname","lastname","age","reqMethod","loginUrl","response","json","result","error","type","LOGIN_USER_SERVER_RESPONSE_SUCCESS","selectWeek","jobTitle","approver","client","endDate","projectId","workingHour","submitTimeSheet","workinghours","Workingdetails","workingdetails","params","LOGIN_USER","CREATE_TIMESHEET","CREATE_TIMESHEET_WORKINGHOUR"],"mappings":";;;;yBAMUA,c;;;yBAuBAC,c;;;yBA6BAC,sB;;;yBAUeC,Q;;AApEzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,GAAnD,EAAwDC,UAAxD,QAA0E,oBAA1E;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,iBAAT,QAAkC,YAAlC;;AAIA,SAAUb,cAAV,CAAyBc,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAaC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAzB;AACIK,UAAAA,QAHR,GAGmB,EAHnB;AAIIA,UAAAA,QAAQ,CAACC,SAAT,GAAqB,OAArB,CAJJ,CAIiC;;AAC7BD,UAAAA,QAAQ,CAACE,QAAT,GAAoB,QAApB,CALJ,CAKkC;;AAC9BF,UAAAA,QAAQ,CAACG,GAAT,GAAe,IAAf,CANJ,CAOI;;AACMC,UAAAA,SARV,GAQsB,KARtB;AASUC,UAAAA,QATV,GASqB,wEATrB;AAAA;AAUqB,iBAAMnB,IAAI,CAACQ,iBAAD,EAAoBW,QAApB,EAA8B,EAA9B,EAAkC,EAAlC,CAAV;;AAVrB;AAUUC,UAAAA,QAVV;AAAA;AAWmB,iBAAMA,QAAQ,CAACC,IAAT,EAAN;;AAXnB;AAWUC,UAAAA,MAXV;AAYIZ,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBW,MAA5B;;AAZJ,eAaQA,MAAM,CAACC,KAbf;AAAA;AAAA;AAAA;;AAAA;AAcM,iBAAMtB,GAAG,CAAC;AAAEuB,YAAAA,IAAI,EAAE,iCAAR;AAA2CD,YAAAA,KAAK,EAAED,MAAM,CAACC;AAAzD,WAAD,CAAT;;AAdN;AAAA;AAAA;;AAAA;AAAA;AAgBM,iBAAMtB,GAAG,CAAC;AAAEuB,YAAAA,IAAI,EAAEjB,KAAK,CAACkB,kCAAd;AAAkDH,YAAAA,MAAM,EAANA;AAAlD,WAAD,CAAT;;AAhBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBI;AACAZ,UAAAA,OAAO,CAACC,GAAR;;AApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUf,cAAV,CAAyBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAnC;AADF;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAaC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAzB;AACIK,UAAAA,QAJR,GAImB,EAJnB;AAKIA,UAAAA,QAAQ,CAACY,UAAT,GAAsBjB,MAAM,CAACiB,UAA7B,CALJ,CAK6C;;AACzCZ,UAAAA,QAAQ,CAACa,QAAT,GAAoBlB,MAAM,CAACkB,QAA3B;AACAb,UAAAA,QAAQ,CAACc,QAAT,GAAoBnB,MAAM,CAACmB,QAA3B;AACAd,UAAAA,QAAQ,CAACe,MAAT,GAAkBpB,MAAM,CAACoB,MAAzB;AACAf,UAAAA,QAAQ,CAACgB,OAAT,GAAmBrB,MAAM,CAACqB,OAA1B;AACAhB,UAAAA,QAAQ,CAACiB,SAAT,GAAqBtB,MAAM,CAACsB,SAA5B,CAVJ,CAYI;;AACMb,UAAAA,SAbV,GAasB,MAbtB;AAcUC,UAAAA,QAdV,GAcqB,iCAdrB;AAAA;AAeqB,iBAAMnB,IAAI,CAACQ,iBAAD,EAAoBW,QAApB,EAA8B,MAA9B,EAAsCL,QAAtC,CAAV;;AAfrB;AAeUM,UAAAA,QAfV;AAAA;AAgBmB,iBAAMA,QAAQ,CAACC,IAAT,EAAN;;AAhBnB;AAgBUC,UAAAA,MAhBV;AAiBIZ,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBW,MAA5B;;AAjBJ,eAkBQA,MAAM,CAACC,KAlBf;AAAA;AAAA;AAAA;;AAAA;AAmBM,iBAAMtB,GAAG,CAAC;AAAEuB,YAAAA,IAAI,EAAE,iCAAR;AAA2CD,YAAAA,KAAK,EAAED,MAAM,CAACC;AAAzD,WAAD,CAAT;;AAnBN;AAAA;AAAA;;AAAA;AAAA;AAqBM,iBAAMtB,GAAG,CAAC;AAAEuB,YAAAA,IAAI,EAAEjB,KAAK,CAACkB,kCAAd;AAAkDH,YAAAA,MAAM,EAANA;AAAlD,WAAD,CAAT;;AArBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwBI;AACAZ,UAAAA,OAAO,CAACC,GAAR;;AAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BA,SAAUd,sBAAV,CAAiCY,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAA5C;AACIK,UAAAA,QAFN,GAEiB,EAFjB;AAGEA,UAAAA,QAAQ,CAACkB,WAAT,GAAuBvB,MAAM,CAACwB,eAAP,CAAuBC,YAA9C;AACApB,UAAAA,QAAQ,CAACqB,cAAT,GAA0B1B,MAAM,CAACwB,eAAP,CAAuBG,cAAjD;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUtC,QAAV,CAAmBuC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMtC,SAAS,CAACQ,KAAK,CAAC+B,UAAP,EAAmB3C,cAAnB,CAAf;;AADa;AAAA;AAEb,iBAAMI,SAAS,CAACQ,KAAK,CAACgC,gBAAP,EAAyB3C,cAAzB,CAAf;;AAFa;AAAA;AAGb,iBAAMG,SAAS,CAACQ,KAAK,CAACiC,4BAAP,EAAqC3C,sBAArC,CAAf;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\n\n\nfunction* fetchLoginUser(action) {\n  try {\n    console.log(\"Action->\" + JSON.stringify(action));\n    let formBody = {};\n    formBody.firstname = \"asdfg\";//action.code;\n    formBody.lastname = \"zxcvbb\"; //action.provider;\n    formBody.age = \"34\"\n    //const reqMethod = \"POST\";\n    const reqMethod = \"GET\";\n    const loginUrl = 'http://localhost:8080/employee?firstname=\"test\"&lastname=\"test\"&age=34';\n    const response = yield call(GetDataFromServer, loginUrl, '', '');\n    const result = yield response.json();\n    console.log('Result Json' + result);\n    if (result.error) {\n      yield put({ type: \"LOGIN_USER_SERVER_REPONSE_ERROR\", error: result.error });\n    } else {\n      yield put({ type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS, result });\n    }\n  } catch (error) {\n    // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n    console.log(error);\n  }\n}\nfunction* fetchTimeSheet(action) {\n  console.log(\"TimeSheet Action->\" + JSON.stringify(action));\n  try {\n    console.log(\"Action->\" + JSON.stringify(action));\n    let formBody = {};\n    formBody.selectWeek = action.selectWeek; //action.provider;\n    formBody.jobTitle = action.jobTitle;\n    formBody.approver = action.approver;\n    formBody.client = action.client;\n    formBody.endDate = action.endDate;\n    formBody.projectId = action.projectId;\n\n    //const reqMethod = \"POST\";\n    const reqMethod = \"POST\";\n    const loginUrl = 'http://localhost:8080/timesheet';\n    const response = yield call(GetDataFromServer, loginUrl, 'POST', formBody);\n    const result = yield response.json();\n    console.log('Result Json' + result);\n    if (result.error) {\n      yield put({ type: \"LOGIN_USER_SERVER_REPONSE_ERROR\", error: result.error });\n    } else {\n      yield put({ type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS, result });\n    }\n  } catch (error) {\n    // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n    console.log(error);\n  }\n\n}\nfunction* fetchTimeSheetCalander(action) {\n  console.log(\"TimeSheet Calander Action->\" + JSON.stringify(action));\n  let formBody = {};\n  formBody.workingHour = action.submitTimeSheet.workinghours;\n  formBody.Workingdetails = action.submitTimeSheet.workingdetails;\n\n\n}\n\n\nexport default function* rootSaga(params) {\n  yield takeEvery(Types.LOGIN_USER, fetchLoginUser);\n  yield takeEvery(Types.CREATE_TIMESHEET, fetchTimeSheet);\n  yield takeEvery(Types.CREATE_TIMESHEET_WORKINGHOUR, fetchTimeSheetCalander);\n\n\n}\n"]},"metadata":{},"sourceType":"module"}