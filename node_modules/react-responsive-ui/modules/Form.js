'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _Modal = require('./Modal');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Prevents `<form/> submission when `wait` is `true`.
// And also inserts `<Form.Error/>` when `error` is passed.
// Using `Component` here instead of `PureComponent`
// because `<Form.Actions>` depends on `context` and therefore
// should be rerendered even if the `props` haven't changed.
// And probably that was also why it would keep displaying an old error
// (and not resetting it for some reason).
var Form = (_temp2 = _class = function (_Component) {
	_inherits(Form, _Component);

	function Form() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Form);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Form.__proto__ || Object.getPrototypeOf(Form)).call.apply(_ref, [this].concat(args))), _this), _this.submit = function (event) {
			if (event) {
				event.preventDefault();
			}

			var _this$props = _this.props,
			    wait = _this$props.wait,
			    busy = _this$props.busy,
			    submit = _this$props.submit;

			// Prevent form double submit
			// (because not only buttons submit a form,
			//  therefore just disabling buttons is not enough).

			if (wait || busy) {
				return;
			}

			if (submit) {
				return submit();
			}
		}, _this.on_key_down = function (event) {
			// Cancel editing on "Escape" key
			if (event.keyCode === 27) {
				var cancel = _this.props.cancel;


				if (cancel) {
					cancel();
				}

				event.preventDefault();
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Form, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    post = _props.post,
			    error = _props.error,
			    className = _props.className,
			    style = _props.style;


			return _react2.default.createElement(
				'form',
				{
					onSubmit: this.submit,
					onKeyDown: this.on_key_down,
					action: post,
					method: 'POST',
					className: (0, _classnames2.default)('rrui__form', className),
					style: style,
					noValidate: true },
				this.render_children(error)
			);
		}

		// Adds `error` element to the form

	}, {
		key: 'render_children',
		value: function render_children(error) {
			var children = this.props.children;


			var form_elements = _react2.default.Children.toArray(children);

			// Insert `error` element
			if (error) {
				// Will be set to `null` upon insertion
				var error_element = _react2.default.createElement(
					Form.Error,
					{ key: 'form-error' },
					error
				);

				// Show form error above form actions,
				// so that the error will be visible and won't be overlooked.
				var index = 0;
				for (var _iterator = form_elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var child = _ref2;

					if (child.type === FormErrorType) {
						form_elements[index] = _react2.default.cloneElement(child, { key: 'form-error' }, error);
						error_element = null;
						break;
					}

					if (child.type === FormActionsType) {
						form_elements.insert_at(index, error_element);
						error_element = null;
						break;
					}

					index++;
				}

				if (error_element) {
					form_elements.push(error_element);
				}
			}

			return form_elements;
		}
	}]);

	return Form;
}(_react.Component), _class.propTypes = {
	// `onSubmit` handler
	submit: _propTypes2.default.func,

	// On `Escape` keydown handler
	cancel: _propTypes2.default.func,

	// `error` can be passed for non-javascript old-school forms.
	// e.g. when a form submitted via HTTP POST request had an error,
	// then this error is rendered as part of the form.
	error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.node]),

	// The HTML form `action` attribute,
	// i.e. the URL to which the form will be posted
	// in case of a non-javascript old-school POST submission.
	post: _propTypes2.default.string,

	// Is form submission in progress
	wait: _propTypes2.default.bool.isRequired,

	// (deprecated)
	// (use `wait` instead)
	// Is form submission in progress
	busy: _propTypes2.default.bool.isRequired,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
}, _class.defaultProps = {
	wait: false,
	busy: false
}, _temp2);
exports.default = Form;


Form.Error = function (_ref3) {
	var children = _ref3.children;

	return _react2.default.createElement(
		'div',
		{ className: 'rrui__form__error' },
		children
	);
};

Form.Actions = function (_ref4) {
	var children = _ref4.children;

	return _react2.default.createElement(
		_Modal.ModalContext.Consumer,
		null,
		function (context) {
			return _react2.default.createElement(
				Actions,
				{ context: context },
				children
			);
		}
	);
};

// Workaround for `react-hot-loader`.
// https://github.com/gaearon/react-hot-loader#checking-element-types
var FormErrorType = _react2.default.createElement(Form.Error, null).type;
var FormActionsType = _react2.default.createElement(Form.Actions, null).type;

var Actions = function (_Component2) {
	_inherits(Actions, _Component2);

	function Actions() {
		_classCallCheck(this, Actions);

		return _possibleConstructorReturn(this, (Actions.__proto__ || Object.getPrototypeOf(Actions)).apply(this, arguments));
	}

	_createClass(Actions, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var context = this.props.context;


			if (context) {
				context.registerForm();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var context = this.props.context;


			if (context) {
				context.unregisterForm();
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    context = _props2.context,
			    children = _props2.children,
			    className = _props2.className,
			    style = _props2.style;


			return _react2.default.createElement(
				'div',
				{
					className: (0, _classnames2.default)('rrui__form__actions', className),
					style: style },
				context && _react2.default.createElement(
					_Button2.default,
					{ action: context.closeIfNotBusy },
					context.closeLabel
				),
				children
			);
		}
	}]);

	return Actions;
}(_react.Component);
//# sourceMappingURL=Form.js.map