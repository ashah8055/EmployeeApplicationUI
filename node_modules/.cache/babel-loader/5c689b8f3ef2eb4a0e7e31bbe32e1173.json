{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Button from '../button';\n\nvar ActionButton = function (_React$Component) {\n  _inherits(ActionButton, _React$Component);\n\n  function ActionButton(props) {\n    _classCallCheck(this, ActionButton);\n\n    var _this = _possibleConstructorReturn(this, (ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).call(this, props));\n\n    _this.onClick = function () {\n      var _this$props = _this.props,\n          actionFn = _this$props.actionFn,\n          closeModal = _this$props.closeModal;\n\n      if (actionFn) {\n        var ret = void 0;\n\n        if (actionFn.length) {\n          ret = actionFn(closeModal);\n        } else {\n          ret = actionFn();\n\n          if (!ret) {\n            closeModal();\n          }\n        }\n\n        if (ret && ret.then) {\n          _this.setState({\n            loading: true\n          });\n\n          ret.then(function () {\n            // It's unnecessary to set loading=false, for the Modal will be unmounted after close.\n            // this.setState({ loading: false });\n            closeModal.apply(undefined, arguments);\n          }, function () {\n            // See: https://github.com/ant-design/ant-design/issues/6183\n            _this.setState({\n              loading: false\n            });\n          });\n        }\n      } else {\n        closeModal();\n      }\n    };\n\n    _this.state = {\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(ActionButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.autoFocus) {\n        var $this = ReactDOM.findDOMNode(this);\n        this.timeoutId = setTimeout(function () {\n          return $this.focus();\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.timeoutId);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          type = _props.type,\n          children = _props.children,\n          buttonProps = _props.buttonProps;\n      var loading = this.state.loading;\n      return React.createElement(Button, _extends({\n        type: type,\n        onClick: this.onClick,\n        loading: loading\n      }, buttonProps), children);\n    }\n  }]);\n\n  return ActionButton;\n}(React.Component);\n\nexport default ActionButton;","map":null,"metadata":{},"sourceType":"module"}