{"ast":null,"code":"import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport { PREFIX_CLS } from './Constants';\nimport Select from '../select';\nimport { Group, Button } from '../radio';\nvar Option = Select.Option;\n\nvar Header = function (_React$Component) {\n  _inherits(Header, _React$Component);\n\n  function Header() {\n    _classCallCheck(this, Header);\n\n    var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));\n\n    _this.onYearChange = function (year) {\n      var _this$props = _this.props,\n          value = _this$props.value,\n          validRange = _this$props.validRange;\n      var newValue = value.clone();\n      newValue.year(parseInt(year, 10)); // switch the month so that it remains within range when year changes\n\n      if (validRange) {\n        var _validRange = _slicedToArray(validRange, 2),\n            start = _validRange[0],\n            end = _validRange[1];\n\n        var newYear = newValue.get('year');\n        var newMonth = newValue.get('month');\n\n        if (newYear === end.get('year') && newMonth > end.get('month')) {\n          newValue.month(end.get('month'));\n        }\n\n        if (newYear === start.get('year') && newMonth < start.get('month')) {\n          newValue.month(start.get('month'));\n        }\n      }\n\n      var onValueChange = _this.props.onValueChange;\n\n      if (onValueChange) {\n        onValueChange(newValue);\n      }\n    };\n\n    _this.onMonthChange = function (month) {\n      var newValue = _this.props.value.clone();\n\n      newValue.month(parseInt(month, 10));\n      var onValueChange = _this.props.onValueChange;\n\n      if (onValueChange) {\n        onValueChange(newValue);\n      }\n    };\n\n    _this.onTypeChange = function (e) {\n      var onTypeChange = _this.props.onTypeChange;\n\n      if (onTypeChange) {\n        onTypeChange(e.target.value);\n      }\n    };\n\n    _this.getCalenderHeaderNode = function (node) {\n      _this.calenderHeaderNode = node;\n    };\n\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: 'getYearSelectElement',\n    value: function getYearSelectElement(year) {\n      var _this2 = this;\n\n      var _props = this.props,\n          yearSelectOffset = _props.yearSelectOffset,\n          yearSelectTotal = _props.yearSelectTotal,\n          locale = _props.locale,\n          prefixCls = _props.prefixCls,\n          fullscreen = _props.fullscreen,\n          validRange = _props.validRange;\n      var start = year - yearSelectOffset;\n      var end = start + yearSelectTotal;\n\n      if (validRange) {\n        start = validRange[0].get('year');\n        end = validRange[1].get('year') + 1;\n      }\n\n      var suffix = locale.year === '年' ? '年' : '';\n      var options = [];\n\n      for (var index = start; index < end; index++) {\n        options.push(React.createElement(Option, {\n          key: '' + index\n        }, index + suffix));\n      }\n\n      return React.createElement(Select, {\n        size: fullscreen ? 'default' : 'small',\n        dropdownMatchSelectWidth: false,\n        className: prefixCls + '-year-select',\n        onChange: this.onYearChange,\n        value: String(year),\n        getPopupContainer: function getPopupContainer() {\n          return _this2.calenderHeaderNode;\n        }\n      }, options);\n    }\n  }, {\n    key: 'getMonthsLocale',\n    value: function getMonthsLocale(value) {\n      var current = value.clone();\n      var localeData = value.localeData();\n      var months = [];\n\n      for (var i = 0; i < 12; i++) {\n        current.month(i);\n        months.push(localeData.monthsShort(current));\n      }\n\n      return months;\n    }\n  }, {\n    key: 'getMonthSelectElement',\n    value: function getMonthSelectElement(month, months) {\n      var _this3 = this;\n\n      var props = this.props;\n      var prefixCls = props.prefixCls,\n          fullscreen = props.fullscreen,\n          validRange = props.validRange,\n          value = props.value;\n      var options = [];\n      var start = 0;\n      var end = 12;\n\n      if (validRange) {\n        var _validRange2 = _slicedToArray(validRange, 2),\n            rangeStart = _validRange2[0],\n            rangeEnd = _validRange2[1];\n\n        var currentYear = value.get('year');\n\n        if (rangeEnd.get('year') === currentYear) {\n          end = rangeEnd.get('month') + 1;\n        } else if (rangeStart.get('year') === currentYear) {\n          start = rangeStart.get('month');\n        }\n      }\n\n      for (var index = start; index < end; index++) {\n        options.push(React.createElement(Option, {\n          key: '' + index\n        }, months[index]));\n      }\n\n      return React.createElement(Select, {\n        size: fullscreen ? 'default' : 'small',\n        dropdownMatchSelectWidth: false,\n        className: prefixCls + '-month-select',\n        value: String(month),\n        onChange: this.onMonthChange,\n        getPopupContainer: function getPopupContainer() {\n          return _this3.calenderHeaderNode;\n        }\n      }, options);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          type = _props2.type,\n          value = _props2.value,\n          prefixCls = _props2.prefixCls,\n          locale = _props2.locale,\n          fullscreen = _props2.fullscreen;\n      var yearSelect = this.getYearSelectElement(value.year());\n      var monthSelect = type === 'date' ? this.getMonthSelectElement(value.month(), this.getMonthsLocale(value)) : null;\n      var size = fullscreen ? 'default' : 'small';\n      var typeSwitch = React.createElement(Group, {\n        onChange: this.onTypeChange,\n        value: type,\n        size: size\n      }, React.createElement(Button, {\n        value: 'date'\n      }, locale.month), React.createElement(Button, {\n        value: 'month'\n      }, locale.year));\n      return React.createElement('div', {\n        className: prefixCls + '-header',\n        ref: this.getCalenderHeaderNode\n      }, yearSelect, monthSelect, typeSwitch);\n    }\n  }]);\n\n  return Header;\n}(React.Component);\n\nexport default Header;\nHeader.defaultProps = {\n  prefixCls: PREFIX_CLS + '-header',\n  yearSelectOffset: 10,\n  yearSelectTotal: 20\n};","map":null,"metadata":{},"sourceType":"module"}