{"version":3,"sources":["../source/parseIncompletePhoneNumber.js"],"names":["parseIncompletePhoneNumber","parsePhoneNumberCharacter","string","result","split","character","value"],"mappings":";;;;;kBAiBwBA,0B;QA0BRC,yB,GAAAA,yB;;AA3ChB;;AAEA;;;;;;;;;;;;;;;AAee,SAASD,0BAAT,CAAoCE,MAApC,EACf;AACC,KAAIC,SAAS,EAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAwBD,OAAOE,KAAP,CAAa,EAAb,CAAxB,kHACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MADWC,SACX;;AACCF,YAAUF,0BAA0BI,SAA1B,EAAqCF,MAArC,KAAgD,EAA1D;AACA;;AAED,QAAOA,MAAP;AACA;;AAED;;;;;;;;AAQO,SAASF,yBAAT,CAAmCI,SAAnC,EAA8CC,KAA9C,EACP;AACC;AACA,KAAID,cAAc,GAAlB,EACA;AACC;AACA;AACA,MAAIC,KAAJ,EAAW;AACV;AACA;;AAED,SAAO,GAAP;AACA;;AAED;AACA,QAAO,wBAAWD,SAAX,CAAP;AACA","file":"parseIncompletePhoneNumber.js","sourcesContent":["import { parseDigit } from './common'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string)\r\n{\r\n\tlet result = ''\r\n\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value)\r\n{\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+')\r\n\t{\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\treturn '+'\r\n\t}\r\n\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}"]}