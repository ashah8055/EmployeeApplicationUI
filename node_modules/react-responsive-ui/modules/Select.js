'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ExpandableList = require('./ExpandableList');

var _ExpandableList2 = _interopRequireDefault(_ExpandableList);

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

var _TextInputLabel = require('./TextInputLabel');

var _TextInputLabel2 = _interopRequireDefault(_TextInputLabel);

var _Ellipsis = require('./Ellipsis');

var _Ellipsis2 = _interopRequireDefault(_Ellipsis);

var _Divider = require('./Divider');

var _Divider2 = _interopRequireDefault(_Divider);

var _reduxForm = require('./utility/redux-form');

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var empty_value_option_value = '';

var Select = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {
	_inherits(Select, _PureComponent);

	function Select() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Select);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Select.__proto__ || Object.getPrototypeOf(Select)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.focus = function () {
			return _this.selectButton.focus();
		}, _this.onCollapse = function (_ref2) {
			var focusOut = _ref2.focusOut;

			_this.setState({ isExpanded: false });

			if (!focusOut) {
				_this.focus();
			}
		}, _this.onExpand = function () {
			var onFocus = _this.props.onFocus;


			if (onFocus) {
				onFocus();
			}

			_this.setState({ isExpanded: true });
		}, _this.expand = function () {
			return _this.list.expand();
		}, _this.collapse = function () {
			return _this.list.collapse();
		}, _this.toggle = function () {
			return _this.list.toggle();
		}, _this.storeListRef = function (ref) {
			return _this.list = ref;
		}, _this.storeSelectButton = function (node) {
			return _this.selectButton = node;
		}, _this.storeInputComponentNode = function (node) {
			return _this.inputComponentNode = node;
		}, _this.getSelectButton = function () {
			return _this.selectButton;
		}, _this.nativeSelectOnKeyDown = function (event) {
			if (_this.shouldShowOptionsList()) {
				_this.focus();
				_this.onKeyDownFromNativeSelect = true;
				_this.onKeyDown(event);
			}
		}, _this.nativeSelectOnMouseDown = function (event) {
			if (_this.shouldShowOptionsList()) {
				event.preventDefault();
				_this.focus();
				_this.toggle();
			}
		}, _this.nativeSelectOnChange = function (event) {
			var value = event.target.value;

			// Convert back from an empty string to `undefined`
			if (value === empty_value_option_value) {
				// `null` is not accounted for, use `undefined` instead.
				value = undefined;
			}

			_this.setValue(value);
		}, _this.onClick = function (event) {
			var disabled = _this.props.disabled;


			if (!disabled) {
				_this.toggle();
			}
		}, _this.onKeyDown = function (event) {
			var _this$props = _this.props,
			    disabled = _this$props.disabled,
			    value = _this$props.value,
			    required = _this$props.required;
			var isExpanded = _this.state.isExpanded;

			// Reset "event came from native select" flag.

			var fromNativeSelect = _this.onKeyDownFromNativeSelect;
			_this.onKeyDownFromNativeSelect = false;

			if (disabled) {
				return;
			}

			if (event.defaultPrevented) {
				return;
			}

			if (!isExpanded) {
				if ((0, _dom.submitFormOnCtrlEnter)(event, _this.selectButton)) {
					return;
				}
			}

			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			switch (event.keyCode) {
				// "Up" arrow.
				// Select the previous item (if present).
				case 38:
				// "Down" arrow.
				// Select the next item (if present).
				case 40:
					return _this.list.onKeyDown(event);

				// "Enter".
				case 13:
					// Submit containing `<form/>`.
					// Expand otherwise.
					if (required || !(0, _dom.submitContainingForm)(_this.selectButton)) {
						_this.expand();
					}
					return event.preventDefault();

				// "Spacebar".
				case 32:
					if (fromNativeSelect) {
						// Known bug:
						// Firefox is stubborn with Spacebar key not being "preventDefault"ed.
						// https://stackoverflow.com/questions/15141398/cannot-preventdefault-via-firefox-on-a-select
						event.preventDefault();

						_this.expand();
					}
					return;
			}
		}, _this.setValue = function (newValue) {
			var _this$props2 = _this.props,
			    value = _this$props2.value,
			    onChange = _this$props2.onChange;

			// Call `onChange` only if the `value` did change.

			if (newValue !== value) {
				onChange(newValue);
			}
		}, _this.onBlur = function (event) {
			var _this$props3 = _this.props,
			    onBlur = _this$props3.onBlur,
			    value = _this$props3.value;


			if (_this.list) {
				_this.list.onBlur(event);
			}

			// When the `<button/>` was focused out
			// while there was no list being shown.
			if (onBlur && _this.list && _this.list.expandable && !_this.list.expandable.container) {
				(0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);
			}
		}, _this.onFocusOut = function (event) {
			var _this$props4 = _this.props,
			    onBlur = _this$props4.onBlur,
			    value = _this$props4.value,
			    native = _this$props4.native,
			    nativeExpanded = _this$props4.nativeExpanded;


			if (!native && !nativeExpanded) {
				_this.collapse();
			}

			if (onBlur) {
				(0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Select, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    id = _props.id,
			    upward = _props.upward,
			    icon = _props.icon,
			    compact = _props.compact,
			    scroll = _props.scroll,
			    scrollMaxItems = _props.scrollMaxItems,
			    scrollIntoView = _props.scrollIntoView,
			    alignment = _props.alignment,
			    saveOnIcons = _props.saveOnIcons,
			    native = _props.native,
			    disabled = _props.disabled,
			    required = _props.required,
			    placeholder = _props.placeholder,
			    options = _props.options,
			    value = _props.value,
			    onChange = _props.onChange,
			    indicateInvalid = _props.indicateInvalid,
			    error = _props.error,
			    closeButtonIcon = _props.closeButtonIcon,
			    closeLabel = _props.closeLabel,
			    wait = _props.wait,
			    style = _props.style,
			    className = _props.className;
			var isExpanded = this.state.isExpanded;


			var containerStyle = { textAlign: alignment };

			var label = this.getLabel();

			return _react2.default.createElement(
				'div',
				{
					style: style ? _extends({}, containerStyle, style) : containerStyle,
					className: (0, _classnames2.default)('rrui__select', {
						'rrui__select--compact': compact || icon
					}, className) },
				_react2.default.createElement(
					'div',
					{
						ref: this.storeInputComponentNode,
						className: 'rrui__input' },
					wait && _react2.default.createElement(_Ellipsis2.default, null),
					!native && this.renderNativeSelect(),
					!native && this.renderSelectButton(),
					label && _react2.default.createElement(
						_TextInputLabel2.default,
						{
							id: id,
							value: value,
							required: required,
							invalid: indicateInvalid && error,
							floats: false },
						label
					),
					this.shouldShowOptionsList() && _react2.default.createElement(
						_ExpandableList2.default,
						{
							ref: this.storeListRef,
							upward: upward,
							alignment: alignment,
							scrollIntoView: scrollIntoView,
							scrollMaxItems: scroll === false ? 0 : scrollMaxItems,
							value: value,
							onChange: this.setValue,
							onCollapse: this.onCollapse,
							onExpand: this.onExpand,
							getTogglerNode: this.getSelectButton,
							onFocusOut: this.onFocusOut,
							onTapOutside: this.collapse,
							closeButtonIcon: closeButtonIcon,
							closeLabel: closeLabel,
							className: (0, _classnames2.default)('rrui__shadow', 'rrui__options-list', {
								'rrui__options-list--left-aligned': alignment === 'left',
								'rrui__options-list--right-aligned': alignment === 'right'
							}) },
						options.map(function (option, i) {
							return _react2.default.createElement(
								_List2.default.Item,
								{
									key: i,
									value: option.value,
									icon: option.divider || saveOnIcons ? undefined : option.icon },
								option.divider ? _react2.default.createElement(_Divider2.default, null) : option.content ? option.content(option) : option.label
							);
						})
					),
					native && this.renderNativeSelect()
				),
				indicateInvalid && error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);
		}
	}, {
		key: 'renderSelectButton',
		value: function renderSelectButton() {
			var _props2 = this.props,
			    wait = _props2.wait,
			    value = _props2.value,
			    onFocus = _props2.onFocus,
			    disabled = _props2.disabled,
			    required = _props2.required,
			    icon = _props2.icon,
			    title = _props2.title,
			    ariaLabel = _props2.ariaLabel,
			    toggleClassName = _props2.toggleClassName,
			    indicateInvalid = _props2.indicateInvalid,
			    error = _props2.error;
			var isExpanded = this.state.isExpanded;


			var selected = this.getSelectedOption();

			var selectedOptionLabel = selected && selected.label || this.getLabel() || this.getPlaceholder();
			var showIconOnly = icon && selected && selected.icon;

			return _react2.default.createElement(
				'button',
				{
					ref: this.storeSelectButton,
					type: 'button',
					disabled: disabled,
					onClick: this.onClick,
					onKeyDown: this.onKeyDown,
					onFocus: onFocus,
					onBlur: this.onBlur,
					tabIndex: -1,
					title: title,
					'aria-label': ariaLabel,
					className: (0, _classnames2.default)('rrui__input-element', 'rrui__button-reset', 'rrui__select__button', toggleClassName, {
						'rrui__select__button--empty': isEmptyValue(value) && !this.hasEmptyOption(),
						'rrui__select__button--invalid': indicateInvalid && error,
						'rrui__select__button--disabled': disabled
					}) },
				_react2.default.createElement(
					'div',
					{ className: 'rrui__select__selected-content' },
					_react2.default.createElement(
						'div',
						{
							className: (0, _classnames2.default)('rrui__select__selected-label', {
								'rrui__select__selected-label--required': !this.getLabel() && required && isEmptyValue(value)
							}) },
						showIconOnly ? _react2.default.createElement(selected.icon, { value: value, label: selectedOptionLabel }) : selectedOptionLabel
					),
					!wait && _react2.default.createElement('div', { className: 'rrui__select__arrow' })
				)
			);
		}
	}, {
		key: 'renderNativeSelect',
		value: function renderNativeSelect() {
			var _props3 = this.props,
			    id = _props3.id,
			    name = _props3.name,
			    value = _props3.value,
			    label = _props3.label,
			    disabled = _props3.disabled,
			    native = _props3.native,
			    error = _props3.error,
			    indicateInvalid = _props3.indicateInvalid,
			    tabIndex = _props3.tabIndex;


			return _react2.default.createElement(
				'select',
				{
					ref: this.storeNativeSelect,
					id: id,
					name: name,
					value: isEmptyValue(value) ? empty_value_option_value : value,
					disabled: disabled,
					onKeyDown: this.nativeSelectOnKeyDown,
					onMouseDown: this.nativeSelectOnMouseDown,
					onChange: this.nativeSelectOnChange,
					tabIndex: tabIndex,
					className: (0, _classnames2.default)('rrui__select__native', {
						'rrui__select__native--overlay': !native,
						'rrui__select__native--invalid': indicateInvalid && error
					}) },
				this.renderNativeSelectOptions()
			);
		}
	}, {
		key: 'renderNativeSelectOptions',
		value: function renderNativeSelectOptions() {
			var _this2 = this;

			var _props4 = this.props,
			    options = _props4.options,
			    value = _props4.value,
			    placeholder = _props4.placeholder;


			var empty_option_present = false;

			var rendered_options = options.map(function (option) {
				var value = option.value,
				    label = option.label;


				if (isEmptyValue(value)) {
					empty_option_present = true;
					value = empty_value_option_value;
				}

				return _this2.renderNativeSelectOption(value, label);
			});

			if (isEmptyValue(value) && !empty_option_present) {
				rendered_options.unshift(this.renderNativeSelectOption(undefined, placeholder, true));
			}

			return rendered_options;
		}
	}, {
		key: 'renderNativeSelectOption',
		value: function renderNativeSelectOption(value, label, nonSelectable) {
			return _react2.default.createElement(
				'option',
				{
					key: getOptionKey(value),
					value: isEmptyValue(value) ? '' : value,
					hidden: nonSelectable ? true : undefined,
					disabled: nonSelectable ? true : undefined,
					className: 'rrui__select__native-option' },
				label
			);
		}
	}, {
		key: 'hasEmptyOption',
		value: function hasEmptyOption() {
			var options = this.props.options;


			for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref3;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref3 = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref3 = _i.value;
				}

				var option = _ref3;

				if (isEmptyValue(option.value)) {
					return true;
				}
			}

			return false;
		}
	}, {
		key: 'getSelectedOption',
		value: function getSelectedOption() {
			var _props5 = this.props,
			    options = _props5.options,
			    value = _props5.value;


			for (var _iterator2 = options, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
				var _ref4;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref4 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref4 = _i2.value;
				}

				var option = _ref4;

				if (!option.divider && option.value === value) {
					return option;
				}
			}
		}
	}, {
		key: 'getLabel',
		value: function getLabel() {
			var _props6 = this.props,
			    label = _props6.label,
			    placeholder = _props6.placeholder,
			    value = _props6.value;


			if (isEmptyValue(value)) {
				if (placeholder) {
					return label;
				}
			} else {
				return label;
			}
		}
	}, {
		key: 'getPlaceholder',
		value: function getPlaceholder() {
			var _props7 = this.props,
			    label = _props7.label,
			    placeholder = _props7.placeholder,
			    value = _props7.value;


			if (isEmptyValue(value)) {
				return placeholder || label;
			}
		}
	}, {
		key: 'shouldShowOptionsList',
		value: function shouldShowOptionsList() {
			var _props8 = this.props,
			    native = _props8.native,
			    nativeExpanded = _props8.nativeExpanded;

			return !native && !nativeExpanded;
		}
	}]);

	return Select;
}(PureComponent), _class2.propTypes = {
	// A list of selectable options
	options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
		// Option value (may be `undefined`)
		value: _propTypes2.default.any,
		// Option label (may be `undefined`)
		label: _propTypes2.default.string,
		// Option icon
		icon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
		// Render custom content (a React component).
		// Receives `{ value, label }` properties.
		content: _propTypes2.default.func
	})).isRequired,

	// HTML form input `name` attribute
	name: _propTypes2.default.string,

	// Label which is placed above the select
	label: _propTypes2.default.string,

	// Placeholder (like "Choose")
	placeholder: _propTypes2.default.string,

	// Whether to use native `<select/>`
	native: _propTypes2.default.bool.isRequired,

	// Whether to use native `<select/>` when expanded
	nativeExpanded: _propTypes2.default.bool.isRequired,

	// Show icon only for selected item,
	// and only if `icon` is `true`.
	saveOnIcons: _propTypes2.default.bool.isRequired,

	// Disables this control
	disabled: _propTypes2.default.bool,

	// Set to `true` to mark the field as required
	required: _propTypes2.default.bool.isRequired,

	// Set to `true` to display the loading indicator
	wait: _propTypes2.default.bool.isRequired,

	// Selected option value
	value: _propTypes2.default.any,

	// Is called when an option is selected
	onChange: _propTypes2.default.func,

	// Is called when the select is focused.
	// Can be used for toggling `--focus` CSS class.
	// Not tested.
	// `event` argument can be `undefined`.
	onFocus: _propTypes2.default.func,

	// Is called when the select is blurred.
	// This `onBlur` interceptor is a workaround for `redux-form`,
	// so that it gets the parsed `value` in its `onBlur` handler,
	// not the formatted text.
	onBlur: _propTypes2.default.func,

	// If `scroll` is `false`, then options list
	// is not limited in height.
	// Is `true` by default (scrollable).
	scroll: _propTypes2.default.bool.isRequired,

	// Component CSS class
	className: _propTypes2.default.string,

	// `<button/>` toggler CSS class
	toggleClassName: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object,

	// If this flag is set to `true`,
	// and `icon` is specified for a selected option,
	// then the selected option will be displayed
	// as icon only, without the label.
	icon: _propTypes2.default.bool,

	// If this flag is set to `true`,
	// then it makes `<Select/>` not stretch itself
	// to 100% width by making it `inline-block`.
	// Is set to `true` when `icon` is `true`
	// because it makes sense.
	compact: _propTypes2.default.bool,

	// HTML `tabindex` attribute
	tabIndex: _propTypes2.default.number,

	// `aria-label` for the `<Select/>`'s `<button/>`
	ariaLabel: _propTypes2.default.string
}, _class2.defaultProps = {
	native: false,
	nativeExpanded: false,

	saveOnIcons: false,

	// Set to `true` to mark the field as required
	required: false,

	// Show `error` (if passed).
	indicateInvalid: true,

	// Set to `true` to display the loading indicator
	wait: false,

	// Will show scrollbar on overflow.
	scroll: true,

	alignment: 'left'
}, _temp2)) || _class;

// There can be an `undefined` value,
// so just `{ value }` won't do here.


exports.default = Select;
function getOptionKey(value) {
	return isEmptyValue(value) ? '@@rrui/empty' : value;
}

function isEmptyValue(value) {
	return value === null || value === undefined;
}
//# sourceMappingURL=Select.js.map