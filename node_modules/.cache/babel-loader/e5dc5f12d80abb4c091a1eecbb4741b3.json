{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport RcDropdown from 'rc-dropdown';\nimport classNames from 'classnames';\nimport warning from '../_util/warning';\nimport Icon from '../icon';\n\nvar Dropdown = function (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    _classCallCheck(this, Dropdown);\n\n    return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));\n  }\n\n  _createClass(Dropdown, [{\n    key: 'getTransitionName',\n    value: function getTransitionName() {\n      var _props = this.props,\n          _props$placement = _props.placement,\n          placement = _props$placement === undefined ? '' : _props$placement,\n          transitionName = _props.transitionName;\n\n      if (transitionName !== undefined) {\n        return transitionName;\n      }\n\n      if (placement.indexOf('top') >= 0) {\n        return 'slide-down';\n      }\n\n      return 'slide-up';\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var overlay = this.props.overlay;\n\n      if (overlay) {\n        var overlayProps = overlay.props;\n        warning(!overlayProps.mode || overlayProps.mode === 'vertical', 'mode=\"' + overlayProps.mode + '\" is not supported for Dropdown\\'s Menu.');\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          prefixCls = _props2.prefixCls,\n          overlayElements = _props2.overlay,\n          trigger = _props2.trigger,\n          disabled = _props2.disabled;\n      var child = React.Children.only(children);\n      var overlay = React.Children.only(overlayElements);\n      var dropdownTrigger = React.cloneElement(child, {\n        className: classNames(child.props.className, prefixCls + '-trigger'),\n        disabled: disabled\n      }); // menu cannot be selectable in dropdown defaultly\n      // menu should be focusable in dropdown defaultly\n\n      var _overlay$props = overlay.props,\n          _overlay$props$select = _overlay$props.selectable,\n          selectable = _overlay$props$select === undefined ? false : _overlay$props$select,\n          _overlay$props$focusa = _overlay$props.focusable,\n          focusable = _overlay$props$focusa === undefined ? true : _overlay$props$focusa;\n      var expandIcon = React.createElement('span', {\n        className: prefixCls + '-menu-submenu-arrow'\n      }, React.createElement(Icon, {\n        type: 'right',\n        className: prefixCls + '-menu-submenu-arrow-icon'\n      }));\n      var fixedModeOverlay = typeof overlay.type === 'string' ? overlay : React.cloneElement(overlay, {\n        mode: 'vertical',\n        selectable: selectable,\n        focusable: focusable,\n        expandIcon: expandIcon\n      });\n      var triggerActions = disabled ? [] : trigger;\n      var alignPoint = void 0;\n\n      if (triggerActions && triggerActions.indexOf('contextMenu') !== -1) {\n        alignPoint = true;\n      }\n\n      return React.createElement(RcDropdown, _extends({\n        alignPoint: alignPoint\n      }, this.props, {\n        transitionName: this.getTransitionName(),\n        trigger: triggerActions,\n        overlay: fixedModeOverlay\n      }), dropdownTrigger);\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\nexport default Dropdown;\nDropdown.defaultProps = {\n  prefixCls: 'ant-dropdown',\n  mouseEnterDelay: 0.15,\n  mouseLeaveDelay: 0.1,\n  placement: 'bottomLeft'\n};","map":null,"metadata":{},"sourceType":"module"}