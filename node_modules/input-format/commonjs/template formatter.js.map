{"version":3,"sources":["../source/template formatter.js"],"names":["template","placeholder","should_close_braces","text","value","characters_in_template","value_character_index","filled_in_template","split","character","length"],"mappings":";;;;;;kBAee,UAASA,QAAT,EACf;AAAA,KADkCC,WAClC,uEADgD,GAChD;AAAA,KADqDC,mBACrD;;AACC,KAAI,CAACF,QAAL,EACA;AACC,SAAO;AAAA,UAAU,EAAEG,MAAMC,KAAR,EAAV;AAAA,GAAP;AACA;;AAED,KAAMC,yBAAyB,+BAAiBJ,WAAjB,EAA8BD,QAA9B,CAA/B;;AAEA,QAAO,UAASI,KAAT,EACP;AACC,MAAI,CAACA,KAAL,EACA;AACC,UAAO,EAAED,MAAM,EAAR,EAAYH,kBAAZ,EAAP;AACA;;AAED,MAAIM,wBAAwB,CAA5B;AACA,MAAIC,qBAAqB,EAAzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAwBP,SAASQ,KAAT,CAAe,EAAf,CAAxB,kHACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,OADWC,SACX;;AACC,OAAIA,cAAcR,WAAlB,EACA;AACCM,0BAAsBE,SAAtB;AACA;AACA;;AAEDF,yBAAsBH,MAAME,qBAAN,CAAtB;AACAA;;AAEA;AACA;AACA;AACA;AACA,OAAIA,0BAA0BF,MAAMM,MAApC,EACA;AACC;AACA;AACA;AACA,QAAIN,MAAMM,MAAN,GAAeL,sBAAnB,EACA;AACC;AACA;AACD;AACD;;AAED,MAAIH,mBAAJ,EACA;AACCK,wBAAqB,2BAAaA,kBAAb,EAAiCP,QAAjC,CAArB;AACA;;AAED,SAAO,EAAEG,MAAMI,kBAAR,EAA4BP,kBAA5B,EAAP;AACA,EAjDD;AAkDA,C;;AA1ED;;AACA","file":"template formatter.js","sourcesContent":["import { count_occurences } from './helpers'\r\nimport close_braces from './close braces'\r\n\r\n// Takes a `template` where character placeholders\r\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\r\n//\r\n// Returns a function which takes `value` characters\r\n// and returns the `template` filled with those characters.\r\n// If the `template` can only be partially filled\r\n// then it is cut off.\r\n//\r\n// If `should_close_braces` is `true`,\r\n// then it will also make sure all dangling braces are closed,\r\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\r\n//\r\nexport default function(template, placeholder = 'x', should_close_braces)\r\n{\r\n\tif (!template)\r\n\t{\r\n\t\treturn value => ({ text: value })\r\n\t}\r\n\r\n\tconst characters_in_template = count_occurences(placeholder, template)\r\n\r\n\treturn function(value)\r\n\t{\r\n\t\tif (!value)\r\n\t\t{\r\n\t\t\treturn { text: '', template }\r\n\t\t}\r\n\r\n\t\tlet value_character_index = 0\r\n\t\tlet filled_in_template = ''\r\n\r\n\t\t// Using `.split('')` here instead of normal `for ... of`\r\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t\t// (the ones consisting of four bytes)\r\n\t\t// but template placeholder characters don't fall into that range\r\n\t\t// and appending UTF-8 characters to a string in parts still works.\r\n\t\tfor (const character of template.split(''))\r\n\t\t{\r\n\t\t\tif (character !== placeholder)\r\n\t\t\t{\r\n\t\t\t\tfilled_in_template += character\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tfilled_in_template += value[value_character_index]\r\n\t\t\tvalue_character_index++\r\n\r\n\t\t\t// If the last available value character has been filled in,\r\n\t\t\t// then return the filled in template\r\n\t\t\t// (either trim the right part or retain it,\r\n\t\t\t//  if no more character placeholders in there)\r\n\t\t\tif (value_character_index === value.length)\r\n\t\t\t{\r\n\t\t\t\t// If there are more character placeholders\r\n\t\t\t\t// in the right part of the template\r\n\t\t\t\t// then simply trim it.\r\n\t\t\t\tif (value.length < characters_in_template)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (should_close_braces)\r\n\t\t{\r\n\t\t\tfilled_in_template = close_braces(filled_in_template, template)\r\n\t\t}\r\n\r\n\t\treturn { text: filled_in_template, template }\r\n\t}\r\n}"]}