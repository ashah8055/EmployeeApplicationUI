'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDayPicker = require('react-day-picker');

var _reactDayPicker2 = _interopRequireDefault(_reactDayPicker);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextInputInputComponent = require('./TextInputInputComponent');

var _TextInputInputComponent2 = _interopRequireDefault(_TextInputInputComponent);

var _Expandable = require('./Expandable');

var _Expandable2 = _interopRequireDefault(_Expandable);

var _YearMonthSelect = require('./YearMonthSelect');

var _YearMonthSelect2 = _interopRequireDefault(_YearMonthSelect);

var _reduxForm = require('./utility/redux-form');

var _focus = require('./utility/focus');

var _dom = require('./utility/dom');

var _date = require('./utility/date');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

// Derived from `react-day-picker` example
// http://react-day-picker.js.org/examples/?overlay
var DatePicker = (_temp2 = _class = function (_PureComponent) {
	_inherits(DatePicker, _PureComponent);

	function DatePicker() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, DatePicker);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			selected_day: null
		}, _this.expand = function () {
			return _this.expandable.expand();
		}, _this.collapse = function () {
			return _this.expandable.collapse();
		}, _this.toggle = function () {
			return _this.expandable.toggle();
		}, _this.isExpanded = function () {
			return _this.expandable.isExpanded();
		}, _this.focus = function () {
			return _this.input.focus();
		}, _this.userHasJustChangedYearOrMonth = function () {
			_this._userHasJustChangedYearOrMonth = true;
			clearTimeout(_this.userHasJustChangedYearOrMonthTimer);
			_this.userHasJustChangedYearOrMonthTimer = setTimeout(function () {
				return _this._userHasJustChangedYearOrMonth = false;
			}, 50);
		}, _this.onInputFocus = function (event) {
			var onFocus = _this.props.onFocus;


			if (onFocus) {
				onFocus(event);
			}

			if (!_this.focusAfterDaySelected) {
				_this.expand();
			}
		}, _this.onExpand = function () {
			var _this$props = _this.props,
			    value = _this$props.value,
			    format = _this$props.format,
			    onToggle = _this$props.onToggle;


			_this.setState({
				// Reset month for some unknown reason.
				month: undefined,

				// Must re-calculate `text_value` on each "expand"
				// because it's being reset on each "collapse".
				text_value: (0, _date.formatDate)(value, format)
			});
		}, _this.onExpanded = function () {
			var value = _this.props.value;

			// Toggling the calendar in a timeout
			// in order for iOS scroll not to get "janky"
			// when `<DatePicker/>` gets focused.
			// (for some unknown reason)

			setTimeout(function () {
				_this.setState({
					month: value ? (0, _date.normalizeDate)(value) : new Date()
				});
			}, 0);
		}, _this.onCollapse = function () {
			_this.setState({
				text_value: undefined
			});

			// `onChange` fires on calendar day `click`
			// but the `value` hasn't neccessarily been updated yet,
			// therefore, say, if `value` was not set
			// and a user selects a day in the calendar
			// then the `value` is technically still `undefined`
			// so can't just set `state.text_value = formatDate(value)` here.
			//
			// Analogous, `setState({ text_value })` has been called
			// in calendar day `onClick` handler but `state.text_value`
			// hasn't neccessarily been updated yet.
			//
			// Still must validate (recompute) `text_value`
			// upon expanding the `<DatePicker/>`, for example, on `<input/>` blur
			// in cases when a user manually typed in an incomplete date and then tabbed away.
		}, _this.onContainerKeyDown = function (event) {
			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			switch (event.keyCode) {
				// "Escape".
				//
				// Collapse.
				//
				// Maybe add this kind of support for "Escape" key in some future:
				//  hiding the item list, cancelling current item selection process
				//  and restoring the selection present before the item list was toggled.
				//
				case 27:
					event.preventDefault();
					// Collapse the list if it's expanded.
					return _this.collapse();
			}
		}, _this.onInputKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if (event.defaultPrevented) {
				return;
			}

			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			switch (event.keyCode) {
				// On "Enter".
				case 13:
					if (_this.isExpanded()) {
						// Don't "prevent default" here
						// in order for a user to be able
						// to submit an enclosing form on "Enter".
						_this.collapse();
					}
					return;

				// On Spacebar.
				case 32:
					event.preventDefault();
					return _this.toggle();

				// On "Up" arrow.
				case 38:
					// Collapse the calendar (if expanded).
					if (_this.isExpanded()) {
						event.preventDefault();
						_this.collapse();
					}
					return;

				// On "Down" arrow.
				case 40:
					// Expand the calendar (if collapsed).
					if (!_this.isExpanded()) {
						event.preventDefault();
						_this.expand();
					}
					return;
			}
		}, _this.onInputChange = function (event) {
			var _this$props2 = _this.props,
			    onChange = _this$props2.onChange,
			    previous_value = _this$props2.value,
			    format = _this$props2.format,
			    noon = _this$props2.noon,
			    utc = _this$props2.utc,
			    disabledDays = _this$props2.disabledDays;

			// Extract `value` from the argument
			// of this `onChange` listener
			// (for convenience)

			var value = event;

			if (event.target !== undefined) {
				value = event.target.value;
			}

			value = value.trim();

			// When the date is erased, reset it.
			if (!value) {
				// Call `onChange` only if `value` did actually change
				if (previous_value) {
					onChange(undefined);
				}

				return _this.setState({ text_value: '' });
			}

			value = (0, _date.trimInvalidPart)(value, format);

			var selected_day = (0, _date.parseDate)(value, format, noon, utc);

			// If the date input is unparseable,
			// or if it's one of the disabled days,
			// then don't change the selected date.
			if (!selected_day || disabledDays && _reactDayPicker.ModifiersUtils.dayMatchesModifier(selected_day, disabledDays)) {
				return _this.setState({ text_value: value });
			}

			// Call `onChange` only if `value` did actually change
			if (!previous_value || previous_value.getTime() !== selected_day.getTime()) {
				onChange(selected_day);
			}

			_this.setState({
				text_value: value
			}, function () {
				return _this.calendar && _this.calendar.showMonth(selected_day);
			});
		}, _this.onDayClick = function (selected_day, _ref2) {
			var disabled = _ref2.disabled;
			var _this$props3 = _this.props,
			    format = _this$props3.format,
			    onChange = _this$props3.onChange,
			    previous_value = _this$props3.value,
			    noon = _this$props3.noon,
			    utc = _this$props3.utc;

			// If the day clicked is disabled then do nothing.

			if (disabled) {
				return;
			}

			// https://github.com/gpbl/react-day-picker/issues/473
			// By default the `selected_day` has time
			// set to `12:00` of the current time zone.
			// These extra 12 hours do make sense and
			// do help make things less weird.
			//
			// These extra 12 hours are a hack to make things
			// a little bit less weird when rendering parsed dates.
			// E.g. if a date `Jan 1st, 2017` gets parsed as
			// `Jan 1st, 2017, 00:00 UTC+0` (England) then when displayed in the US
			// it would show up as `Dec 31st, 2016, 19:00 UTC-05` (Austin, Texas).
			// That would be weird for a website user.
			// Therefore this extra 12-hour padding is added
			// to compensate for the most weird cases like this
			// for adjacent countries / neighbours / same continent countries.
			//
			// So `selected_day` is in the user's time zone and the time is `12:00`.

			if (!noon) {
				// Here I strip those 12 hours from the `selected_day`
				// so the time becomes `00:00` in the user's time zone.
				//
				// (`selected_day` is the date in the user's time zone)
				// (`selected_day.getDate()` returns the day in the user's time zone)
				// (`new Date(year, month, day)` creates a date in the user's time zone)
				//
				selected_day = new Date(selected_day.getFullYear(), selected_day.getMonth(), selected_day.getDate());
			}

			if (utc) {
				// Converts timezone to UTC while preserving the same time
				selected_day = convert_to_utc_timezone(selected_day);
			}

			// `onChange` fires but the `value`
			// hasn't neccessarily been updated yet.
			//
			// Call `onChange` only if `value` did actually change.
			//
			if (!previous_value || previous_value.getTime() !== selected_day.getTime()) {
				onChange(selected_day);
			}

			// Hide the calendar
			_this.collapse();

			// Focus the `<input/>`.
			// (if not in "input overlay" mode for mobile devices).
			if (getComputedStyle(_this.inputOverlay).display === 'none') {
				_this.focusAfterDaySelected = true;
				_this.input.focus();

				// For some reason in IE 11 `onFocus` on `<input/>` is not called immediately.
				if ((0, _dom.isInternetExplorer)()) {
					setTimeout(function () {
						return _this.focusAfterDaySelected = false;
					}, 0);
				} else {
					_this.focusAfterDaySelected = false;
				}
			}
		}, _this.onMonthChange = function (month) {
			_this.setState({ month: month });
		}, _this.onBlur = function (event) {
			clearTimeout(_this.blurTimer);
			_this.blurTimer = (0, _focus.onBlur)(event, _this.onFocusOut, function () {
				return _this.container;
			}, function () {
				return _this.input;
			}, _this.preventBlur);
		}, _this.onFocusOut = function (event) {
			_this.collapse();

			var _this$props4 = _this.props,
			    onBlur = _this$props4.onBlur,
			    value = _this$props4.value;


			if (onBlur) {
				(0, _reduxForm.onBlurForReduxForm)(onBlur, event, value);
			}
		}, _this.preventBlur = function () {
			// A hack for iOS when it collapses
			// the calendar after selecting a year/month.
			if (_this._userHasJustChangedYearOrMonth) {
				_this.focus();
				return true;
			}
		}, _this.getContainerNode = function () {
			return _this.container;
		}, _this.storeContainerNode = function (node) {
			return _this.container = node;
		}, _this.storeExpandableRef = function (ref) {
			return _this.expandable = ref;
		}, _this.storeCalendarComponent = function (ref) {
			return _this.calendar = ref;
		}, _this.storeInputOverlayNode = function (node) {
			return _this.inputOverlay = node;
		}, _this.storeInputNode = function (node) {
			return _this.input = node;
		}, _this.storeInputContainerNode = function (node) {
			return _this.inputContainer = node;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(DatePicker, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			// Set "previous" and "next" buttons untabbable
			// so that a Tab out of the `<input/>` field
			// moves cursor not inside to these buttons
			// but rather to the next form input.
			//
			// (rewritten)
			// Requires ES6 Symbol.Iterator polyfill.
			// for (const button of calendar.querySelectorAll('.DayPicker-NavButton'))
			//
			for (var _iterator = [].slice.call(this.container.querySelectorAll('.DayPicker-NavButton')), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref3;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref3 = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref3 = _i.value;
				}

				var button = _ref3;

				button.removeAttribute('tabindex');
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.userHasJustChangedYearOrMonthTimer);
		}

		// Cancels textual date editing.


		// onCalendarKeyDown = (event) =>
		// {
		// 	switch (event)
		// 	{
		// 		// The next year is selected on "Up" arrow,
		// 		// so `.preventDefault()` it to prevent page scrolling.
		// 		// https://github.com/gpbl/react-day-picker/issues/273
		// 		case 38:
		// 			event.preventDefault()
		// 			return
		//
		// 		// The previous year is selected on "Down" arrow,
		// 		// so `.preventDefault()` it to prevent page scrolling.
		// 		// https://github.com/gpbl/react-day-picker/issues/273
		// 		case 40:
		// 			event.preventDefault()
		// 			return
		// 	}
		// }

	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.blurTimer);
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    id = _props.id,
			    format = _props.format,
			    value = _props.value,
			    error = _props.error,
			    indicateInvalid = _props.indicateInvalid,
			    disabledDays = _props.disabledDays,
			    selectYearsIntoPast = _props.selectYearsIntoPast,
			    selectYearsIntoFuture = _props.selectYearsIntoFuture,
			    locale = _props.locale,
			    localeUtils = _props.localeUtils,
			    months = _props.months,
			    weekdaysShort = _props.weekdaysShort,
			    weekdaysLong = _props.weekdaysLong,
			    firstDayOfWeek = _props.firstDayOfWeek,
			    disabled = _props.disabled,
			    required = _props.required,
			    label = _props.label,
			    placeholder = _props.placeholder,
			    waitForKeyboardSlideIn = _props.waitForKeyboardSlideIn,
			    keyboardSlideInAnimationDuration = _props.keyboardSlideInAnimationDuration,
			    closeLabel = _props.closeLabel,
			    CloseButtonIcon = _props.closeButtonIcon,
			    icon = _props.icon,
			    className = _props.className,
			    style = _props.style;
			var _state = this.state,
			    text_value = _state.text_value,
			    expanded = _state.expanded,
			    month = _state.month;

			// `<input type="date"/>` renders a browser-specific date picker
			// which can not be turned off using a simple HTML attribute
			// and also date format is not customizable,
			// therefore just using `<input type="text"/>` here

			// "MM/DD/YYYY"

			var formatHint = typeof format === 'string' ? format : undefined;

			var captionElement = void 0;

			if (selectYearsIntoPast || selectYearsIntoFuture) {
				captionElement = _react2.default.createElement(_YearMonthSelect2.default, {
					focus: this.focus,
					userHasJustChangedYearOrMonth: this.userHasJustChangedYearOrMonth,
					selectedDay: value,
					onChange: this.onMonthChange,
					selectYearsIntoPast: selectYearsIntoPast,
					selectYearsIntoFuture: selectYearsIntoFuture });
			}

			return _react2.default.createElement(
				'div',
				{
					ref: this.storeContainerNode,
					onKeyDown: this.onContainerKeyDown,
					onBlur: this.onBlur,
					className: (0, _classnames2.default)('rrui__date-picker', className, {
						'rrui__date-picker--disabled': disabled
					}),
					style: style },
				_react2.default.createElement(
					_TextInputInputComponent2.default,
					{
						id: id,
						containerRef: this.storeInputContainerNode,
						inputRef: this.storeInputNode,
						required: required,
						error: error,
						indicateInvalid: indicateInvalid,
						label: label,
						placeholder: label ? placeholder : placeholder || formatHint,
						disabled: disabled,
						value: text_value !== undefined ? text_value : (0, _date.formatDate)(value, format),
						onKeyDown: this.onInputKeyDown,
						onChange: this.onInputChange,
						onFocus: this.onInputFocus,
						onClick: this.expand },
					_react2.default.createElement('div', {
						ref: this.storeInputOverlayNode,
						onClick: this.toggle,
						className: 'rrui__date-picker__input-overlay' }),
					icon && _react2.default.createElement(
						'div',
						{
							onClick: this.toggle,
							className: 'rrui__date-picker__icon' },
						icon()
					),
					_react2.default.createElement(
						_Expandable2.default,
						{
							ref: this.storeExpandableRef,
							onExpand: this.onExpand,
							onExpanded: this.onExpanded,
							onCollapse: this.onCollapse,
							onTapOutside: this.collapse,
							getTogglerNode: this.getContainerNode,
							scrollIntoViewDelay: waitForKeyboardSlideIn ? keyboardSlideInAnimationDuration : undefined },
						_react2.default.createElement(_reactDayPicker2.default, {
							ref: this.storeCalendarComponent,
							month: month,
							onMonthChange: this.onMonthChange,
							locale: locale,
							localeUtils: localeUtils,
							months: months,
							weekdaysLong: weekdaysLong,
							weekdaysShort: weekdaysShort,
							firstDayOfWeek: firstDayOfWeek,
							onDayClick: this.onDayClick,
							selectedDays: (0, _date.normalizeDate)(value),
							disabledDays: disabledDays,
							captionElement: captionElement,
							tabIndex: -1,
							className: 'rrui__date-picker__calendar' })
					)
				),
				indicateInvalid && error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);
		}
	}]);

	return DatePicker;
}(PureComponent), _class.propTypes = {
	// An optional label placed on top of the input field
	label: _propTypes2.default.string,

	// `<input/>` placeholder
	placeholder: _propTypes2.default.string,

	// First day of week.
	// `0` means "Sunday", `1` means "Monday", etc.
	// (is `0` by default)
	// http://react-day-picker.js.org/docs/localization/
	firstDayOfWeek: _propTypes2.default.number.isRequired,

	// `react-day-picker` `locale`.
	// http://react-day-picker.js.org/docs/localization/
	locale: _propTypes2.default.string,

	// `react-day-picker` `localeUtils`.
	// http://react-day-picker.js.org/docs/localization/
	localeUtils: _propTypes2.default.object,

	// Month labels.
	// http://react-day-picker.js.org/docs/localization/
	months: _propTypes2.default.arrayOf(_propTypes2.default.string),

	// Long weekday labels.
	// http://react-day-picker.js.org/docs/localization/
	weekdaysLong: _propTypes2.default.arrayOf(_propTypes2.default.string),

	// Short weekday labels.
	// http://react-day-picker.js.org/docs/localization/
	weekdaysShort: _propTypes2.default.arrayOf(_propTypes2.default.string),

	// Date format. Only supports `DD`, `MM`, `YY` and `YYYY` for now (to reduce bundle size).
	// Can support custom localized formats, perhaps, when `date-fns@2` is released.
	// (is US `MM/DD/YYYY` by default)
	format: _propTypes2.default.string.isRequired,
	// format : PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,

	// Internationalization
	// locale : PropTypes.string,

	// The Date `value`
	value: _propTypes2.default.instanceOf(Date),

	// Writes new `value`.
	// The `value` is in the user's time zone and the time is `00:00`.
	onChange: _propTypes2.default.func.isRequired,

	// Is called when the date picker is either collapsed or expanded
	onToggle: _propTypes2.default.func,

	// Is called when the input is focused
	onFocus: _propTypes2.default.func,

	// Is called when the input is blurred.
	// This `onBlur` interceptor is a workaround for `redux-form`,
	// so that it gets the parsed `value` in its `onBlur` handler,
	// not the formatted text.
	onBlur: _propTypes2.default.func,

	// Disables the input
	disabled: _propTypes2.default.bool,

	// Set to `true` to mark the field as required
	required: _propTypes2.default.bool.isRequired,

	// HTML `<input/>` `name` attribute
	name: _propTypes2.default.string,

	// `react-day-picker`'s `disabledDays`.
	// http://react-day-picker.js.org/examples/disabled
	disabledDays: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.array]),

	// How much years back can a user navigate using the year `<select/>`
	selectYearsIntoPast: _propTypes2.default.number.isRequired,

	// How much years forward can a user navigate using the year `<select/>`
	selectYearsIntoFuture: _propTypes2.default.number.isRequired,

	// Whether dates being selected should be in UTC+0 timezone.
	// (is `false` by default)
	utc: _propTypes2.default.bool.isRequired,

	// Whether to set time to 12:00 for dates being selected.
	// (is `true` by default)
	noon: _propTypes2.default.bool.isRequired,

	// The calendar icon.
	icon: _propTypes2.default.func,

	waitForKeyboardSlideIn: _propTypes2.default.bool.isRequired,
	keyboardSlideInAnimationDuration: _propTypes2.default.number.isRequired,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
}, _class.defaultProps = {
	// Default US format
	format: 'MM/DD/YYYY',

	// locale: 'en-US',
	firstDayOfWeek: 0,

	// Set to `true` to mark the field as required
	required: false,

	// Show `error` (if passed).
	indicateInvalid: true,

	// Whether dates being selected should be in UTC+0 timezone
	utc: false,

	// Whether to set time to 12:00 for dates being selected
	noon: true,

	// A sensible default.
	selectYearsIntoPast: 100,
	selectYearsIntoFuture: 100,

	// Default calendar icon
	icon: function icon() {
		return _react2.default.createElement(
			'svg',
			{ style: iconStyle, viewBox: '0 0 32 32' },
			_react2.default.createElement('path', { d: ' M2 2 L10 2 L10 10 L2 10z M12 2 L20 2 L20 10 L12 10z M22 2 L30 2 L30 10 L22 10z M2 12 L10 12 L10 20 L2 20z M12 12 L20 12 L20 20 L12 20z M22 12 L30 12 L30 20 L22 20z M2 22 L10 22 L10 30 L2 30z M12 22 L20 22 L20 30 L12 30z M22 22 L30 22 L30 30 L22 30z ' })
		);
	},

	waitForKeyboardSlideIn: true,
	keyboardSlideInAnimationDuration: 300
}, _temp2);
exports.default = DatePicker;


var iconStyle = {
	width: '100%',
	height: '100%',
	fill: 'currentColor'
};
//# sourceMappingURL=DatePicker.js.map