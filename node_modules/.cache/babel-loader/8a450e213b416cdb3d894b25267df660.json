{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport calculateNodeHeight from './calculateNodeHeight';\n\nfunction onNextFrame(cb) {\n  if (window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n\n  return window.setTimeout(cb, 1);\n}\n\nfunction clearNextFrameAction(nextFrameId) {\n  if (window.cancelAnimationFrame) {\n    window.cancelAnimationFrame(nextFrameId);\n  } else {\n    window.clearTimeout(nextFrameId);\n  }\n}\n\nvar TextArea = function (_React$Component) {\n  _inherits(TextArea, _React$Component);\n\n  function TextArea() {\n    _classCallCheck(this, TextArea);\n\n    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).apply(this, arguments));\n\n    _this.state = {\n      textareaStyles: {}\n    };\n\n    _this.resizeTextarea = function () {\n      var autosize = _this.props.autosize;\n\n      if (!autosize || !_this.textAreaRef) {\n        return;\n      }\n\n      var minRows = autosize ? autosize.minRows : null;\n      var maxRows = autosize ? autosize.maxRows : null;\n      var textareaStyles = calculateNodeHeight(_this.textAreaRef, false, minRows, maxRows);\n\n      _this.setState({\n        textareaStyles: textareaStyles\n      });\n    };\n\n    _this.handleTextareaChange = function (e) {\n      if (!('value' in _this.props)) {\n        _this.resizeTextarea();\n      }\n\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(e);\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _this$props = _this.props,\n          onPressEnter = _this$props.onPressEnter,\n          onKeyDown = _this$props.onKeyDown;\n\n      if (e.keyCode === 13 && onPressEnter) {\n        onPressEnter(e);\n      }\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    };\n\n    _this.saveTextAreaRef = function (textArea) {\n      _this.textAreaRef = textArea;\n    };\n\n    return _this;\n  }\n\n  _createClass(TextArea, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.resizeTextarea();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // Re-render with the new content then recalculate the height as required.\n      if (this.props.value !== nextProps.value) {\n        if (this.nextFrameActionId) {\n          clearNextFrameAction(this.nextFrameActionId);\n        }\n\n        this.nextFrameActionId = onNextFrame(this.resizeTextarea);\n      }\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.textAreaRef.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.textAreaRef.blur();\n    }\n  }, {\n    key: 'getTextAreaClassName',\n    value: function getTextAreaClassName() {\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          className = _props.className,\n          disabled = _props.disabled;\n      return classNames(prefixCls, className, _defineProperty({}, prefixCls + '-disabled', disabled));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var otherProps = omit(props, ['prefixCls', 'onPressEnter', 'autosize']);\n\n      var style = _extends({}, props.style, this.state.textareaStyles); // Fix https://github.com/ant-design/ant-design/issues/6776\n      // Make sure it could be reset when using form.getFieldDecorator\n\n\n      if ('value' in otherProps) {\n        otherProps.value = otherProps.value || '';\n      }\n\n      return React.createElement('textarea', _extends({}, otherProps, {\n        className: this.getTextAreaClassName(),\n        style: style,\n        onKeyDown: this.handleKeyDown,\n        onChange: this.handleTextareaChange,\n        ref: this.saveTextAreaRef\n      }));\n    }\n  }]);\n\n  return TextArea;\n}(React.Component);\n\nexport default TextArea;\nTextArea.defaultProps = {\n  prefixCls: 'ant-input'\n};","map":null,"metadata":{},"sourceType":"module"}