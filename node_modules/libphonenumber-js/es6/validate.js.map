{"version":3,"sources":["../source/validate.js"],"names":["get_number_type","sort_out_arguments","matches_entirely","isValidNumber","arg_1","arg_2","arg_3","arg_4","input","options","metadata","country","hasCountry","Error","hasTypes","undefined","national_number","v2","nationalNumber","phone","nationalNumberPattern"],"mappings":"AAAA,OAAOA,eAAP,IAA0BC,kBAA1B,QAAoD,iBAApD;AACA,SAASC,gBAAT,QAAiC,UAAjC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,KAA5C,EACf;AAAA,4BACsCN,mBAAmBG,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,KAAxC,CADtC;AAAA,MACSC,KADT,uBACSA,KADT;AAAA,MACgBC,OADhB,uBACgBA,OADhB;AAAA,MACyBC,QADzB,uBACyBA,QADzB;;AAGC;AACA;;;AACA,MAAI,CAACF,MAAMG,OAAX,EACA;AACC,WAAO,KAAP;AACA;;AAED,MAAI,CAACD,SAASE,UAAT,CAAoBJ,MAAMG,OAA1B,CAAL,EACA;AACC,UAAM,IAAIE,KAAJ,uBAA8BL,MAAMG,OAApC,CAAN;AACA;;AAEDD,WAASC,OAAT,CAAiBH,MAAMG,OAAvB;;AAEA;AACA;AACA,MAAID,SAASI,QAAT,EAAJ,EACA;AACC,WAAOd,gBAAgBQ,KAAhB,EAAuBC,OAAvB,EAAgCC,SAASA,QAAzC,MAAuDK,SAA9D;AACA;;AAED;AACA;AACA,MAAMC,kBAAkBP,QAAQQ,EAAR,GAAaT,MAAMU,cAAnB,GAAoCV,MAAMW,KAAlE;AACA,SAAOjB,iBAAiBc,eAAjB,EAAkCN,SAASU,qBAAT,EAAlC,CAAP;AACA","file":"validate.js","sourcesContent":["import get_number_type, { sort_out_arguments } from './getNumberType'\r\nimport { matches_entirely } from './common'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(arg_1, arg_2, arg_3, arg_4)\r\n{\r\n\tconst { input, options, metadata } = sort_out_arguments(arg_1, arg_2, arg_3, arg_4)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tif (!metadata.hasCountry(input.country))\r\n\t{\r\n\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t}\r\n\r\n\tmetadata.country(input.country)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn get_number_type(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matches_entirely(national_number, metadata.nationalNumberPattern())\r\n}"]}