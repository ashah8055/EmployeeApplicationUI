{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcSlider from 'rc-slider/es/Slider';\nimport RcRange from 'rc-slider/es/Range';\nimport RcHandle from 'rc-slider/es/Handle';\nimport Tooltip from '../tooltip';\n\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n\n  function Slider(props) {\n    _classCallCheck(this, Slider);\n\n    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));\n\n    _this.toggleTooltipVisible = function (index, visible) {\n      _this.setState(function (_ref) {\n        var visibles = _ref.visibles;\n        return {\n          visibles: _extends({}, visibles, _defineProperty({}, index, visible))\n        };\n      });\n    };\n\n    _this.handleWithTooltip = function (_a) {\n      var value = _a.value,\n          dragging = _a.dragging,\n          index = _a.index,\n          restProps = __rest(_a, [\"value\", \"dragging\", \"index\"]);\n\n      var _this$props = _this.props,\n          tooltipPrefixCls = _this$props.tooltipPrefixCls,\n          tipFormatter = _this$props.tipFormatter;\n      var visibles = _this.state.visibles;\n      var visible = tipFormatter ? visibles[index] || dragging : false;\n      return React.createElement(Tooltip, {\n        prefixCls: tooltipPrefixCls,\n        title: tipFormatter ? tipFormatter(value) : '',\n        visible: visible,\n        placement: 'top',\n        transitionName: 'zoom-down',\n        key: index\n      }, React.createElement(RcHandle, _extends({}, restProps, {\n        value: value,\n        onMouseEnter: function onMouseEnter() {\n          return _this.toggleTooltipVisible(index, true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this.toggleTooltipVisible(index, false);\n        }\n      })));\n    };\n\n    _this.saveSlider = function (node) {\n      _this.rcSlider = node;\n    };\n\n    _this.state = {\n      visibles: {}\n    };\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: 'focus',\n    value: function focus() {\n      this.rcSlider.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.rcSlider.focus();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _a = this.props,\n          range = _a.range,\n          restProps = __rest(_a, [\"range\"]);\n\n      if (range) {\n        return React.createElement(RcRange, _extends({}, restProps, {\n          ref: this.saveSlider,\n          handle: this.handleWithTooltip\n        }));\n      }\n\n      return React.createElement(RcSlider, _extends({}, restProps, {\n        ref: this.saveSlider,\n        handle: this.handleWithTooltip\n      }));\n    }\n  }]);\n\n  return Slider;\n}(React.Component);\n\nexport default Slider;\nSlider.defaultProps = {\n  prefixCls: 'ant-slider',\n  tooltipPrefixCls: 'ant-tooltip',\n  tipFormatter: function tipFormatter(value) {\n    return value.toString();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}