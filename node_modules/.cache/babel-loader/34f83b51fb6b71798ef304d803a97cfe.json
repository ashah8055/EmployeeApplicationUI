{"ast":null,"code":"/*!\n  * Reqwest! A general purpose XHR connection manager\n  * license MIT (c) Dustin Diaz 2015\n  * https://github.com/ded/reqwest\n  */\n!function (name, context, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof define == 'function' && define.amd) define(definition);else context[name] = definition();\n}('reqwest', this, function () {\n  var context = this;\n\n  if ('window' in context) {\n    var doc = document,\n        byTag = 'getElementsByTagName',\n        head = doc[byTag]('head')[0];\n  } else {\n    var XHR2;\n\n    try {\n      XHR2 = require('xhr2');\n    } catch (ex) {\n      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2');\n    }\n  }\n\n  var httpsRe = /^http/,\n      protocolRe = /(^\\w+):\\/\\//,\n      twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  ,\n      readyState = 'readyState',\n      contentType = 'Content-Type',\n      requestedWith = 'X-Requested-With',\n      uniqid = 0,\n      callbackPrefix = 'reqwest_' + +new Date(),\n      lastValue // data stored by the most recent JSONP callback\n  ,\n      xmlHttpRequest = 'XMLHttpRequest',\n      xDomainRequest = 'XDomainRequest',\n      noop = function noop() {},\n      isArray = typeof Array.isArray == 'function' ? Array.isArray : function (a) {\n    return a instanceof Array;\n  },\n      defaultHeaders = {\n    'contentType': 'application/x-www-form-urlencoded',\n    'requestedWith': xmlHttpRequest,\n    'accept': {\n      '*': 'text/javascript, text/html, application/xml, text/xml, */*',\n      'xml': 'application/xml, text/xml',\n      'html': 'text/html',\n      'text': 'text/plain',\n      'json': 'application/json, text/javascript',\n      'js': 'application/javascript, text/javascript'\n    }\n  },\n      xhr = function xhr(o) {\n    // is it x-domain\n    if (o['crossOrigin'] === true) {\n      var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null;\n\n      if (xhr && 'withCredentials' in xhr) {\n        return xhr;\n      } else if (context[xDomainRequest]) {\n        return new XDomainRequest();\n      } else {\n        throw new Error('Browser does not support cross-origin requests');\n      }\n    } else if (context[xmlHttpRequest]) {\n      return new XMLHttpRequest();\n    } else if (XHR2) {\n      return new XHR2();\n    } else {\n      return new ActiveXObject('Microsoft.XMLHTTP');\n    }\n  },\n      globalSetupOptions = {\n    dataFilter: function dataFilter(data) {\n      return data;\n    }\n  };\n\n  function succeed(r) {\n    var protocol = protocolRe.exec(r.url);\n    protocol = protocol && protocol[1] || context.location.protocol;\n    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response;\n  }\n\n  function handleReadyState(r, success, error) {\n    return function () {\n      // use _aborted to mitigate against IE err c00c023f\n      // (can't read props on aborted request objects)\n      if (r._aborted) return error(r.request);\n      if (r._timedOut) return error(r.request, 'Request is aborted: timeout');\n\n      if (r.request && r.request[readyState] == 4) {\n        r.request.onreadystatechange = noop;\n        if (succeed(r)) success(r.request);else error(r.request);\n      }\n    };\n  }\n\n  function setHeaders(http, o) {\n    var headers = o['headers'] || {},\n        h;\n    headers['Accept'] = headers['Accept'] || defaultHeaders['accept'][o['type']] || defaultHeaders['accept']['*'];\n    var isAFormData = typeof FormData !== 'undefined' && o['data'] instanceof FormData; // breaks cross-origin requests with legacy browsers\n\n    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith'];\n    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType'];\n\n    for (h in headers) {\n      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h]);\n    }\n  }\n\n  function setCredentials(http, o) {\n    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\n      http.withCredentials = !!o['withCredentials'];\n    }\n  }\n\n  function generalCallback(data) {\n    lastValue = data;\n  }\n\n  function urlappend(url, s) {\n    return url + (/\\?/.test(url) ? '&' : '?') + s;\n  }\n\n  function handleJsonp(o, fn, err, url) {\n    var reqId = uniqid++,\n        cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\n    ,\n        cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId),\n        cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)'),\n        match = url.match(cbreg),\n        script = doc.createElement('script'),\n        loaded = 0,\n        isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1;\n\n    if (match) {\n      if (match[3] === '?') {\n        url = url.replace(cbreg, '$1=' + cbval); // wildcard callback func name\n      } else {\n        cbval = match[3]; // provided callback func name\n      }\n    } else {\n      url = urlappend(url, cbkey + '=' + cbval); // no callback details, add 'em\n    }\n\n    context[cbval] = generalCallback;\n    script.type = 'text/javascript';\n    script.src = url;\n    script.async = true;\n\n    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\n      // need this for IE due to out-of-order onreadystatechange(), binding script\n      // execution to an event listener gives us control over when the script\n      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n      script.htmlFor = script.id = '_reqwest_' + reqId;\n    }\n\n    script.onload = script.onreadystatechange = function () {\n      if (script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded' || loaded) {\n        return false;\n      }\n\n      script.onload = script.onreadystatechange = null;\n      script.onclick && script.onclick(); // Call the user callback with the last value stored and clean up values and scripts.\n\n      fn(lastValue);\n      lastValue = undefined;\n      head.removeChild(script);\n      loaded = 1;\n    }; // Add the script to the DOM head\n\n\n    head.appendChild(script); // Enable JSONP timeout\n\n    return {\n      abort: function abort() {\n        script.onload = script.onreadystatechange = null;\n        err({}, 'Request is aborted: timeout', {});\n        lastValue = undefined;\n        head.removeChild(script);\n        loaded = 1;\n      }\n    };\n  }\n\n  function getRequest(fn, err) {\n    var o = this.o,\n        method = (o['method'] || 'GET').toUpperCase(),\n        url = typeof o === 'string' ? o : o['url'] // convert non-string objects to query-string form unless o['processData'] is false\n    ,\n        data = o['processData'] !== false && o['data'] && typeof o['data'] !== 'string' ? reqwest.toQueryString(o['data']) : o['data'] || null,\n        http,\n        sendWait = false; // if we're working on a GET request and we have data then we should append\n    // query string to end of URL and not post data\n\n    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\n      url = urlappend(url, data);\n      data = null;\n    }\n\n    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url); // get the xhr from the factory if passed\n    // if the factory returns null, fall-back to ours\n\n    http = o.xhr && o.xhr(o) || xhr(o);\n    http.open(method, url, o['async'] === false ? false : true);\n    setHeaders(http, o);\n    setCredentials(http, o);\n\n    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {\n      http.onload = fn;\n      http.onerror = err; // NOTE: see\n      // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\n\n      http.onprogress = function () {};\n\n      sendWait = true;\n    } else {\n      http.onreadystatechange = handleReadyState(this, fn, err);\n    }\n\n    o['before'] && o['before'](http);\n\n    if (sendWait) {\n      setTimeout(function () {\n        http.send(data);\n      }, 200);\n    } else {\n      http.send(data);\n    }\n\n    return http;\n  }\n\n  function Reqwest(o, fn) {\n    this.o = o;\n    this.fn = fn;\n    init.apply(this, arguments);\n  }\n\n  function setType(header) {\n    // json, javascript, text/plain, text/html, xml\n    if (header === null) return undefined; //In case of no content-type.\n\n    if (header.match('json')) return 'json';\n    if (header.match('javascript')) return 'js';\n    if (header.match('text')) return 'html';\n    if (header.match('xml')) return 'xml';\n  }\n\n  function init(o, fn) {\n    this.url = typeof o == 'string' ? o : o['url'];\n    this.timeout = null; // whether request has been fulfilled for purpose\n    // of tracking the Promises\n\n    this._fulfilled = false; // success handlers\n\n    this._successHandler = function () {};\n\n    this._fulfillmentHandlers = []; // error handlers\n\n    this._errorHandlers = []; // complete (both success and fail) handlers\n\n    this._completeHandlers = [];\n    this._erred = false;\n    this._responseArgs = {};\n    var self = this;\n\n    fn = fn || function () {};\n\n    if (o['timeout']) {\n      this.timeout = setTimeout(function () {\n        timedOut();\n      }, o['timeout']);\n    }\n\n    if (o['success']) {\n      this._successHandler = function () {\n        o['success'].apply(o, arguments);\n      };\n    }\n\n    if (o['error']) {\n      this._errorHandlers.push(function () {\n        o['error'].apply(o, arguments);\n      });\n    }\n\n    if (o['complete']) {\n      this._completeHandlers.push(function () {\n        o['complete'].apply(o, arguments);\n      });\n    }\n\n    function complete(resp) {\n      o['timeout'] && clearTimeout(self.timeout);\n      self.timeout = null;\n\n      while (self._completeHandlers.length > 0) {\n        self._completeHandlers.shift()(resp);\n      }\n    }\n\n    function success(resp) {\n      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')); // resp can be undefined in IE\n\n      resp = type !== 'jsonp' ? self.request : resp; // use global data filter on response text\n\n      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type),\n          r = filteredResponse;\n\n      try {\n        resp.responseText = r;\n      } catch (e) {// can't assign this in IE<=8, just ignore\n      }\n\n      if (r) {\n        switch (type) {\n          case 'json':\n            try {\n              resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')');\n            } catch (err) {\n              return error(resp, 'Could not parse JSON in response', err);\n            }\n\n            break;\n\n          case 'js':\n            resp = eval(r);\n            break;\n\n          case 'html':\n            resp = r;\n            break;\n\n          case 'xml':\n            resp = resp.responseXML && resp.responseXML.parseError // IE trololo\n            && resp.responseXML.parseError.errorCode && resp.responseXML.parseError.reason ? null : resp.responseXML;\n            break;\n        }\n      }\n\n      self._responseArgs.resp = resp;\n      self._fulfilled = true;\n      fn(resp);\n\n      self._successHandler(resp);\n\n      while (self._fulfillmentHandlers.length > 0) {\n        resp = self._fulfillmentHandlers.shift()(resp);\n      }\n\n      complete(resp);\n    }\n\n    function timedOut() {\n      self._timedOut = true;\n      self.request.abort();\n    }\n\n    function error(resp, msg, t) {\n      resp = self.request;\n      self._responseArgs.resp = resp;\n      self._responseArgs.msg = msg;\n      self._responseArgs.t = t;\n      self._erred = true;\n\n      while (self._errorHandlers.length > 0) {\n        self._errorHandlers.shift()(resp, msg, t);\n      }\n\n      complete(resp);\n    }\n\n    this.request = getRequest.call(this, success, error);\n  }\n\n  Reqwest.prototype = {\n    abort: function abort() {\n      this._aborted = true;\n      this.request.abort();\n    },\n    retry: function retry() {\n      init.call(this, this.o, this.fn);\n    }\n    /**\n     * Small deviation from the Promises A CommonJs specification\n     * http://wiki.commonjs.org/wiki/Promises/A\n     */\n\n    /**\n     * `then` will execute upon successful requests\n     */\n    ,\n    then: function then(success, fail) {\n      success = success || function () {};\n\n      fail = fail || function () {};\n\n      if (this._fulfilled) {\n        this._responseArgs.resp = success(this._responseArgs.resp);\n      } else if (this._erred) {\n        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t);\n      } else {\n        this._fulfillmentHandlers.push(success);\n\n        this._errorHandlers.push(fail);\n      }\n\n      return this;\n    }\n    /**\n     * `always` will execute whether the request succeeds or fails\n     */\n    ,\n    always: function always(fn) {\n      if (this._fulfilled || this._erred) {\n        fn(this._responseArgs.resp);\n      } else {\n        this._completeHandlers.push(fn);\n      }\n\n      return this;\n    }\n    /**\n     * `fail` will execute when the request fails\n     */\n    ,\n    fail: function fail(fn) {\n      if (this._erred) {\n        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t);\n      } else {\n        this._errorHandlers.push(fn);\n      }\n\n      return this;\n    },\n    'catch': function _catch(fn) {\n      return this.fail(fn);\n    }\n  };\n\n  function reqwest(o, fn) {\n    return new Reqwest(o, fn);\n  } // normalize newline variants according to spec -> CRLF\n\n\n  function normalize(s) {\n    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : '';\n  }\n\n  function serial(el, cb) {\n    var n = el.name,\n        t = el.tagName.toLowerCase(),\n        optCb = function optCb(o) {\n      // IE gives value=\"\" even where there is no value attribute\n      // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\n      if (o && !o['disabled']) cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']));\n    },\n        ch,\n        ra,\n        val,\n        i; // don't serialize elements that are disabled or without a name\n\n\n    if (el.disabled || !n) return;\n\n    switch (t) {\n      case 'input':\n        if (!/reset|button|image|file/i.test(el.type)) {\n          ch = /checkbox/i.test(el.type);\n          ra = /radio/i.test(el.type);\n          val = el.value // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\n          ;\n          (!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val));\n        }\n\n        break;\n\n      case 'textarea':\n        cb(n, normalize(el.value));\n        break;\n\n      case 'select':\n        if (el.type.toLowerCase() === 'select-one') {\n          optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null);\n        } else {\n          for (i = 0; el.length && i < el.length; i++) {\n            el.options[i].selected && optCb(el.options[i]);\n          }\n        }\n\n        break;\n    }\n  } // collect up all form elements found from the passed argument elements all\n  // the way down to child elements; pass a '<form>' or form fields.\n  // called with 'this'=callback to use for serial() on each element\n\n\n  function eachFormElement() {\n    var cb = this,\n        e,\n        i,\n        serializeSubtags = function serializeSubtags(e, tags) {\n      var i, j, fa;\n\n      for (i = 0; i < tags.length; i++) {\n        fa = e[byTag](tags[i]);\n\n        for (j = 0; j < fa.length; j++) {\n          serial(fa[j], cb);\n        }\n      }\n    };\n\n    for (i = 0; i < arguments.length; i++) {\n      e = arguments[i];\n      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb);\n      serializeSubtags(e, ['input', 'select', 'textarea']);\n    }\n  } // standard query string style serialization\n\n\n  function serializeQueryString() {\n    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments));\n  } // { 'name': 'value', ... } style serialization\n\n\n  function serializeHash() {\n    var hash = {};\n    eachFormElement.apply(function (name, value) {\n      if (name in hash) {\n        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]]);\n        hash[name].push(value);\n      } else hash[name] = value;\n    }, arguments);\n    return hash;\n  } // [ { name: 'name', value: 'value' }, ... ] style serialization\n\n\n  reqwest.serializeArray = function () {\n    var arr = [];\n    eachFormElement.apply(function (name, value) {\n      arr.push({\n        name: name,\n        value: value\n      });\n    }, arguments);\n    return arr;\n  };\n\n  reqwest.serialize = function () {\n    if (arguments.length === 0) return '';\n    var opt,\n        fn,\n        args = Array.prototype.slice.call(arguments, 0);\n    opt = args.pop();\n    opt && opt.nodeType && args.push(opt) && (opt = null);\n    opt && (opt = opt.type);\n    if (opt == 'map') fn = serializeHash;else if (opt == 'array') fn = reqwest.serializeArray;else fn = serializeQueryString;\n    return fn.apply(null, args);\n  };\n\n  reqwest.toQueryString = function (o, trad) {\n    var prefix,\n        i,\n        traditional = trad || false,\n        s = [],\n        enc = encodeURIComponent,\n        add = function add(key, value) {\n      // If value is a function, invoke it and return its value\n      value = 'function' === typeof value ? value() : value == null ? '' : value;\n      s[s.length] = enc(key) + '=' + enc(value);\n    }; // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (isArray(o)) {\n      for (i = 0; o && i < o.length; i++) {\n        add(o[i]['name'], o[i]['value']);\n      }\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in o) {\n        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add);\n      }\n    } // spaces should be + according to spec\n\n\n    return s.join('&').replace(/%20/g, '+');\n  };\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name,\n        i,\n        v,\n        rbracket = /\\[\\]$/;\n\n    if (isArray(obj)) {\n      // Serialize array item.\n      for (i = 0; obj && i < obj.length; i++) {\n        v = obj[i];\n\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);\n        }\n      }\n    } else if (obj && obj.toString() === '[object Object]') {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  }\n\n  reqwest.getcallbackPrefix = function () {\n    return callbackPrefix;\n  }; // jQuery and Zepto compatibility, differences can be remapped here so you can call\n  // .ajax.compat(options, callback)\n\n\n  reqwest.compat = function (o, fn) {\n    if (o) {\n      o['type'] && (o['method'] = o['type']) && delete o['type'];\n      o['dataType'] && (o['type'] = o['dataType']);\n      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback'];\n      o['jsonp'] && (o['jsonpCallback'] = o['jsonp']);\n    }\n\n    return new Reqwest(o, fn);\n  };\n\n  reqwest.ajaxSetup = function (options) {\n    options = options || {};\n\n    for (var k in options) {\n      globalSetupOptions[k] = options[k];\n    }\n  };\n\n  return reqwest;\n});","map":null,"metadata":{},"sourceType":"script"}