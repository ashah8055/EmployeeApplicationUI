'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _TextInputInputComponent = require('./TextInputInputComponent');

var _TextInputInputComponent2 = _interopRequireDefault(_TextInputInputComponent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var TextInput = (_temp2 = _class = function (_PureComponent) {
		_inherits(TextInput, _PureComponent);

		function TextInput() {
				var _ref;

				var _temp, _this, _ret;

				_classCallCheck(this, TextInput);

				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						args[_key] = arguments[_key];
				}

				return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputNode = function (node) {
						return _this.input = node;
				}, _this.focus = function () {
						return _this.input.focus();
				}, _temp), _possibleConstructorReturn(_this, _ret);
		}

		_createClass(TextInput, [{
				key: 'render',
				value: function render() {
						var _props = this.props,
						    indicateInvalid = _props.indicateInvalid,
						    error = _props.error,
						    style = _props.style,
						    className = _props.className,
						    password = _props.password,
						    email = _props.email,
						    rest = _objectWithoutProperties(_props, ['indicateInvalid', 'error', 'style', 'className', 'password', 'email']);

						// Deprecated.
						// Use `type="password"` instead.


						if (password) {
								rest.type = 'password';
						}

						// Deprecated.
						// Use `type="email"` instead.
						if (email) {
								rest.type = 'email';
						}

						return _react2.default.createElement(
								'div',
								{
										style: style,
										className: (0, _classnames2.default)('rrui__text-input', className) },
								_react2.default.createElement(_TextInputInputComponent2.default, _extends({}, rest, {
										inputRef: this.storeInputNode,
										error: error,
										indicateInvalid: indicateInvalid })),
								indicateInvalid && error && _react2.default.createElement(
										'div',
										{ className: 'rrui__input-error' },
										error
								)
						);
				}

				// render_static()
				// {
				// 	const { label } = this.props
				//
				// 	return (
				// 		<div className="rrui__rich__fallback">
				// 			<Input {...this.props} placeholder={label} />
				// 		</div>
				// 	)
				// }

		}]);

		return TextInput;
}(PureComponent), _class.propTypes = {
		// Text field label
		label: _propTypes2.default.string,

		// HTML form input `name` attribute
		name: _propTypes2.default.string,

		// Text field value
		value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

		// Is called when the `value` is edited
		onChange: _propTypes2.default.func.isRequired,

		// A custom input component.
		inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),

		// Disables the text field
		disabled: _propTypes2.default.bool,

		// Renders an error message below the `<input/>`
		error: _propTypes2.default.string,

		// If this flag is `true` then the `error` is shown.
		// If this flag is `false` then the `error` is not shown (even if passed).
		indicateInvalid: _propTypes2.default.bool,

		// Set to `true` to mark the field as required
		required: _propTypes2.default.bool,

		// `<input/>` placeholder
		placeholder: _propTypes2.default.string,

		// `<textarea/>` instead of an `<input type="text"/>`
		multiline: _propTypes2.default.bool,

		// Deprecated.
		// Use `type="email"` instead.
		// Sets HTML input `type` attribute to `email`
		email: _propTypes2.default.bool,

		// Deprecated.
		// Use `type="password"` instead.
		// Sets HTML input `type` attribute to `password`
		password: _propTypes2.default.bool,

		// Autofocuses the input field
		focus: _propTypes2.default.bool,

		// HTML `tabindex` attribute
		tabIndex: _propTypes2.default.number,

		// `<textarea/>` `rows` attribute (row count, i.e. height)
		rows: _propTypes2.default.number,

		// `<textarea/>` `cols` attribute (column count, i.e. width)
		cols: _propTypes2.default.number,

		// Is called when the input is focused
		onFocus: _propTypes2.default.func,

		// `onKeyDown` event handler
		onKeyDown: _propTypes2.default.func,

		// Is called when the input is blurred
		onBlur: _propTypes2.default.func,

		// Is called when the input is clicked
		onClick: _propTypes2.default.func,

		// CSS style object
		style: _propTypes2.default.object,

		// CSS name
		className: _propTypes2.default.string,

		// CSS style object for `<input/>`
		inputStyle: _propTypes2.default.object
}, _class.defaultProps = {
		// Show `error` (if passed).
		indicateInvalid: true
}, _temp2);
exports.default = TextInput;
//# sourceMappingURL=TextInput.js.map