{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Amar/emp/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLogoutUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updatedItemSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createTaskItemSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signupBusinessUserItemSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getTasksList),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getBusinessUsersList),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(submitCreateTaskToServer),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(submitSelectedTask),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(validateLoggedInUser),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLoginUser),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types'; //import {getCreateIncTranSucResp, getUpdatedIncTranSucResp, getIncTranListSucResp}  from \"../actions/Incentives\";\n//import * as API from '../config';\n\nimport { eventChannel } from 'redux-saga';\nimport { loginUserSuccess, loginUserFailure, validateUserSuccess, getBusinessUsersListSuccessResponse, validateUserFailure } from '../actions/auth';\nimport { createTaskServerSuccess, createTaskServerFailure } from '../actions/createTask';\nimport { getTaskListSuccessResponse, getUpdatedTaskListSuccessResponse, createBusinessuserServerSuccess, createBusinessuserServerFailure } from '../actions/home'; //import { db, auth } from '../firebase';\n\nimport firebase from '../../firebase';\nimport { GetDataFromServer } from '../service';\nvar database = firebase.database();\n\nvar LoginUserServiceCall = function LoginUserServiceCall(email, password) {\n  return firebase.auth().signInWithEmailAndPassword(email, password);\n}; // function* fetchLoginUser(action){\n//   try {\n//     const response = yield call(LoginUserServiceCall, action.username, action.password);\n//     yield put(loginUserSuccess(response));\n//   } catch (error) {\n//     yield put(loginUserFailure(error))\n//   }\n// }\n\n\nvar LogoutUserServiceCall = function LogoutUserServiceCall(userId) {};\n\nfunction fetchLogoutUser(action) {\n  var response, result;\n  return _regeneratorRuntime.wrap(function fetchLogoutUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(LogoutUserServiceCall, action.userId);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return response.json();\n\n        case 6:\n          result = _context.sent;\n\n          if (!result.error) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put({\n            type: Types.LOGOUT_USER_SERVER_REPONSE_ERROR,\n            error: result.error\n          });\n\n        case 10:\n          _context.next = 14;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: Types.LOGOUT_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 14:\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 20;\n          return put({\n            type: Types.SERVER_CALL_FAILED,\n            error: _context.t0.message\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 16]]);\n}\n\nfunction insert(item) {\n  var newItemRef = database.ref('tasks').push();\n  return newItemRef.set(item);\n}\n\nfunction createEventChannel() {\n  var listener = eventChannel(function (emit) {\n    database.ref('tasks').on('child_added', function (data) {\n      return emit(data.val());\n    });\n    return function () {\n      return database.ref('tasks').off(listener);\n    };\n  });\n  return listener;\n}\n\n;\n\nfunction updatedItemSaga() {\n  var updateChannel, response;\n  return _regeneratorRuntime.wrap(function updatedItemSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          updateChannel = createEventChannel();\n\n        case 1:\n          if (!true) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 4;\n          return take(updateChannel);\n\n        case 4:\n          response = _context2.sent;\n          _context2.next = 7;\n          return put(getUpdatedTaskListSuccessResponse(response));\n\n        case 7:\n          _context2.next = 1;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction createTaskItemSaga() {\n  var action, response;\n  return _regeneratorRuntime.wrap(function createTaskItemSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take(Types.CREATE_TASK);\n\n        case 2:\n          action = _context3.sent;\n          _context3.prev = 3;\n          _context3.next = 6;\n          return call(insert, action.task);\n\n        case 6:\n          response = _context3.sent;\n          _context3.next = 9;\n          return put(createTaskServerSuccess(response));\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](3);\n          _context3.next = 15;\n          return put(createTaskServerFailure(_context3.t0));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[3, 11]]);\n}\n\nfunction insertNewBusinessuser(item) {\n  var newItemRef = database.ref('businessusers').push();\n  return newItemRef.set(item);\n}\n\nfunction signupBusinessUserItemSaga() {\n  var action, response;\n  return _regeneratorRuntime.wrap(function signupBusinessUserItemSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take(Types.SIGNUP_USER);\n\n        case 2:\n          action = _context4.sent;\n          _context4.prev = 3;\n          _context4.next = 6;\n          return call(insertNewBusinessuser, action.user);\n\n        case 6:\n          response = _context4.sent;\n          _context4.next = 9;\n          return put(createBusinessuserServerSuccess(response));\n\n        case 9:\n          _context4.next = 15;\n          break;\n\n        case 11:\n          _context4.prev = 11;\n          _context4.t0 = _context4[\"catch\"](3);\n          _context4.next = 15;\n          return put(createBusinessuserServerFailure(_context4.t0));\n\n        case 15:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this, [[3, 11]]);\n}\n\nfunction createEventChannelToGetData() {\n  var listener = eventChannel(function (emit) {\n    database.ref('tasks').on('value', function (data) {\n      return emit(data.val());\n    });\n    return function () {\n      return database.ref('tasks').off(listener);\n    };\n  });\n  return listener;\n} // Get Incentive Transaction List\n\n\nfunction getTasksList() {\n  var getDataChannel, item;\n  return _regeneratorRuntime.wrap(function getTasksList$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          getDataChannel = createEventChannelToGetData();\n\n        case 1:\n          if (!true) {\n            _context5.next = 9;\n            break;\n          }\n\n          _context5.next = 4;\n          return take(getDataChannel);\n\n        case 4:\n          item = _context5.sent;\n          _context5.next = 7;\n          return put(getTaskListSuccessResponse(item));\n\n        case 7:\n          _context5.next = 1;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction createEventChannelToGetBusinessUsers() {\n  var listener = eventChannel(function (emit) {\n    database.ref('businessusers').on('value', function (data) {\n      return emit(data.val());\n    });\n    return function () {\n      return database.ref('businessusers').off(listener);\n    };\n  });\n  return listener;\n} // Get Incentive Transaction List\n\n\nfunction getBusinessUsersList() {\n  var getDataChannel, item;\n  return _regeneratorRuntime.wrap(function getBusinessUsersList$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          getDataChannel = createEventChannelToGetBusinessUsers();\n\n        case 1:\n          if (!true) {\n            _context6.next = 9;\n            break;\n          }\n\n          _context6.next = 4;\n          return take(getDataChannel);\n\n        case 4:\n          item = _context6.sent;\n          _context6.next = 7;\n          return put(getBusinessUsersListSuccessResponse(item));\n\n        case 7:\n          _context6.next = 1;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\n\nvar insertEmployeeInfoRegistrationData = function insertEmployeeInfoRegistrationData(task) {\n  var tasksRef = database.ref('tasks').push();\n  return tasksRef.set({\n    task: task\n  });\n};\n\nfunction submitCreateTaskToServer(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function submitCreateTaskToServer$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(insertEmployeeInfoRegistrationData, action.task);\n\n        case 3:\n          response = _context7.sent;\n          _context7.next = 6;\n          return put(createTaskServerSuccess(response, action));\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put(createTaskServerFailure(_context7.t0));\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this, [[0, 8]]);\n}\n\nfunction submitSelectedTask(action) {\n  var tasksDb;\n  return _regeneratorRuntime.wrap(function submitSelectedTask$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          tasksDb = database.ref('tasks').orderByChild(\"empId\").equalTo(action.task.empId);\n          return _context8.abrupt(\"return\", tasksDb.once(\"child_added\", function (snapshot) {\n            console.log(snapshot.val());\n            snapshot.ref.update(action.task);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, this);\n}\n\nfunction createEventChannelToFindUserInEmpList(loggedInUserEmail) {\n  var listener = eventChannel(function (emit) {\n    database.ref('tasks').orderByChild(\"primaryEmailId\").equalTo(loggedInUserEmail).on('value', function (data) {\n      if (data.val()) {\n        return emit(data.val());\n      } else {\n        //if Business User, emp is not found\n        return emit({});\n      }\n    });\n    return function () {\n      return database.ref('tasks').off(listener);\n    };\n  });\n  return listener;\n}\n\nfunction validateLoggedInUser(action) {\n  var getDataChannel, item;\n  return _regeneratorRuntime.wrap(function validateLoggedInUser$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          getDataChannel = createEventChannelToFindUserInEmpList(action.response.user.email);\n\n        case 1:\n          if (!true) {\n            _context9.next = 9;\n            break;\n          }\n\n          _context9.next = 4;\n          return take(getDataChannel);\n\n        case 4:\n          item = _context9.sent;\n          _context9.next = 7;\n          return put(validateUserSuccess(item));\n\n        case 7:\n          _context9.next = 1;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, this);\n}\n\nfunction fetchLoginUser(action) {\n  var formBody, reqMethod, loginUrl, response, result;\n  return _regeneratorRuntime.wrap(function fetchLoginUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          formBody = {};\n          formBody.firstname = \"asdfg\"; //action.code;\n\n          formBody.lastname = \"zxcvbb\"; //action.provider;\n\n          formBody.age = \"34\";\n          reqMethod = \"POST\";\n          loginUrl = \"http://localhost:8080/employee\";\n          _context10.next = 9;\n          return call(GetDataFromServer, loginUrl, reqMethod, formBody);\n\n        case 9:\n          response = _context10.sent;\n          _context10.next = 12;\n          return response.json();\n\n        case 12:\n          result = _context10.sent;\n\n          if (!result.error) {\n            _context10.next = 18;\n            break;\n          }\n\n          _context10.next = 16;\n          return put({\n            type: \"LOGIN_USER_SERVER_REPONSE_ERROR\",\n            error: result.error\n          });\n\n        case 16:\n          _context10.next = 20;\n          break;\n\n        case 18:\n          _context10.next = 20;\n          return put({\n            type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 20:\n          _context10.next = 25;\n          break;\n\n        case 22:\n          _context10.prev = 22;\n          _context10.t0 = _context10[\"catch\"](0);\n          // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n          console.log(\"Error\");\n\n        case 25:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, this, [[0, 22]]);\n}\n\nexport default function rootSaga(params) {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return takeEvery(Types.LOGIN_USER, fetchLoginUser);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, this);\n}","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/store/sagas.js"],"names":["fetchLogoutUser","updatedItemSaga","createTaskItemSaga","signupBusinessUserItemSaga","getTasksList","getBusinessUsersList","submitCreateTaskToServer","submitSelectedTask","validateLoggedInUser","fetchLoginUser","rootSaga","takeEvery","call","put","select","take","fork","all","takeLatest","Types","eventChannel","loginUserSuccess","loginUserFailure","validateUserSuccess","getBusinessUsersListSuccessResponse","validateUserFailure","createTaskServerSuccess","createTaskServerFailure","getTaskListSuccessResponse","getUpdatedTaskListSuccessResponse","createBusinessuserServerSuccess","createBusinessuserServerFailure","firebase","GetDataFromServer","database","LoginUserServiceCall","email","password","auth","signInWithEmailAndPassword","LogoutUserServiceCall","userId","action","response","json","result","error","type","LOGOUT_USER_SERVER_REPONSE_ERROR","LOGOUT_USER_SERVER_RESPONSE_SUCCESS","SERVER_CALL_FAILED","message","insert","item","newItemRef","ref","push","set","createEventChannel","listener","emit","on","data","val","off","updateChannel","CREATE_TASK","task","insertNewBusinessuser","SIGNUP_USER","user","createEventChannelToGetData","getDataChannel","createEventChannelToGetBusinessUsers","insertEmployeeInfoRegistrationData","tasksRef","tasksDb","orderByChild","equalTo","empId","once","snapshot","console","log","update","createEventChannelToFindUserInEmpList","loggedInUserEmail","formBody","firstname","lastname","age","reqMethod","loginUrl","LOGIN_USER_SERVER_RESPONSE_SUCCESS","params","LOGIN_USER"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, select, take, fork, all, takeLatest} from 'redux-saga/effects';\nimport * as Types from '../actions/types';\n//import {getCreateIncTranSucResp, getUpdatedIncTranSucResp, getIncTranListSucResp}  from \"../actions/Incentives\";\n//import * as API from '../config';\nimport { eventChannel } from 'redux-saga';\nimport {loginUserSuccess, loginUserFailure, validateUserSuccess, getBusinessUsersListSuccessResponse, validateUserFailure} from '../actions/auth';\nimport {createTaskServerSuccess, createTaskServerFailure} from '../actions/createTask';\nimport {getTaskListSuccessResponse,getUpdatedTaskListSuccessResponse, createBusinessuserServerSuccess, createBusinessuserServerFailure} from '../actions/home';\n//import { db, auth } from '../firebase';\nimport firebase from '../../firebase';\n\nimport { GetDataFromServer } from '../service';\n\n\nconst database = firebase.database();\n\n\nconst LoginUserServiceCall  = (email, password) => {\n  return firebase.auth().signInWithEmailAndPassword(email, password);\n}\n// function* fetchLoginUser(action){\n//   try {\n//     const response = yield call(LoginUserServiceCall, action.username, action.password);\n//     yield put(loginUserSuccess(response));\n//   } catch (error) {\n//     yield put(loginUserFailure(error))\n//   }\n// }\n\nconst LogoutUserServiceCall  = (userId) => {\n  \n}\nfunction* fetchLogoutUser(action){\n  try {\n    const response = yield call(LogoutUserServiceCall, action.userId);\n    const result = yield response.json();\n    if (result.error) {\n      yield put({ type: Types.LOGOUT_USER_SERVER_REPONSE_ERROR, error: result.error });\n    } else {\n      yield put({ type: Types.LOGOUT_USER_SERVER_RESPONSE_SUCCESS, result });\n    }\n  } catch (error) {\n    yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n  }\n}\n\n\n\nfunction insert(item) {\n    const newItemRef = database.ref('tasks').push();\n    return newItemRef.set(item);\n}\nfunction createEventChannel() {\n    const listener = eventChannel(\n        emit => {\n            database.ref('tasks')\n            .on('child_added', data => emit(data.val()));\n                return () => database.ref('tasks').off(listener);\n        }\n    );\n\n    return listener;\n};\n\nfunction* updatedItemSaga() {\n    const updateChannel = createEventChannel();\n    while(true) {\n        const response = yield take(updateChannel);\n        yield put(getUpdatedTaskListSuccessResponse(response));\n    }\n}\n\nfunction* createTaskItemSaga() {\n    const action = yield take(Types.CREATE_TASK);\n    try {\n        const response = yield call(insert, action.task);\n        yield put(createTaskServerSuccess(response));\n        //yield put({ type: Types.CREATE_TASK_SERVER_RESPONSE_SUCCESS, response });\n    } catch (error) {\n      yield put(createTaskServerFailure(error));\n        // do something with the error, such as dispatching an error action with yield put\n    }\n}\n\n\nfunction insertNewBusinessuser(item) {\n  const newItemRef = database.ref('businessusers').push();\n  return newItemRef.set(item);\n}\n\nfunction* signupBusinessUserItemSaga() {\n  const action = yield take(Types.SIGNUP_USER);\n  try {\n      const response = yield call(insertNewBusinessuser, action.user);\n      yield put(createBusinessuserServerSuccess(response));\n  } catch (error) {\n    yield put(createBusinessuserServerFailure(error));\n  }\n}\n\nfunction createEventChannelToGetData(){\n  const listener = eventChannel(\n      emit => {\n          database.ref('tasks')\n          .on('value', data => emit(data.val()));\n              return () => database.ref('tasks').off(listener);\n      }\n  );\n  return listener;\n}\n\n// Get Incentive Transaction List\nfunction* getTasksList(){\n  const getDataChannel = createEventChannelToGetData();\n  while(true) {\n      const item = yield take(getDataChannel); \n      yield put(getTaskListSuccessResponse(item));    \n  }\n}\n\nfunction createEventChannelToGetBusinessUsers(){\n  const listener = eventChannel(\n      emit => {\n          database.ref('businessusers')\n          .on('value', data => emit(data.val()));\n              return () => database.ref('businessusers').off(listener);\n      }\n  );\n  return listener;\n}\n\n// Get Incentive Transaction List\nfunction* getBusinessUsersList(){\n  const getDataChannel = createEventChannelToGetBusinessUsers();\n  while(true) {\n      const item = yield take(getDataChannel); \n      yield put(getBusinessUsersListSuccessResponse(item));    \n  }\n}\n\n\nconst insertEmployeeInfoRegistrationData = (task) => {\n    const tasksRef = database.ref('tasks').push();\n    return tasksRef.set({task: task});\n}\n\nfunction* submitCreateTaskToServer(action){\n  try{\n    const response = yield call(insertEmployeeInfoRegistrationData, action.task);    \n    yield put(createTaskServerSuccess(response, action));\n  } catch (error){\n    yield put(createTaskServerFailure(error));\n  }\n}\n\nfunction* submitSelectedTask(action){\n  const tasksDb = database.ref('tasks').orderByChild(\"empId\").equalTo(action.task.empId);\n  return tasksDb.once(\"child_added\", function(snapshot){\n        console.log(snapshot.val());\n        snapshot.ref.update(action.task);\n  });\n  // return tasksDb.on('value', function(snapshot){\n  //   //snapshot would have list of NODES that satisfies the condition\n  //   console.log(snapshot.val());\n  //   snapshot.ref.update(action.task);\n  // });\n}\nfunction createEventChannelToFindUserInEmpList(loggedInUserEmail){\n    const listener = eventChannel(emit => {      \n        database.ref('tasks').orderByChild(\"primaryEmailId\").equalTo(loggedInUserEmail)\n        .on('value', (data) => {\n          if(data.val()){\n            return emit(data.val())\n          } else{//if Business User, emp is not found\n            return emit({});\n          }          \n        });\n            return () => database.ref('tasks').off(listener);\n    });\n    return listener; \n}\n\nfunction* validateLoggedInUser(action){\n  const getDataChannel = createEventChannelToFindUserInEmpList(action.response.user.email);\n  while(true) {\n      const item = yield take(getDataChannel); \n      yield put(validateUserSuccess(item));    \n  }  \n} \n\n function* fetchLoginUser(action){\n    try {\n      let formBody = {};\n      formBody.firstname = \"asdfg\";//action.code;\n      formBody.lastname =  \"zxcvbb\"; //action.provider;\n      formBody.age = \"34\"\n      const reqMethod = \"POST\";\n      const loginUrl= \"http://localhost:8080/employee\";\n      const response = yield call(GetDataFromServer, loginUrl ,reqMethod, formBody);\n      const result = yield response.json();\n      if (result.error) {\n        yield put({ type: \"LOGIN_USER_SERVER_REPONSE_ERROR\", error: result.error });\n        \n      } else {\n        yield put({ type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS, result });\n      }\n    } catch (error) {\n     // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n        console.log(\"Error\");\n    }\n  }\n\nexport default function* rootSaga(params){\n  yield takeEvery(Types.LOGIN_USER, fetchLoginUser);  \n//   yield takeEvery(Types.LOGOUT_USER, fetchLogoutUser);\n//   yield all([takeLatest(Types.GET_EMPLOYEE_LIST, getTasksList)]);\n//   yield all([takeLatest(Types.TASK_DETAILS_SAVE_DATABASE, submitSelectedTask)]);\n//   yield all([takeLatest(Types.GET_BUSINESS_USERS_LIST, getBusinessUsersList)]);\n//   yield fork(createTaskItemSaga);\n//   yield fork(signupBusinessUserItemSaga);  \n//   //yield all([takeLatest(Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,  validateLoggedInUser)]);\n}\n"]},"metadata":{},"sourceType":"module"}