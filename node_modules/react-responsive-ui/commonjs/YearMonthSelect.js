'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

// http://react-day-picker.js.org/examples/?yearNavigation
// Component will receive date, locale and localeUtils props
var YearMonthSelect = (_temp = _class = function (_PureComponent) {
	_inherits(YearMonthSelect, _PureComponent);

	function YearMonthSelect(props) {
		_classCallCheck(this, YearMonthSelect);

		var _this = _possibleConstructorReturn(this, (YearMonthSelect.__proto__ || Object.getPrototypeOf(YearMonthSelect)).call(this, props));

		_this.onChangeMonth = function (event) {
			var _this$props = _this.props,
			    date = _this$props.date,
			    onChange = _this$props.onChange;


			var month = event.target.value;

			if (month !== date.getMonth()) {
				// The date created is in the user's time zone and the time is `00:00`.
				// The `day` is `undefined` which means the first one of the `month`.
				onChange(new Date(date.getFullYear(), month));
			}

			// restoreFocus()
		};

		_this.onChangeYear = function (event) {
			var _this$props2 = _this.props,
			    date = _this$props2.date,
			    onChange = _this$props2.onChange;


			var year = event.target.value;

			if (year !== date.getFullYear()) {
				// The date created is in the user's time zone and the time is `00:00`.
				// The `day` is `undefined` which means the first one of the `month`.
				onChange(new Date(year, date.getMonth()));
			}

			// restoreFocus()
		};

		_this.restoreFocus = function () {
			var userHasJustChangedYearOrMonth = _this.props.userHasJustChangedYearOrMonth;

			// Doesn't work on iOS
			// focus()

			// A hack for iOS when it collapses
			// the calendar after selecting a year/month.
			// Known bug: it won't work when a user
			// focuses one `<select/>` and then focuses another one
			// because in that case `onBlur` won't be triggered for the second `<select/>`.

			userHasJustChangedYearOrMonth();
		};

		var _this$props3 = _this.props,
		    selectYearsIntoPast = _this$props3.selectYearsIntoPast,
		    selectYearsIntoFuture = _this$props3.selectYearsIntoFuture,
		    selectedDay = _this$props3.selectedDay,
		    localeUtils = _this$props3.localeUtils;

		// The current year in the user's time zone.

		var current_year = new Date().getFullYear();

		var from_year = selectYearsIntoPast ? current_year - selectYearsIntoPast : current_year;
		var to_year = selectYearsIntoFuture ? current_year + selectYearsIntoFuture : current_year;

		var years = new Array(to_year - from_year + 1);

		var i = 0;
		while (from_year + i <= to_year) {
			years[i] = from_year + i;
			i++;
		}

		// Makes sure the currently selected year is in the list
		// to not confuse the user.
		if (selectedDay) {
			var selected_year = selectedDay.getFullYear();

			if (selected_year < from_year) {
				years.unshift(selected_year);
			} else if (selected_year > to_year) {
				years.push(selected_year);
			}
		}

		var months = localeUtils.getMonths();

		_this.months = months;
		_this.years = years;
		return _this;
	}

	_createClass(YearMonthSelect, [{
		key: 'render',
		value: function render() {
			var date = this.props.date;


			return _react2.default.createElement(
				'div',
				{ className: 'DayPicker-Caption' },
				_react2.default.createElement(
					'div',
					{ className: 'DayPicker-CaptionSelects' },
					_react2.default.createElement(
						'div',
						{ className: 'DayPicker-MonthSelect' },
						_react2.default.createElement(
							'select',
							{
								onChange: this.onChangeMonth,
								onBlur: this.restoreFocus,
								value: date.getMonth(),
								tabIndex: -1,
								className: 'rrui__select__native rrui__select__native--overlay' },
							this.months.map(function (month, i) {
								return _react2.default.createElement(
									'option',
									{ key: i, value: i },
									month
								);
							})
						),
						_react2.default.createElement(
							'button',
							{ type: 'button', className: 'rrui__button-reset' },
							_react2.default.createElement(
								'div',
								{ className: 'rrui__select__selected-content' },
								_react2.default.createElement(
									'div',
									{ className: 'rrui__select__selected-label' },
									this.months[date.getMonth()]
								),
								_react2.default.createElement('div', { className: 'rrui__select__arrow' })
							)
						)
					),
					_react2.default.createElement(
						'div',
						{ className: 'DayPicker-YearSelect' },
						_react2.default.createElement(
							'select',
							{
								onChange: this.onChangeYear,
								onBlur: this.restoreFocus,
								value: date.getFullYear(),
								tabIndex: -1,
								className: 'rrui__select__native rrui__select__native--overlay' },
							this.years.map(function (year, i) {
								return _react2.default.createElement(
									'option',
									{ key: i, value: year },
									year
								);
							})
						),
						_react2.default.createElement(
							'button',
							{ type: 'button', className: 'rrui__button-reset' },
							_react2.default.createElement(
								'div',
								{ className: 'rrui__select__selected-content' },
								_react2.default.createElement(
									'div',
									{ className: 'rrui__select__selected-label' },
									date.getFullYear()
								),
								_react2.default.createElement('div', { className: 'rrui__select__arrow' })
							)
						)
					)
				)
			);
		}
	}]);

	return YearMonthSelect;
}(PureComponent), _class.propTypes = {
	date: _propTypes2.default.instanceOf(Date),
	onChange: _propTypes2.default.func.isRequired,
	localeUtils: _propTypes2.default.object
}, _temp);
exports.default = YearMonthSelect;
//# sourceMappingURL=YearMonthSelect.js.map