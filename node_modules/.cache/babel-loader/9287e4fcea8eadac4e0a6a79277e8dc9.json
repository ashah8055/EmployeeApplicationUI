{"ast":null,"code":"import _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport Animate from 'rc-animate';\nimport PureRenderMixin from 'rc-util/es/PureRenderMixin';\nimport Checkbox from '../checkbox';\nimport Search from './search';\nimport Item from './item';\nimport triggerEvent from '../_util/triggerEvent';\n\nfunction isIEorEDGE() {\n  return document.documentMode || /Edge/.test(navigator.userAgent);\n}\n\nfunction noop() {}\n\nfunction isRenderResultPlainObject(result) {\n  return result && !React.isValidElement(result) && Object.prototype.toString.call(result) === '[object Object]';\n}\n\nvar TransferList = function (_React$Component) {\n  _inherits(TransferList, _React$Component);\n\n  function TransferList(props) {\n    _classCallCheck(this, TransferList);\n\n    var _this = _possibleConstructorReturn(this, (TransferList.__proto__ || Object.getPrototypeOf(TransferList)).call(this, props));\n\n    _this.handleSelect = function (selectedItem) {\n      var checkedKeys = _this.props.checkedKeys;\n      var result = checkedKeys.some(function (key) {\n        return key === selectedItem.key;\n      });\n\n      _this.props.handleSelect(selectedItem, !result);\n    };\n\n    _this.handleFilter = function (e) {\n      _this.props.handleFilter(e);\n\n      if (!e.target.value) {\n        return;\n      } // Manually trigger scroll event for lazy search bug\n      // https://github.com/ant-design/ant-design/issues/5631\n\n\n      _this.triggerScrollTimer = window.setTimeout(function () {\n        var transferNode = ReactDOM.findDOMNode(_this);\n        var listNode = transferNode.querySelectorAll('.ant-transfer-list-content')[0];\n\n        if (listNode) {\n          triggerEvent(listNode, 'scroll');\n        }\n      }, 0);\n\n      _this.fixIERepaint();\n    };\n\n    _this.handleClear = function () {\n      _this.props.handleClear();\n\n      _this.fixIERepaint();\n    };\n\n    _this.matchFilter = function (text, item) {\n      var _this$props = _this.props,\n          filter = _this$props.filter,\n          filterOption = _this$props.filterOption;\n\n      if (filterOption) {\n        return filterOption(filter, item);\n      }\n\n      return text.indexOf(filter) >= 0;\n    };\n\n    _this.renderItem = function (item) {\n      var _this$props$render = _this.props.render,\n          render = _this$props$render === undefined ? noop : _this$props$render;\n      var renderResult = render(item);\n      var isRenderResultPlain = isRenderResultPlainObject(renderResult);\n      return {\n        renderedText: isRenderResultPlain ? renderResult.value : renderResult,\n        renderedEl: isRenderResultPlain ? renderResult.label : renderResult\n      };\n    };\n\n    _this.saveNotFoundRef = function (node) {\n      _this.notFoundNode = node;\n    };\n\n    _this.state = {\n      mounted: false\n    };\n    return _this;\n  }\n\n  _createClass(TransferList, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.timer = window.setTimeout(function () {\n        _this2.setState({\n          mounted: true\n        });\n      }, 0);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.timer);\n      clearTimeout(this.triggerScrollTimer);\n      clearTimeout(this.fixIERepaintTimer);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return PureRenderMixin.shouldComponentUpdate.apply(this, args);\n    }\n  }, {\n    key: 'getCheckStatus',\n    value: function getCheckStatus(filteredDataSource) {\n      var checkedKeys = this.props.checkedKeys;\n\n      if (checkedKeys.length === 0) {\n        return 'none';\n      } else if (filteredDataSource.every(function (item) {\n        return checkedKeys.indexOf(item.key) >= 0;\n      })) {\n        return 'all';\n      }\n\n      return 'part';\n    } // Fix IE/Edge repaint\n    // https://github.com/ant-design/ant-design/issues/9697\n    // https://stackoverflow.com/q/27947912/3040605\n\n  }, {\n    key: 'fixIERepaint',\n    value: function fixIERepaint() {\n      var _this3 = this;\n\n      if (!isIEorEDGE()) {\n        return;\n      }\n\n      this.fixIERepaintTimer = window.setTimeout(function () {\n        if (_this3.notFoundNode) {\n          _this3.notFoundNode.className = _this3.notFoundNode.className;\n        }\n      }, 0);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          dataSource = _props.dataSource,\n          titleText = _props.titleText,\n          checkedKeys = _props.checkedKeys,\n          lazy = _props.lazy,\n          disabled = _props.disabled,\n          body = _props.body,\n          footer = _props.footer,\n          showSearch = _props.showSearch,\n          style = _props.style,\n          filter = _props.filter,\n          searchPlaceholder = _props.searchPlaceholder,\n          notFoundContent = _props.notFoundContent,\n          itemUnit = _props.itemUnit,\n          itemsUnit = _props.itemsUnit,\n          onScroll = _props.onScroll; // Custom Layout\n\n      var footerDom = footer && footer(this.props);\n      var bodyDom = body && body(this.props);\n      var listCls = classNames(prefixCls, _defineProperty({}, prefixCls + '-with-footer', !!footerDom));\n      var filteredDataSource = [];\n      var totalDataSource = [];\n      var showItems = dataSource.map(function (item) {\n        var _renderItem = _this4.renderItem(item),\n            renderedText = _renderItem.renderedText,\n            renderedEl = _renderItem.renderedEl;\n\n        if (filter && filter.trim() && !_this4.matchFilter(renderedText, item)) {\n          return null;\n        } // all show items\n\n\n        totalDataSource.push(item);\n\n        if (!item.disabled) {\n          // response to checkAll items\n          filteredDataSource.push(item);\n        }\n\n        var checked = checkedKeys.indexOf(item.key) >= 0;\n        return React.createElement(Item, {\n          disabled: disabled,\n          key: item.key,\n          item: item,\n          lazy: lazy,\n          renderedText: renderedText,\n          renderedEl: renderedEl,\n          checked: checked,\n          prefixCls: prefixCls,\n          onClick: _this4.handleSelect\n        });\n      });\n      var unit = dataSource.length > 1 ? itemsUnit : itemUnit;\n      var search = showSearch ? React.createElement('div', {\n        className: prefixCls + '-body-search-wrapper'\n      }, React.createElement(Search, {\n        prefixCls: prefixCls + '-search',\n        onChange: this.handleFilter,\n        handleClear: this.handleClear,\n        placeholder: searchPlaceholder,\n        value: filter\n      })) : null;\n      var listBody = bodyDom || React.createElement('div', {\n        className: classNames(showSearch ? prefixCls + '-body ' + prefixCls + '-body-with-search' : prefixCls + '-body')\n      }, search, React.createElement(Animate, {\n        component: 'ul',\n        componentProps: {\n          onScroll: onScroll\n        },\n        className: prefixCls + '-content',\n        transitionName: this.state.mounted ? prefixCls + '-content-item-highlight' : '',\n        transitionLeave: false\n      }, showItems), React.createElement('div', {\n        className: prefixCls + '-body-not-found',\n        ref: this.saveNotFoundRef\n      }, notFoundContent));\n      var listFooter = footerDom ? React.createElement('div', {\n        className: prefixCls + '-footer'\n      }, footerDom) : null;\n      var checkStatus = this.getCheckStatus(filteredDataSource);\n      var checkedAll = checkStatus === 'all';\n      var checkAllCheckbox = React.createElement(Checkbox, {\n        ref: 'checkbox',\n        disabled: disabled,\n        checked: checkedAll,\n        indeterminate: checkStatus === 'part',\n        onChange: function onChange() {\n          return _this4.props.handleSelectAll(filteredDataSource, checkedAll);\n        }\n      });\n      return React.createElement('div', {\n        className: listCls,\n        style: style\n      }, React.createElement('div', {\n        className: prefixCls + '-header'\n      }, checkAllCheckbox, React.createElement('span', {\n        className: prefixCls + '-header-selected'\n      }, React.createElement('span', null, (checkedKeys.length > 0 ? checkedKeys.length + '/' : '') + totalDataSource.length, ' ', unit), React.createElement('span', {\n        className: prefixCls + '-header-title'\n      }, titleText))), listBody, listFooter);\n    }\n  }]);\n\n  return TransferList;\n}(React.Component);\n\nexport default TransferList;\nTransferList.defaultProps = {\n  dataSource: [],\n  titleText: '',\n  showSearch: false,\n  render: noop,\n  lazy: {}\n};","map":null,"metadata":{},"sourceType":"module"}