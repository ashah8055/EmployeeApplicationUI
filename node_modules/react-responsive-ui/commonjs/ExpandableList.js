'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _ScrollableList = require('./ScrollableList');

var _ScrollableList2 = _interopRequireDefault(_ScrollableList);

var _Expandable = require('./Expandable');

var _Expandable2 = _interopRequireDefault(_Expandable);

var _List = require('./List');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var ExpandableList = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp2 = _class2 = function (_PureComponent) {
	_inherits(ExpandableList, _PureComponent);

	function ExpandableList() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ExpandableList);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableList.__proto__ || Object.getPrototypeOf(ExpandableList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.toggle = function () {
			return _this.expandable.toggle();
		}, _this.expand = function (parameters) {
			return _this.expandable.expand(parameters);
		}, _this.collapse = function () {
			return _this.expandable.collapse();
		}, _this.isExpanded = function () {
			return _this.expandable.isExpanded();
		}, _this.preload = function () {
			return _this.expandable.preload();
		}, _this.onBlur = function (event) {
			return _this.expandable.onBlur(event);
		}, _this.getFocusedItemIndex = function () {
			return _this.list ? _this.list.getFocusedItemIndex() : undefined;
		}, _this.focusItem = function (index) {
			return _this.list.focusItem(index);
		}, _this.onKeyDown = function (event) {
			var onEnter = _this.props.onEnter;


			switch (event.keyCode) {
				// "Escape".
				// Collapse.
				case 27:
					event.preventDefault();
					// Collapse the list if it's expanded.
					return _this.expandable.collapse();

				// "Up" arrow.
				// Select the previous item (if present).
				case 38:
				// "Down" arrow.
				// Select the next item (if present).
				case 40:
					if (_this.isExpanded()) {
						// Navigate the list (if it was already expanded).
						_this.list.onKeyDown(event);
					} else {
						// Expand the list if it's collapsed.
						event.preventDefault();
						_this.expandable.expand();
					}
					return;

				// "Enter".
				case 13:
					// Select the currently focused item.
					return _this.list && _this.list.onKeyDown(event);
			}
		}, _this.storeExpandableRef = function (ref) {
			return _this.expandable = ref;
		}, _this.storeListRef = function (ref) {
			return _this.list = ref;
		}, _this.onChange = function (value, index) {
			var _this$props = _this.props,
			    onChange = _this$props.onChange,
			    focusSelectedItem = _this$props.focusSelectedItem;


			if (onChange) {
				onChange(value, index);
			}

			if (focusSelectedItem) {
				_this.setState({
					selectedItemIndex: index
				});
			}

			_this.collapsedDueToItemBeingSelected = true;
			_this.collapse();
			_this.collapsedDueToItemBeingSelected = undefined;
		}, _this.onCollapse = function (parameters) {
			var onCollapse = _this.props.onCollapse;


			if (onCollapse) {
				onCollapse(_extends({}, parameters, {
					collapsedDueToItemBeingSelected: _this.collapsedDueToItemBeingSelected
				}));
			}

			_this.list && _this.list.unfocus();
		}, _this.onExpand = function () {
			var _this$props2 = _this.props,
			    focusOnExpand = _this$props2.focusOnExpand,
			    onExpand = _this$props2.onExpand,
			    children = _this$props2.children;
			var selectedItemIndex = _this.state.selectedItemIndex;


			if (onExpand) {
				onExpand();
			}

			if (focusOnExpand) {
				if (selectedItemIndex === undefined) {
					_this.list.focus();
				} else {
					_this.list.focusItem(selectedItemIndex);
				}
			}

			// Re-calculate `<ScrollableList/>` height.
			_this.list.calculateHeight();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ExpandableList, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    alignment = _props.alignment,
			    upward = _props.upward,
			    scrollIntoView = _props.scrollIntoView,
			    preload = _props.preload,
			    onPreloadStateChange = _props.onPreloadStateChange,
			    getTogglerNode = _props.getTogglerNode,
			    onFocusOut = _props.onFocusOut,
			    onTapOutside = _props.onTapOutside,
			    onChange = _props.onChange,
			    highlightSelectedItem = _props.highlightSelectedItem,
			    closeLabel = _props.closeLabel,
			    closeButtonIcon = _props.closeButtonIcon,
			    className = _props.className,
			    children = _props.children,
			    rest = _objectWithoutProperties(_props, ['alignment', 'upward', 'scrollIntoView', 'preload', 'onPreloadStateChange', 'getTogglerNode', 'onFocusOut', 'onTapOutside', 'onChange', 'highlightSelectedItem', 'closeLabel', 'closeButtonIcon', 'className', 'children']);

			return _react2.default.createElement(
				_Expandable2.default,
				{
					ref: this.storeExpandableRef,
					alignment: alignment,
					upward: upward,
					scrollIntoView: scrollIntoView,
					preload: preload,
					onPreloadStateChange: onPreloadStateChange,
					onExpand: this.onExpand,
					onCollapse: this.onCollapse,
					getTogglerNode: getTogglerNode,
					onFocusOut: onFocusOut,
					onTapOutside: onTapOutside,
					closeLabel: closeLabel,
					closeButtonIcon: closeButtonIcon,
					className: (0, _classnames2.default)(className, 'rrui__expandable-list', {
						'rrui__expandable-list--left-aligned': alignment === 'left',
						'rrui__expandable-list--right-aligned': alignment === 'right'
					}) },
				_react2.default.createElement(
					_ScrollableList2.default,
					_extends({}, rest, {
						ref: this.storeListRef,
						onChange: this.onChange,
						highlightSelectedItem: onChange === undefined && highlightSelectedItem === undefined ? false : highlightSelectedItem }),
					children
				)
			);
		}
	}], [{
		key: 'getDerivedStateFromProps',
		value: function getDerivedStateFromProps(props, state) {
			if (state.selectedItemValue !== props.value) {
				return {
					selectedItemValue: props.value,
					selectedItemIndex: props.value === undefined ? undefined : (0, _List.findItemIndexByValue)(props.value, props.children)
				};
			}

			return null;
		}
	}]);

	return ExpandableList;
}(PureComponent), _class2.propTypes = {
	// Maximum items fitting the list height (scrollable).
	scrollMaxItems: _propTypes2.default.number,

	// Whether should add `margin-right` for scrollbar width on overflow.
	scrollBarPadding: _propTypes2.default.bool,

	// Preloads the contents of the expandable list
	// before it's expanded. Must return a `Promise`.
	preload: _propTypes2.default.func,

	// Whether the list items should be focused upon expand.
	focusOnExpand: _propTypes2.default.bool.isRequired,
	focusSelectedItem: _propTypes2.default.bool.isRequired,

	className: _propTypes2.default.string
}, _class2.defaultProps = {
	alignment: 'left',
	focusOnExpand: true,
	focusSelectedItem: true
}, _temp2)) || _class;

exports.default = ExpandableList;
//# sourceMappingURL=ExpandableList.js.map