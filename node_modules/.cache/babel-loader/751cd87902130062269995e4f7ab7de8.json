{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Amar/emp/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchLoginUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, call, put, select, take, fork, all, takeLatest } from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\nfunction fetchLoginUser(action) {\n  var formBody, reqMethod, loginUrl, response, result;\n  return _regeneratorRuntime.wrap(function fetchLoginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          formBody = {};\n          formBody.firstname = \"asdfg\"; //action.code;\n\n          formBody.lastname = \"zxcvbb\"; //action.provider;\n\n          formBody.age = \"34\"; //const reqMethod = \"POST\";\n\n          reqMethod = \"GET\";\n          loginUrl = 'http://localhost:8080/employee?firstname=test&lastname=test&age=34';\n          _context.next = 9;\n          return call(GetDataFromServer, loginUrl, '', '');\n\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return response.json();\n\n        case 12:\n          result = _context.sent;\n\n          if (!result.error) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 16;\n          return put({\n            type: \"LOGIN_USER_SERVER_REPONSE_ERROR\",\n            error: result.error\n          });\n\n        case 16:\n          _context.next = 20;\n          break;\n\n        case 18:\n          _context.next = 20;\n          return put({\n            type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS,\n            result: result\n          });\n\n        case 20:\n          _context.next = 25;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n          console.log(\"Error\");\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 22]]);\n}\n\nexport default function rootSaga(params) {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(Types.LOGIN_USER, fetchLoginUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/store/sagas.js"],"names":["fetchLoginUser","rootSaga","takeEvery","call","put","select","take","fork","all","takeLatest","Types","GetDataFromServer","action","formBody","firstname","lastname","age","reqMethod","loginUrl","response","json","result","error","type","LOGIN_USER_SERVER_RESPONSE_SUCCESS","console","log","params","LOGIN_USER"],"mappings":";;;;yBAMWA,c;;;yBAsBcC,Q;;AA5BzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmDC,GAAnD,EAAwDC,UAAxD,QAAyE,oBAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,SAASC,iBAAT,QAAkC,YAAlC;;AAIC,SAAUX,cAAV,CAAyBY,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAESC,UAAAA,QAFT,GAEoB,EAFpB;AAGKA,UAAAA,QAAQ,CAACC,SAAT,GAAqB,OAArB,CAHL,CAGkC;;AAC7BD,UAAAA,QAAQ,CAACE,QAAT,GAAqB,QAArB,CAJL,CAIoC;;AAC/BF,UAAAA,QAAQ,CAACG,GAAT,GAAe,IAAf,CALL,CAMK;;AACMC,UAAAA,SAPX,GAOuB,KAPvB;AAQWC,UAAAA,QARX,GAQqB,oEARrB;AAAA;AASsB,iBAAMf,IAAI,CAACQ,iBAAD,EAAoBO,QAApB,EAA8B,EAA9B,EAAkC,EAAlC,CAAV;;AATtB;AASWC,UAAAA,QATX;AAAA;AAUoB,iBAAMA,QAAQ,CAACC,IAAT,EAAN;;AAVpB;AAUWC,UAAAA,MAVX;;AAAA,eAWSA,MAAM,CAACC,KAXhB;AAAA;AAAA;AAAA;;AAAA;AAYO,iBAAMlB,GAAG,CAAC;AAAEmB,YAAAA,IAAI,EAAE,iCAAR;AAA2CD,YAAAA,KAAK,EAAED,MAAM,CAACC;AAAzD,WAAD,CAAT;;AAZP;AAAA;AAAA;;AAAA;AAAA;AAcO,iBAAMlB,GAAG,CAAC;AAAEmB,YAAAA,IAAI,EAAEb,KAAK,CAACc,kCAAd;AAAkDH,YAAAA,MAAM,EAANA;AAAlD,WAAD,CAAT;;AAdP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBI;AACGI,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAlBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBD,eAAe,SAAUzB,QAAV,CAAmB0B,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMzB,SAAS,CAACQ,KAAK,CAACkB,UAAP,EAAmB5B,cAAnB,CAAf;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put, select, take, fork, all, takeLatest} from 'redux-saga/effects';\nimport * as Types from '../actions/types';\nimport { GetDataFromServer } from '../service';\n\n\n\n function* fetchLoginUser(action){\n    try {\n      let formBody = {};\n      formBody.firstname = \"asdfg\";//action.code;\n      formBody.lastname =  \"zxcvbb\"; //action.provider;\n      formBody.age = \"34\"\n      //const reqMethod = \"POST\";\n      const reqMethod = \"GET\";\n      const loginUrl= 'http://localhost:8080/employee?firstname=test&lastname=test&age=34';\n      const response = yield call(GetDataFromServer, loginUrl ,'', '');\n      const result = yield response.json();\n      if (result.error) {\n        yield put({ type: \"LOGIN_USER_SERVER_REPONSE_ERROR\", error: result.error });        \n      } else {\n        yield put({ type: Types.LOGIN_USER_SERVER_RESPONSE_SUCCESS, result });\n      }\n    } catch (error) {\n     // yield put({ type: Types.SERVER_CALL_FAILED, error: error.message });\n        console.log(\"Error\");\n    }\n  }\n\nexport default function* rootSaga(params){\n  yield takeEvery(Types.LOGIN_USER, fetchLoginUser);  \n}\n"]},"metadata":{},"sourceType":"module"}