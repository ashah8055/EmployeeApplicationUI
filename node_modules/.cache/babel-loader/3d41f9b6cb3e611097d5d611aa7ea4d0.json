{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as moment from 'moment';\nimport { polyfill } from 'react-lifecycles-compat';\nimport Calendar from 'rc-calendar';\nimport RcDatePicker from 'rc-calendar/es/Picker';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport interopDefault from '../_util/interopDefault';\n\nfunction formatValue(value, format) {\n  return value && value.format(format) || '';\n}\n\nvar WeekPicker = function (_React$Component) {\n  _inherits(WeekPicker, _React$Component);\n\n  function WeekPicker(props) {\n    _classCallCheck(this, WeekPicker);\n\n    var _this = _possibleConstructorReturn(this, (WeekPicker.__proto__ || Object.getPrototypeOf(WeekPicker)).call(this, props));\n\n    _this.weekDateRender = function (current) {\n      var selectedValue = _this.state.value;\n      var prefixCls = _this.props.prefixCls;\n\n      if (selectedValue && current.year() === selectedValue.year() && current.week() === selectedValue.week()) {\n        return React.createElement('div', {\n          className: prefixCls + '-selected-day'\n        }, React.createElement('div', {\n          className: prefixCls + '-date'\n        }, current.date()));\n      }\n\n      return React.createElement('div', {\n        className: prefixCls + '-date'\n      }, current.date());\n    };\n\n    _this.handleChange = function (value) {\n      if (!('value' in _this.props)) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      _this.props.onChange(value, formatValue(value, _this.props.format));\n\n      _this.focus();\n    };\n\n    _this.clearSelection = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.handleChange(null);\n    };\n\n    _this.saveInput = function (node) {\n      _this.input = node;\n    };\n\n    var value = props.value || props.defaultValue;\n\n    if (value && !interopDefault(moment).isMoment(value)) {\n      throw new Error('The value/defaultValue of DatePicker or MonthPicker must be ' + 'a moment object after `antd@2.0`, see: https://u.ant.design/date-picker-value');\n    }\n\n    _this.state = {\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(WeekPicker, [{\n    key: 'focus',\n    value: function focus() {\n      this.input.focus();\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      this.input.blur();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _classNames,\n          _this2 = this;\n\n      var _props = this.props,\n          prefixCls = _props.prefixCls,\n          className = _props.className,\n          disabled = _props.disabled,\n          pickerClass = _props.pickerClass,\n          popupStyle = _props.popupStyle,\n          pickerInputClass = _props.pickerInputClass,\n          format = _props.format,\n          allowClear = _props.allowClear,\n          locale = _props.locale,\n          localeCode = _props.localeCode,\n          disabledDate = _props.disabledDate,\n          style = _props.style,\n          onFocus = _props.onFocus,\n          onBlur = _props.onBlur,\n          id = _props.id,\n          suffixIcon = _props.suffixIcon;\n      var pickerValue = this.state.value;\n\n      if (pickerValue && localeCode) {\n        pickerValue.locale(localeCode);\n      }\n\n      var placeholder = 'placeholder' in this.props ? this.props.placeholder : locale.lang.placeholder;\n      var calendar = React.createElement(Calendar, {\n        showWeekNumber: true,\n        dateRender: this.weekDateRender,\n        prefixCls: prefixCls,\n        format: format,\n        locale: locale.lang,\n        showDateInput: false,\n        showToday: false,\n        disabledDate: disabledDate\n      });\n      var clearIcon = !disabled && allowClear && this.state.value ? React.createElement(Icon, {\n        type: 'close-circle',\n        className: prefixCls + '-picker-clear',\n        onClick: this.clearSelection,\n        theme: 'filled'\n      }) : null;\n      var inputIcon = suffixIcon && (React.isValidElement(suffixIcon) ? React.cloneElement(suffixIcon, {\n        className: classNames((_classNames = {}, _defineProperty(_classNames, suffixIcon.props.className, suffixIcon.props.className), _defineProperty(_classNames, prefixCls + '-picker-icon', true), _classNames))\n      }) : React.createElement('span', {\n        className: prefixCls + '-picker-icon'\n      }, suffixIcon)) || React.createElement(Icon, {\n        type: 'calendar',\n        className: prefixCls + '-picker-icon'\n      });\n\n      var input = function input(_ref) {\n        var value = _ref.value;\n        return React.createElement('span', null, React.createElement('input', {\n          ref: _this2.saveInput,\n          disabled: disabled,\n          readOnly: true,\n          value: value && value.format(format) || '',\n          placeholder: placeholder,\n          className: pickerInputClass,\n          onFocus: onFocus,\n          onBlur: onBlur\n        }), clearIcon, inputIcon);\n      };\n\n      return React.createElement('span', {\n        className: classNames(className, pickerClass),\n        style: style,\n        id: id\n      }, React.createElement(RcDatePicker, _extends({}, this.props, {\n        calendar: calendar,\n        prefixCls: prefixCls + '-picker-container',\n        value: pickerValue,\n        onChange: this.handleChange,\n        style: popupStyle\n      }), input));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('value' in nextProps) {\n        return {\n          value: nextProps.value\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return WeekPicker;\n}(React.Component);\n\nWeekPicker.defaultProps = {\n  format: 'gggg-wo',\n  allowClear: true\n};\npolyfill(WeekPicker);\nexport default WeekPicker;","map":null,"metadata":{},"sourceType":"module"}