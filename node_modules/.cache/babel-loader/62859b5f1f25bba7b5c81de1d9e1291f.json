{"ast":null,"code":"import _objectSpread from \"/Users/Amar/emp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as Types from \"../actions/types\";\nvar initialUserObj = {\n  result: {}\n};\n\nvar handleEmployeeList = function handleEmployeeList(state, action) {\n  console.log(\"REdux\" + JSON.stringify(action));\n\n  var newState = _objectSpread({}, state);\n\n  if (action.result !== undefined) {\n    newState = Object.assign({}, state, {\n      \"result\": Object.assign({}, action.result)\n    });\n  }\n\n  console.log(\"STATE->\" + JSON.stringify(newState));\n  return _objectSpread({}, newState);\n};\n\nexport default (function (state, action) {\n  switch (action.type) {\n    case Types.LIST_EMPLOYEE_DETAILS:\n      return handleEmployeeList(state, action);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Amar/emp/src/redux/reducers/Employee_list.js"],"names":["Types","initialUserObj","result","handleEmployeeList","state","action","console","log","JSON","stringify","newState","undefined","Object","assign","type","LIST_EMPLOYEE_DETAILS"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,kBAAvB;AAEA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAAvB;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAUC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAtB;;AACA,MAAIK,QAAQ,qBAAQN,KAAR,CAAZ;;AACA,MAAIC,MAAM,CAACH,MAAP,KAAkBS,SAAtB,EAAiC;AAC7BD,IAAAA,QAAQ,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAAE,gBAAUQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,MAAM,CAACH,MAAzB;AAAZ,KAAzB,CAAX;AAEH;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYC,IAAI,CAACC,SAAL,CAAeC,QAAf,CAAxB;AACA,2BAAYA,QAAZ;AAEH,CAVD;;AAYA,gBAAe,UAACN,KAAD,EAAQC,MAAR,EAAmB;AAC9B,UAAQA,MAAM,CAACS,IAAf;AACI,SAAKd,KAAK,CAACe,qBAAX;AACI,aAAOZ,kBAAkB,CAACC,KAAD,EAAQC,MAAR,CAAzB;;AAEJ;AACI,aAAOD,KAAP;AALR;AASH,CAVD","sourcesContent":["import * as Types from \"../actions/types\";\n\nconst initialUserObj = {\n    result: {}\n};\n\nconst handleEmployeeList = (state, action) => {\n    console.log(\"REdux\" + JSON.stringify(action));\n    let newState = { ...state };\n    if (action.result !== undefined) {\n        newState = Object.assign({}, state, { \"result\": Object.assign({}, action.result) })\n\n    }\n    console.log(\"STATE->\" + JSON.stringify(newState));\n    return { ...newState };\n\n}\n\nexport default (state, action) => {\n    switch (action.type) {\n        case Types.LIST_EMPLOYEE_DETAILS:\n            return handleEmployeeList(state, action);\n\n        default:\n            return state;\n\n    }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}