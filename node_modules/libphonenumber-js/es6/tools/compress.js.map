{"version":3,"sources":["../../source/tools/compress.js"],"names":["compress","input","countries","Object","keys","country_code","country","country_array","phone_code","idd_prefix","national_number_pattern","possible_lengths","formats","map","format","format_array","pattern","leading_digits_patterns","national_prefix_formatting_rule","national_prefix_is_optional_when_formatting","international_format","trim_array","national_prefix","national_prefix_for_parsing","national_prefix_transform_rule","leading_digits","types","types_array","fixed_line","mobile","toll_free","premium_rate","personal_number","voice_mail","uan","pager","voip","shared_cost","type","push","default_idd_prefix","ext","version","country_calling_codes","is_empty","value","undefined","Array","isArray","length","array","pop","element"],"mappings":"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","file":"compress.js","sourcesContent":["export default function compress(input)\r\n{\r\n\tconst countries = {}\r\n\r\n\tfor (const country_code of Object.keys(input.countries))\r\n\t{\r\n\t\tconst country = input.countries[country_code]\r\n\r\n\t\t// When changing this array also change getters in `./metadata.js`\r\n\t\tconst country_array =\r\n\t\t[\r\n\t\t\tcountry.phone_code,\r\n\r\n\t\t\tcountry.idd_prefix,\r\n\r\n\t\t\tcountry.national_number_pattern,\r\n\r\n\t\t\tcountry.possible_lengths,\r\n\t\t\t// country.possible_lengths_local,\r\n\r\n\t\t\tcountry.formats && country.formats.map((format) =>\r\n\t\t\t{\r\n\t\t\t\t// When changing this array also change getters in `./metadata.js`\r\n\t\t\t\tconst format_array =\r\n\t\t\t\t[\r\n\t\t\t\t\tformat.pattern,\r\n\t\t\t\t\tformat.format,\r\n\t\t\t\t\tformat.leading_digits_patterns,\r\n\t\t\t\t\tformat.national_prefix_formatting_rule,\r\n\t\t\t\t\tformat.national_prefix_is_optional_when_formatting,\r\n\t\t\t\t\tformat.international_format\r\n\t\t\t\t]\r\n\r\n\t\t\t\treturn trim_array(format_array)\r\n\t\t\t}),\r\n\r\n\t\t\tcountry.national_prefix,\r\n\t\t\tcountry.national_prefix_formatting_rule,\r\n\t\t\tcountry.national_prefix_for_parsing,\r\n\t\t\tcountry.national_prefix_transform_rule,\r\n\t\t\tcountry.national_prefix_is_optional_when_formatting,\r\n\t\t\tcountry.leading_digits\r\n\t\t]\r\n\r\n\t\tif (country.types)\r\n\t\t{\r\n\t\t\tconst types_array =\r\n\t\t\t[\r\n\t\t\t\t// These are common\r\n\t\t\t\tcountry.types.fixed_line,\r\n\t\t\t\tcountry.types.mobile,\r\n\t\t\t\tcountry.types.toll_free,\r\n\t\t\t\tcountry.types.premium_rate,\r\n\t\t\t\tcountry.types.personal_number,\r\n\r\n\t\t\t\t// These are less common\r\n\t\t\t\tcountry.types.voice_mail,\r\n\t\t\t\tcountry.types.uan,\r\n\t\t\t\tcountry.types.pager,\r\n\t\t\t\tcountry.types.voip,\r\n\t\t\t\tcountry.types.shared_cost\r\n\t\t\t]\r\n\t\t\t.map((type) => type && trim_array\r\n\t\t\t([\r\n\t\t\t\ttype.pattern,\r\n\t\t\t\ttype.possible_lengths\r\n\t\t\t\t// type.possible_lengths_local\r\n\t\t\t]))\r\n\r\n\t\t\tcountry_array.push(trim_array(types_array))\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcountry_array.push(null)\r\n\t\t}\r\n\r\n\t\tcountry_array.push(country.default_idd_prefix)\r\n\r\n\t\tcountry_array.push(country.ext)\r\n\r\n\t\tcountries[country_code] = trim_array(country_array)\r\n\t}\r\n\r\n\treturn {\r\n\t\tversion: input.version,\r\n\t\tcountry_calling_codes: input.country_calling_codes,\r\n\t\tcountries\r\n\t}\r\n}\r\n\r\n// Empty strings are not considered \"empty\".\r\nfunction is_empty(value)\r\n{\r\n\treturn value === undefined\r\n\t\t|| value === null\r\n\t\t|| value === false\r\n\t\t|| (Array.isArray(value) && value.length === 0)\r\n}\r\n\r\n// Removes trailing empty values from an `array`\r\nfunction trim_array(array)\r\n{\r\n\t// First, trim any empty elements.\r\n\twhile (array.length > 0 && is_empty(array[array.length - 1]))\r\n\t{\r\n\t\tarray.pop()\r\n\t}\r\n\r\n\t// Then replace all remaining empty elements with `0`\r\n\t// and also `true` with `1`.\r\n\treturn array.map((element) =>\r\n\t{\r\n\t\tif (is_empty(element)) {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t\tif (element === true) {\r\n\t\t\treturn 1\r\n\t\t}\r\n\t\treturn element\r\n\t})\r\n}"]}