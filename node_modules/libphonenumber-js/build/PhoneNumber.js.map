{"version":3,"sources":["../source/PhoneNumber.js"],"names":["PhoneNumber","countryCallingCode","nationalNumber","metadata","TypeError","isCountryCode","country","_metadata","number","v2","format","options","value","test"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,W;AACpB,sBAAYC,kBAAZ,EAAgCC,cAAhC,EAAgDC,QAAhD,EAA0D;AAAA;;AACzD,MAAI,CAACF,kBAAL,EAAyB;AACxB,SAAM,IAAIG,SAAJ,CAAc,iCAAd,CAAN;AACA;AACD,MAAI,CAACF,cAAL,EAAqB;AACpB,SAAM,IAAIE,SAAJ,CAAc,6BAAd,CAAN;AACA;AACD;AACA;AACA,MAAIC,cAAcJ,kBAAd,CAAJ,EAAuC;AACtC,QAAKK,OAAL,GAAeL,kBAAf;AACA,OAAMM,YAAY,uBAAaJ,QAAb,CAAlB;AACAI,aAAUD,OAAV,CAAkBL,kBAAlB;AACAA,wBAAqBM,UAAUN,kBAAV,EAArB;AACA;AACD,OAAKA,kBAAL,GAA0BA,kBAA1B;AACA,OAAKC,cAAL,GAAsBA,cAAtB;AACA,OAAKM,MAAL,GAAc,MAAM,KAAKP,kBAAX,GAAgC,KAAKC,cAAnD;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA;;;;+BAEY;AACZ,UAAO,gCAAiB,IAAjB,EAAuB,EAAEM,IAAI,IAAN,EAAvB,EAAqC,KAAKN,QAA1C,CAAP;AACA;;;4BAES;AACT,UAAO,wBAAc,IAAd,EAAoB,EAAEM,IAAI,IAAN,EAApB,EAAkC,KAAKN,QAAvC,CAAP;AACA;;;4BAES;AACT,UAAO,6BAAc,IAAd,EAAoB,EAAEM,IAAI,IAAN,EAApB,EAAkC,KAAKN,QAAvC,CAAP;AACA;;;yBAEMO,O,EAAQC,O,EAAS;AACvB,UAAO,sBAAa,IAAb,EAAmBD,OAAnB,EAA2BC,uBAAeA,OAAf,IAAwBF,IAAI,IAA5B,MAAqC,EAAEA,IAAI,IAAN,EAAhE,EAA8E,KAAKN,QAAnF,CAAP;AACA;;;iCAEcQ,O,EAAS;AACvB,UAAO,KAAKD,MAAL,CAAY,UAAZ,EAAwBC,OAAxB,CAAP;AACA;;;sCAEmBA,O,EAAS;AAC5B,UAAO,KAAKD,MAAL,CAAY,eAAZ,EAA6BC,OAA7B,CAAP;AACA;;;yBAEMA,O,EAAS;AACf,UAAO,KAAKD,MAAL,CAAY,SAAZ,EAAuBC,OAAvB,CAAP;AACA;;;;;;kBAhDmBX,W;;;AAmDrB,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACO,KAAD;AAAA,QAAW,cAAaC,IAAb,CAAkBD,KAAlB;AAAX;AAAA,CAAtB","file":"PhoneNumber.js","sourcesContent":["import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber'\r\nimport isValidNumber from './validate'\r\nimport getNumberType from './getNumberType'\r\nimport formatNumber from './format'\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\tconst _metadata = new Metadata(metadata)\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(this, format, options ? { ...options, v2: true } : { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)"]}