{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { changeConfirmLocale } from '../modal/locale';\n\nfunction setMomentLocale(locale) {\n  if (locale && locale.locale) {\n    interopDefault(moment).locale(locale.locale);\n  } else {\n    interopDefault(moment).locale('en');\n  }\n}\n\nvar LocaleProvider = function (_React$Component) {\n  _inherits(LocaleProvider, _React$Component);\n\n  function LocaleProvider(props) {\n    _classCallCheck(this, LocaleProvider);\n\n    var _this = _possibleConstructorReturn(this, (LocaleProvider.__proto__ || Object.getPrototypeOf(LocaleProvider)).call(this, props));\n\n    setMomentLocale(props.locale);\n    changeConfirmLocale(props.locale && props.locale.Modal);\n    return _this;\n  }\n\n  _createClass(LocaleProvider, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        antLocale: _extends({}, this.props.locale, {\n          exist: true\n        })\n      };\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var locale = this.props.locale;\n      var nextLocale = nextProps.locale;\n\n      if (locale !== nextLocale) {\n        setMomentLocale(nextProps.locale);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var locale = this.props.locale;\n      changeConfirmLocale(locale && locale.Modal);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      changeConfirmLocale();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return LocaleProvider;\n}(React.Component);\n\nexport default LocaleProvider;\nLocaleProvider.propTypes = {\n  locale: PropTypes.object\n};\nLocaleProvider.defaultProps = {\n  locale: {}\n};\nLocaleProvider.childContextTypes = {\n  antLocale: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}